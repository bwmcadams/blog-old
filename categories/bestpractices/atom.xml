<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: bestpractices | Evil Monkey Labs]]></title>
  <link href="http://blog.evilmonkeylabs.com/categories/bestpractices/atom.xml" rel="self"/>
  <link href="http://blog.evilmonkeylabs.com/"/>
  <updated>2015-04-13T13:43:23-07:00</updated>
  <id>http://blog.evilmonkeylabs.com/</id>
  <author>
    <name><![CDATA[Brendan McAdams]]></name>
    <email><![CDATA[bwmcadams@evilmonkeylabs.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Distributing Akka Workloads - And Shutting Down Afterwards]]></title>
    <link href="http://blog.evilmonkeylabs.com/2013/01/17/Distributing_Akka_Workloads_And_Shutting_Down_After/"/>
    <updated>2013-01-17T00:00:00-08:00</updated>
    <id>http://blog.evilmonkeylabs.com/2013/01/17/Distributing_Akka_Workloads_And_Shutting_Down_After</id>
    <content type="html"><![CDATA[<p>Recently, as part of my role with the Professional Services team at <a href="http://typesafe.com">Typesafe</a>, I have been working on site at a customer who is using a lot of Akka and Play. During this time, I&rsquo;ve gotten a chance to solve some interesting problems and answer obscure questions&hellip; which for those who like chasing these kinds of puzzles issues (like myself) is a fantastic way to spend the day (<em>and if this kind of thing sounds exciting to you, we&rsquo;re aggressively hiring for <a href="http://blog.typesafe.com/send-akka-consultant-candidates-our-way-and-w">this kind of work</a> ;)</em> )</p>

<p>One item in particular came up recently as we tried to create a cron-style job to do interval data processing – big blocks of input data would be separated into individual instructions for processing, using <a href="http://doc.akka.io/docs/akka/2.0.5/">Akka 2.0.x</a>. The developer I was working with found that, among other things, using only a single actor to process all of their data items was not particularly performant. Further, once we solved this problem we couldn&rsquo;t figure out how to cleanly shut down Akka without interrupting any messages being processed. Fortunately, Akka offers simple answers to both of these problems&hellip; if you know where to look.</p>

<!--more-->


<p>By their nature, an Actor has a mailbox queueing all of the instructions sent to it, in order, and processes these messages one by one. In short, an individual actor is sequential, not parallel – performance is linear as we add more messages.</p>

<p><div class="highlight"><pre><code class="language-scala" data-lang="scala"><span class="lineno"> 1</span> <span class="k">package</span> <span class="nn">net.evilmonkeylabs.demo</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
<span class="lineno"> 2</span> 
<span class="lineno"> 3</span> <span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">import</span> <span class="nn">akka.actor.</span><span class="o">{</span><span class="nc">ActorSystem</span><span class="o">,</span> <span class="nc">Actor</span><span class="o">,</span> <span class="nc">Props</span><span class="o">}</span>
<span class="lineno"> 4</span> <span class="k">import</span> <span class="nn">akka.event.Logging</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
<span class="lineno"> 5</span> 
<span class="lineno"> 6</span> <span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">case</span> <span class="k">class</span> <span class="nc">Message</span><span class="o">(</span><span class="n">msg</span><span class="k">:</span> <span class="kt">String</span><span class="o">)&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
<span class="lineno"> 7</span> 
<span class="lineno"> 8</span> <span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">class</span> <span class="nc">SimpleActor</span> <span class="k">extends</span> <span class="nc">Actor</span> <span class="o">{</span>
<span class="lineno"> 9</span>   <span class="k">val</span> <span class="n">log</span> <span class="k">=</span> <span class="nc">Logging</span><span class="o">(</span><span class="n">context</span><span class="o">.</span><span class="n">system</span><span class="o">,</span> <span class="k">this</span><span class="o">)&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
<span class="lineno">10</span> 
<span class="lineno">11</span> <span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">def</span> <span class="n">receive</span> <span class="k">=</span> <span class="o">{</span>
<span class="lineno">12</span>     <span class="k">case</span> <span class="nc">Message</span><span class="o">(</span><span class="n">msg</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="n">log</span><span class="o">.</span><span class="n">info</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="nc">Got</span> <span class="n">a</span> <span class="n">valid</span> <span class="n">message</span><span class="k">:</span> <span class="kt">%s&amp;rdquo</span><span class="o">;.</span><span class="n">format</span><span class="o">(</span><span class="n">msg</span><span class="o">))</span>
<span class="lineno">13</span>     <span class="k">case</span> <span class="n">default</span> <span class="k">=&gt;</span> <span class="n">log</span><span class="o">.</span><span class="n">error</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="nc">Got</span> <span class="n">a</span> <span class="n">message</span> <span class="n">I</span> <span class="n">don</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="o">;</span><span class="n">t</span> <span class="n">understand</span><span class="o">.&amp;</span><span class="n">rdquo</span><span class="o">;)</span>
<span class="lineno">14</span>   <span class="o">}</span>
<span class="lineno">15</span> <span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
<span class="lineno">16</span> 
<span class="lineno">17</span> <span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">object</span> <span class="nc">SimpleMain</span> <span class="k">extends</span> <span class="nc">App</span> <span class="o">{</span>
<span class="lineno">18</span>   <span class="k">val</span> <span class="n">system</span> <span class="k">=</span> <span class="nc">ActorSystem</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="nc">SimpleSystem</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;)</span>
<span class="lineno">19</span>   <span class="k">val</span> <span class="n">simpleActor</span> <span class="k">=</span> <span class="n">system</span><span class="o">.</span><span class="n">actorOf</span><span class="o">(</span><span class="nc">Props</span><span class="o">[</span><span class="kt">SimpleActor</span><span class="o">],</span> <span class="n">name</span> <span class="k">=</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">simple</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;)&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
<span class="lineno">20</span> 
<span class="lineno">21</span> <span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">simpleActor</span> <span class="o">!</span> <span class="nc">Message</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="nc">Hello</span><span class="o">,</span> <span class="nc">Akka</span><span class="o">!&amp;</span><span class="n">rdquo</span><span class="o">;)</span> <span class="c1">// toss a message into our actor with the &amp;ldquo;!&amp;rdquo; send op</span>
<span class="lineno">22</span> <span class="o">}</span></code></pre></div></p>

<p>The obvious answer here is to spin up a <em>pool</em> of identical actors, all sharing the workload. While I seem to recall having to do a lot of custom work back in the early days of Pre-1.0 Akka, this is now <em>tremendously</em> easy to accomplish in Akka 2.0+, by the magic of <a href="http://doc.akka.io/docs/akka/2.0.5/scala/routing.html">Akka Routing</a>.</p>

<p>You may ask, just what is a Router in Akka? In simple terms, a Router is an Actor which proxies (and by its nature, <a href="http://doc.akka.io/docs/akka/2.0.5/scala/fault-tolerance.html">supervises</a>) the mailbox for one or more child actors (Which I&rsquo;ll refer to as &lsquo;Routees&rsquo; where possible), and routes messages to them with custom behavior. Akka provides a number of predefined Routers, and most of these are designed to have many child actors (aka &lsquo;routees&rsquo;) and forward a single inbound message to only <em>one</em> of these routees – though there are also several Routers which broadcast to all, including the very useful <a href="http://doc.akka.io/docs/akka/2.0.5/scala/routing.html#ScatterGatherFirstCompletedRouter"><code>ScatterGatherFirstCompletedRouter</code></a> (the use of which I&rsquo;ll cover in a future post).</p>

<p>In our case, what we wanted was several copies of the same actor, working together, but with a given message processed <em>only once</em> – so we aren&rsquo;t worried about Broadcast style routers for now. For this kind of task, there are two built-in router types that I would reach for personally: <a href="http://doc.akka.io/docs/akka/2.0.5/scala/routing.html#RoundRobinRouter"><code>RoundRobinRouter</code></a>, and <a href="http://doc.akka.io/docs/akka/2.0.5/scala/routing.html#SmallestMailboxRouter"><code>SmallestMailboxRouter</code></a>. The astute reader may also note the existence of a <a href="http://doc.akka.io/docs/akka/2.0.5/scala/routing.html#RandomRouter"><code>RandomRouter</code></a> – but my  background makes me somewhat wary of Random distribution of workload due to fear of <a href="http://en.wikipedia.org/wiki/Hot_spot_(computer_science)">hot spotting</a>.</p>

<p>The <code>RoundRobinRouter</code> and <code>SmallestMailboxRouter</code> are well suited for our needs here, so let&rsquo;s look at those. <code>RoundRobinRouter</code> sends the messages one by one through the list of routees – A, B, C, D then A, B, C, D again and so on. By contrasts, the <code>SmallestMailboxRouter</code> routes messages to the routee with the least messages currently in its queue, so that if one is running faster than others for some reason he can do some extra work. While this behavior is admirable for a more complex system, let&rsquo;s keep things simple in our example. We&rsquo;re going to use the <code>RoundRobinRouter</code> for these examples, as it gives us some predictable &amp; well defined behavior to work with. Spinning up a router on top of an actor – and having it automatically spin up duplicates of that actor to route to - is a fairly straightforward process in Akka. We can leave our existing <code>SimpleActor</code> in place, and just change how we set it up.</p>

<p><div class="highlight"><pre><code class="language-scala" data-lang="scala"><span class="lineno"> 1</span> <span class="k">import</span> <span class="nn">akka.routing.RoundRobinRouter</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
<span class="lineno"> 2</span> 
<span class="lineno"> 3</span> <span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">object</span> <span class="nc">SimpleRouterSetup</span> <span class="k">extends</span> <span class="nc">App</span> <span class="o">{</span>
<span class="lineno"> 4</span>   <span class="k">val</span> <span class="n">system</span> <span class="k">=</span> <span class="nc">ActorSystem</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="nc">SimpleSystem</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;)</span>
<span class="lineno"> 5</span>   <span class="k">val</span> <span class="n">simpleRouted</span> <span class="k">=</span> <span class="n">system</span><span class="o">.</span><span class="n">actorOf</span><span class="o">(</span><span class="nc">Props</span><span class="o">[</span><span class="kt">SimpleActor</span><span class="o">].</span><span class="n">withRouter</span><span class="o">(</span>
<span class="lineno"> 6</span>                         <span class="nc">RoundRobinRouter</span><span class="o">(</span><span class="n">nrOfInstances</span> <span class="k">=</span> <span class="mi">10</span><span class="o">)</span>
<span class="lineno"> 7</span>                      <span class="o">),</span> <span class="n">name</span> <span class="k">=</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">simpleRoutedActor</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;)&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
<span class="lineno"> 8</span> 
<span class="lineno"> 9</span> <span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">for</span> <span class="o">(</span><span class="n">n</span> <span class="o">&amp;</span><span class="n">lt</span><span class="o">;-</span> <span class="mi">1</span> <span class="n">until</span> <span class="mi">10</span><span class="o">)</span>  <span class="n">simpleRouted</span> <span class="o">!</span> <span class="nc">Message</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="nc">Hello</span><span class="o">,</span> <span class="nc">Akka</span> <span class="o">#%</span><span class="n">d</span><span class="o">!&amp;</span><span class="n">rdquo</span><span class="o">;.</span><span class="n">format</span><span class="o">(</span><span class="n">n</span><span class="o">))</span>
<span class="lineno">10</span> <span class="o">}</span></code></pre></div></p>

<p>Note the addition of a call to the <code>withRouter()</code> method on our <code>Props[ActorName]</code> declaration. Where a normal <code>Props[ActorName]</code> call sets up a single Actor, <code>withRouter()</code> will return us a Router with <code>nrOfInstances</code> child actors.  Here, we&rsquo;ve setup a <code>RoundRobinRouter</code> with 10 routees; if we look at the output of running this new <code>SimpleRouterSetup</code>, we&rsquo;ll see our log entries have several different actor IDs in them:</p>

<p><div class="highlight"><pre><code class="language-text" data-lang="text">[INFO] [01/17/2013 15:32:51.897] [SimpleSystem-akka.actor.default-dispatcher-7] [akka://SimpleSystem/user/simpleRoutedActor/$f] Got a valid message: Hello, Akka #6!
[INFO] [01/17/2013 15:32:51.900] [SimpleSystem-akka.actor.default-dispatcher-8] [akka://SimpleSystem/user/simpleRoutedActor/$e] Got a valid message: Hello, Akka #5!
[INFO] [01/17/2013 15:32:51.900] [SimpleSystem-akka.actor.default-dispatcher-13] [akka://SimpleSystem/user/simpleRoutedActor/$d] Got a valid message: Hello, Akka #4!</code></pre></div></p>

<p>With the previous example, we were very specific in our setup code – hardcoding the type of router we want as well as the number of routee actor instances. Hardcoding is rarely a good idea, and as such Akka also offers an easy way to make this externally configurable. We can change our router instantiation to read from the config instead:</p>

<p><div class="highlight"><pre><code class="language-scala" data-lang="scala"><span class="lineno">1</span> <span class="k">import</span> <span class="nn">akka.routing.</span><span class="o">{</span><span class="nc">FromConfig</span><span class="o">,</span> <span class="nc">RoundRobinRouter</span><span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
<span class="lineno">2</span> 
<span class="lineno">3</span> <span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">object</span> <span class="nc">SimpleFileConfiggedRouterSetup</span> <span class="k">extends</span> <span class="nc">App</span> <span class="o">{</span>
<span class="lineno">4</span>   <span class="k">val</span> <span class="n">system</span> <span class="k">=</span> <span class="nc">ActorSystem</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="nc">SimpleSystem</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;)</span>
<span class="lineno">5</span>   <span class="k">val</span> <span class="n">simpleRouted</span> <span class="k">=</span> <span class="n">system</span><span class="o">.</span><span class="n">actorOf</span><span class="o">(</span><span class="nc">Props</span><span class="o">[</span><span class="kt">SimpleActor</span><span class="o">].</span><span class="n">withRouter</span><span class="o">(</span><span class="nc">FromConfig</span><span class="o">()),</span>
<span class="lineno">6</span>                                     <span class="n">name</span> <span class="k">=</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">simpleRoutedActor</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;)&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
<span class="lineno">7</span> 
<span class="lineno">8</span> <span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">for</span> <span class="o">(</span><span class="n">n</span> <span class="o">&amp;</span><span class="n">lt</span><span class="o">;-</span> <span class="mi">1</span> <span class="n">until</span> <span class="mi">10</span><span class="o">)</span>  <span class="n">simpleRouted</span> <span class="o">!</span> <span class="nc">Message</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="nc">Hello</span><span class="o">,</span> <span class="nc">Akka</span> <span class="o">#%</span><span class="n">d</span><span class="o">!&amp;</span><span class="n">rdquo</span><span class="o">;.</span><span class="n">format</span><span class="o">(</span><span class="n">n</span><span class="o">))</span>
<span class="lineno">9</span> <span class="o">}</span></code></pre></div></p>

<p>We&rsquo;ve replaced our explicit instantiation of a <code>RoundRobinRouter</code> here with a call to <code>FromConfig()</code>, which tells Akka to find a matching configuration entry with the router setup details.  From here, we then just need to add an entry to our Akka configuration, in the <code>deployment</code> block, with the name we gave our Router:</p>

<p><div class="highlight"><pre><code class="language-scala" data-lang="scala"><span class="n">deployment</span> <span class="o">{</span>
    <span class="o">/</span><span class="n">simpleRoutedActor</span> <span class="o">{</span>
        <span class="n">router</span> <span class="k">=</span> <span class="n">round</span><span class="o">-</span><span class="n">robin</span>
        <span class="n">nr</span><span class="o">-</span><span class="n">of</span><span class="o">-</span><span class="n">instances</span> <span class="k">=</span> <span class="mi">5</span>
    <span class="o">}</span>
<span class="o">}</span></code></pre></div></p>

<p>Now we have an instance of <code>RoundRobinRouter</code>, spinning up and managing 5 identical copies of our <code>SimpleActor</code> – and we can swap out the router type or even raise &amp; lower the number of routees easily from our configuration. From our standpoint as a programmer, the <code>ActorRef</code> we get back from our router initialization is fairly transparent – messages we send to it get routed automatically to a routee, and replies can come back from those actors as well. This behavior is a boon for us, as it means we can begin sending messages to the router without worrying about any special instructions.</p>

<p>Great! We now have a system for distributing our load. If we were feeling particularly adventurous, we could even combine routers with remote actors&hellip; but that&rsquo;s a different post, for another day.</p>

<h2>Cleaning Up After Ourselves</h2>

<p>Here&rsquo;s the part where we once again got stuck. Because we were building a cron job that was meant to run every once in awhile, do its work and then shut down, we found ourselves at odds with Akka&rsquo;s behavior. In order to enable it to run as a daemon and run over long periods of time processing messages at potentially unreliable intervals, Akka&rsquo;s <a href="http://doc.akka.io/docs/akka/2.0.5/general/actor-systems.html"><code>ActorSystem</code></a> starts up a pool of threads. This <code>ActorSystem</code> and its threads continue running – even after our <code>main</code> method completes and we expect exit.  For many types of applications this is ideal, as we want to run continuously; for a cron job however, we want to shut down when our work is done.</p>

<p>The first thought you have might be &ldquo;Well, just throw in a <code>System.exit()</code> call!&rdquo;. Lest we forget, Actors are worked with asynchronously - we are not blocking while we wait for their actions to complete. We can demonstrate that quickly with a  block of code to interact with our Actors. Let&rsquo;s have our Actors print a message when they receive it, but also print as soon as our loop that sends messages <em>to</em> the actors completes.</p>

<p><div class="highlight"><pre><code class="language-scala" data-lang="scala"><span class="lineno">1</span> <span class="k">for</span> <span class="o">(</span><span class="n">n</span> <span class="o">&amp;</span><span class="n">lt</span><span class="o">;-</span> <span class="mi">1</span> <span class="n">until</span> <span class="mi">100</span><span class="o">)</span>  <span class="n">simpleRouted</span> <span class="o">!</span> <span class="nc">Message</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="nc">Hello</span><span class="o">,</span> <span class="nc">Akka</span> <span class="o">#%</span><span class="n">d</span><span class="o">!&amp;</span><span class="n">rdquo</span><span class="o">;.</span><span class="n">format</span><span class="o">(</span><span class="n">n</span><span class="o">))&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
<span class="lineno">2</span> 
<span class="lineno">3</span> <span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="nc">System</span><span class="o">.</span><span class="n">err</span><span class="o">.</span><span class="n">println</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="nc">Finished</span> <span class="n">sending</span> <span class="n">messages</span> <span class="n">to</span> <span class="nc">Router</span><span class="o">.&amp;</span><span class="n">rdquo</span><span class="o">;)</span></code></pre></div>
You might have expected a more sequential behavior out of this code, where everything went in order, such as:</p>

<p><div class="highlight"><pre><code class="language-scala" data-lang="scala"><span class="nc">Got</span> <span class="n">a</span> <span class="n">valid</span> <span class="n">message</span><span class="k">:</span> <span class="kt">Hello</span><span class="o">,</span> <span class="nc">Akka</span> <span class="k">#</span><span class="mi">2</span>
<span class="nc">Got</span> <span class="n">a</span> <span class="n">valid</span> <span class="n">message</span><span class="k">:</span> <span class="kt">Hello</span><span class="o">,</span> <span class="nc">Akka</span> <span class="k">#</span><span class="mi">3</span>
<span class="nc">Got</span> <span class="n">a</span> <span class="n">valid</span> <span class="n">message</span><span class="k">:</span> <span class="kt">Hello</span><span class="o">,</span> <span class="nc">Akka</span> <span class="k">#</span><span class="mi">4</span>
    <span class="o">&amp;</span><span class="n">hellip</span><span class="o">;</span>
<span class="nc">Got</span> <span class="n">a</span> <span class="n">valid</span> <span class="n">message</span><span class="k">:</span> <span class="kt">Hello</span><span class="o">,</span> <span class="nc">Akka</span> <span class="k">#</span><span class="mi">98</span>
<span class="nc">Got</span> <span class="n">a</span> <span class="n">valid</span> <span class="n">message</span><span class="k">:</span> <span class="kt">Hello</span><span class="o">,</span> <span class="nc">Akka</span> <span class="k">#</span><span class="mi">99</span>
<span class="nc">Got</span> <span class="n">a</span> <span class="n">valid</span> <span class="n">message</span><span class="k">:</span> <span class="kt">Hello</span><span class="o">,</span> <span class="nc">Akka</span> <span class="k">#</span><span class="mi">100</span>
<span class="nc">Finished</span> <span class="n">sending</span> <span class="n">messages</span> <span class="n">to</span> <span class="nc">Router</span><span class="o">.</span></code></pre></div></p>

<p>Unfortunately, things don&rsquo;t work <em>quite</em> this way – the invocation to send a message to an Actor is asynchronous and returns immediately, not waiting for the Actor to process our message. Which means we probably saw our &ldquo;Finished Sending&rdquo; notification well before all of &ldquo;Got a valid message&rdquo; printouts. Herein lies our problem – if we force a <code>System.exit()</code> as soon as all of our messages are sent, we will shut down before the processing is done (especially if we are doing something involved like a database operation inside the actor).</p>

<p>Similarly, if instead of System.exit, we were force the <code>ActorSystem</code> to shutdown, we would hit a problem. When the <code>ActorSystem</code> is shut off, Akka will not wait for all queued messages to be processed, and instead begins shutting all Actors down as soon as they finish their <em>current</em> message. Despite our progress with routers, this shutdown behavior is less than ideal for our purposes. Thankfully, there <em>is</em> a solution - but first, let&rsquo;s step back and take a quick look at how we shut down a single actor.</p>

<h3>Poisoning Actors (No, not Wallace Shawn)</h3>

<p><img src="http://blog.evilmonkeylabs.com/images/princess_bride_poison.jpg"/></p>

<p>In order to facilitate the concept of &ldquo;Finish what you are doing, and then shut down&rdquo; with Actors, Akka offers <code>akka.actor.PoisonPill</code>. As a baked in, default behavior, all Akka Actors will automatically handle a <code>PoisonPill</code> message as an instruction to shut down. To use a <code>PoisonPill</code>, we send it to the actor <em>like any other message</em>. Because of this, it will enter the Actor&rsquo;s mailbox and only be processed when it is dequeued.  So if we load 10,000 &ldquo;Do a task&rdquo; messages to an Actor and then send a <code>PoisonPill</code>, we can rightly expect our tasks to complete before the Actor shuts down. This behavior is baked into the default receive handler of all Akka Actors:</p>

<p><div class="highlight"><pre><code class="language-scala" data-lang="scala"><span class="k">case</span> <span class="nc">PoisonPill</span>               <span class="k">⇒</span> <span class="n">self</span><span class="o">.</span><span class="n">stop</span><span class="o">()</span></code></pre></div></p>

<p>Let&rsquo;s take a brief look at what happens when we use this <code>PoisonPill</code> with a single Actor, before taking a look at Routers:</p>

<p><div class="highlight"><pre><code class="language-scala" data-lang="scala"><span class="lineno"> 1</span> <span class="k">import</span> <span class="nn">akka.actor.PoisonPill</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
<span class="lineno"> 2</span> 
<span class="lineno"> 3</span> <span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">object</span> <span class="nc">SimplePoisoner</span> <span class="k">extends</span> <span class="nc">App</span> <span class="o">{</span>
<span class="lineno"> 4</span>   <span class="k">val</span> <span class="n">system</span> <span class="k">=</span> <span class="nc">ActorSystem</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="nc">SimpleSystem</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;)</span>
<span class="lineno"> 5</span>   <span class="k">val</span> <span class="n">simpleActor</span> <span class="k">=</span> <span class="n">system</span><span class="o">.</span><span class="n">actorOf</span><span class="o">(</span><span class="nc">Props</span><span class="o">[</span><span class="kt">SimpleActor</span><span class="o">],</span> <span class="n">name</span> <span class="k">=</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">simple</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;)&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
<span class="lineno"> 6</span> 
<span class="lineno"> 7</span> <span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">simpleActor</span> <span class="o">!</span> <span class="nc">Message</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="nc">Hello</span><span class="o">,</span> <span class="nc">Akka</span><span class="o">!&amp;</span><span class="n">rdquo</span><span class="o">;)</span>
<span class="lineno"> 8</span>   <span class="n">simpleActor</span> <span class="o">!</span> <span class="nc">PoisonPill</span>
<span class="lineno"> 9</span>   <span class="n">simpleActor</span> <span class="o">!</span> <span class="nc">Message</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="nc">Boy</span><span class="o">,</span> <span class="n">that</span> <span class="n">was</span> <span class="n">some</span> <span class="n">tasty</span> <span class="n">arsenic</span><span class="o">!&amp;</span><span class="n">rdquo</span><span class="o">;)</span>
<span class="lineno">10</span> <span class="o">}</span></code></pre></div></p>

<p>If we run this code, we&rsquo;ll note that after the <code>PoisonPill</code> is sent additional messages sent to the actor disappear, as the target Actor has gone away. But what would happen if we tried this with Routers in play?</p>

<p>Unfortunately,  when sent to a Router, <code>PoisonPill</code> behaves quite differently from many users&#8217; expectations – as it is treated differently than normal messages to a router. Because of the way that default &ldquo;Handle a <code>PoisonPill</code>&rdquo; behavior is baked into all Actors (of which Routers are), Routers <em>do not</em> forward a <code>PoisonPill</code> to their routees, but instead take it as an instruction directed at themselves.</p>

<p>This behavior can be surprising at first, especially because shutting an Actor down <em>also shuts down all of its children</em>, allowing the children only to continue processing their current message. Again, we find behavior contrary to what we might want.</p>

<h3>Broadcasting to Akka Routers</h3>

<p>Still determined to solve our shutdown problem, what we want to try now is ask each Actor that is routed to shut itself down <em>after its entire queue is processed</em>. A nice side effect of this is that when all of a Router&rsquo;s children shut down, the Router shuts itself down too. While the Routers we are currently using only route a message to a single Actor, it is possible to broadcast a message to all routees - using a special case class <code>akka.routing.Broadcast</code>.  When a Router receives a <code>Broadcast</code>, it unwraps the message contained within and forwards that message to <em>every Actor it is routing for</em>.</p>

<p><div class="highlight"><pre><code class="language-scala" data-lang="scala"><span class="lineno">1</span> <span class="k">import</span> <span class="nn">akka.routing.Broadcast</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
<span class="lineno">2</span> 
<span class="lineno">3</span> <span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">simpleRouter</span> <span class="o">!</span> <span class="nc">Broadcast</span><span class="o">(</span><span class="nc">Message</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">I</span> <span class="n">will</span> <span class="n">not</span> <span class="n">buy</span> <span class="k">this</span> <span class="n">record</span><span class="o">,</span> <span class="n">it</span> <span class="n">is</span> <span class="n">scratched</span><span class="o">!&amp;</span><span class="n">rdquo</span><span class="o">;))</span></code></pre></div></p>

<p>When running this code, we will see every actor in our Router setup repeat the message, &ldquo;I will not buy this record, it is scratched!&rdquo;. Because the Router does not look at the message being broadcast once unwrapped, his trick works effectively for our task:</p>

<p><div class="highlight"><pre><code class="language-scala" data-lang="scala"><span class="lineno">1</span> <span class="k">for</span> <span class="o">(</span><span class="n">n</span> <span class="o">&amp;</span><span class="n">lt</span><span class="o">;-</span> <span class="mi">1</span> <span class="n">until</span> <span class="mi">10</span><span class="o">)</span>  <span class="n">simpleRouter</span> <span class="o">!</span> <span class="nc">Message</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="nc">Hello</span><span class="o">,</span> <span class="nc">Akka</span> <span class="o">#%</span><span class="n">d</span><span class="o">!&amp;</span><span class="n">rdquo</span><span class="o">;.</span><span class="n">format</span><span class="o">(</span><span class="n">n</span><span class="o">))</span>
<span class="lineno">2</span> <span class="n">simpleRouter</span> <span class="o">!</span> <span class="nc">Broadcast</span><span class="o">(</span><span class="nc">PoisonPill</span><span class="o">)</span>
<span class="lineno">3</span> <span class="n">simpleRouter</span> <span class="o">!</span> <span class="nc">Message</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="nc">Hello</span><span class="o">?</span> <span class="nc">You</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="o">;</span><span class="n">re</span> <span class="n">looking</span> <span class="n">a</span> <span class="n">little</span> <span class="n">green</span> <span class="n">around</span> <span class="n">the</span> <span class="n">gills</span><span class="o">&amp;</span><span class="n">hellip</span><span class="o">;&amp;</span><span class="n">rdquo</span><span class="o">;)</span> <span class="c1">// never gets read&lt;/p&gt;</span>
<span class="lineno">4</span> 
<span class="lineno">5</span> <span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span></code></pre></div></p>

<p>Great! Our Actors are now getting a correct command to shutdown, and allowing the Router above them to shut down gracefully too. We have timed this messaging to allow our full workload to complete before the shutdown, as well.</p>

<p>But&hellip; there&rsquo;s one more problem. If we look at our last block of code and run it, you might notice that the program <em>does not shut down</em>. This is because the <code>ActorSystem</code> remains running, and will not automatically shut itself down. We must instruct it to do so, but now we are back to our original problem – timing.</p>

<p>The best way that I have found to handle this problem is to take advantage of Akka&rsquo;s <a href="http://doc.akka.io/docs/akka/2.0.5/scala/actors.html#Lifecycle_Monitoring_aka_DeathWatch">Lifecycle Monitoring</a>, which allows us to create an actor who listens for notices that Actors have terminated. We need merely notify Akka that we&rsquo;d like to hear about Terminations of a particular actor, and begin listening for those notices.</p>

<p>Since Akka will automatically shut down a Router when all of its routees have terminated, we should (rightly) expect a &ldquo;Router Terminated&rdquo; event soon after broadcasting a <code>PoisonPill</code> to our routees.</p>

<p>Here&rsquo;s a rough sketch of an &ldquo;Overwatch&rdquo; actor, who asks for Akka to watch two other actors (One our router, the other a simple actor we won&rsquo;t shutdown for), and when it sees the Router terminate, shuts down the <code>ActorSystem</code>:</p>

<p><div class="highlight"><pre><code class="language-scala" data-lang="scala"><span class="lineno"> 1</span> <span class="k">class</span> <span class="nc">SystemKillingRouterOverwatch</span> <span class="k">extends</span> <span class="nc">Actor</span> <span class="o">{</span>
<span class="lineno"> 2</span>   <span class="k">val</span> <span class="n">log</span> <span class="k">=</span> <span class="nc">Logging</span><span class="o">(</span><span class="n">context</span><span class="o">.</span><span class="n">system</span><span class="o">,</span> <span class="k">this</span><span class="o">)&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
<span class="lineno"> 3</span> 
<span class="lineno"> 4</span> <span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">val</span> <span class="n">simpleRouter</span> <span class="k">=</span> <span class="n">context</span><span class="o">.</span><span class="n">actorOf</span><span class="o">(</span><span class="nc">Props</span><span class="o">[</span><span class="kt">SimpleActor</span><span class="o">].</span><span class="n">withRouter</span><span class="o">(</span><span class="nc">FromConfig</span><span class="o">()),</span>
<span class="lineno"> 5</span>                                      <span class="n">name</span> <span class="k">=</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">simpleRoutedActor</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;)&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
<span class="lineno"> 6</span> 
<span class="lineno"> 7</span> <span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">val</span> <span class="n">simpleActor</span> <span class="k">=</span> <span class="n">context</span><span class="o">.</span><span class="n">actorOf</span><span class="o">(</span><span class="nc">Props</span><span class="o">[</span><span class="kt">SimpleActor</span><span class="o">],</span> <span class="n">name</span> <span class="k">=</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">simpleActor</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;)&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
<span class="lineno"> 8</span> 
<span class="lineno"> 9</span> <span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="c1">// Setup our other two actors, so we supervise</span>
<span class="lineno">10</span>   <span class="n">context</span><span class="o">.</span><span class="n">watch</span><span class="o">(</span><span class="n">simpleRouter</span><span class="o">)</span>
<span class="lineno">11</span>   <span class="n">context</span><span class="o">.</span><span class="n">watch</span><span class="o">(</span><span class="n">simpleActor</span><span class="o">)&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
<span class="lineno">12</span> 
<span class="lineno">13</span> <span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">def</span> <span class="n">receive</span> <span class="k">=</span> <span class="o">{</span>
<span class="lineno">14</span>     <span class="k">case</span> <span class="nc">Terminated</span><span class="o">(</span><span class="n">corpse</span><span class="o">)</span> <span class="k">=&gt;</span>
<span class="lineno">15</span>       <span class="k">if</span> <span class="o">(</span><span class="n">corpse</span> <span class="o">==</span> <span class="n">simpleRouter</span><span class="o">)</span> <span class="o">{</span>
<span class="lineno">16</span>         <span class="n">log</span><span class="o">.</span><span class="n">warning</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="nc">Received</span> <span class="n">termination</span> <span class="n">notification</span> <span class="k">for</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="o">;&amp;</span><span class="n">rdquo</span><span class="o">;</span> <span class="o">+</span> <span class="n">corpse</span> <span class="o">+</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;&amp;</span><span class="n">rsquo</span><span class="o">;,&amp;</span><span class="n">rdquo</span><span class="o">;</span> <span class="o">+</span>
<span class="lineno">17</span>           <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">is</span> <span class="n">in</span> <span class="n">our</span> <span class="n">watch</span> <span class="n">list</span><span class="o">.</span> <span class="nc">Terminating</span> <span class="nc">ActorSystem</span><span class="o">.&amp;</span><span class="n">rdquo</span><span class="o">;)</span>
<span class="lineno">18</span>         <span class="nc">RoutedPoisonerWithShutdown</span><span class="o">.</span><span class="n">system</span><span class="o">.</span><span class="n">shutdown</span><span class="o">()</span>
<span class="lineno">19</span>       <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
<span class="lineno">20</span>         <span class="n">log</span><span class="o">.</span><span class="n">info</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="nc">Received</span> <span class="n">termination</span> <span class="n">notification</span> <span class="k">for</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="o">;&amp;</span><span class="n">rdquo</span><span class="o">;</span> <span class="o">+</span> <span class="n">corpse</span> <span class="o">+</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;&amp;</span><span class="n">rsquo</span><span class="o">;,&amp;</span><span class="n">rdquo</span><span class="o">;</span> <span class="o">+</span>
<span class="lineno">21</span>           <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">which</span> <span class="n">is</span> <span class="n">not</span> <span class="n">in</span> <span class="n">our</span> <span class="n">deathwatch</span> <span class="n">list</span><span class="o">.&amp;</span><span class="n">rdquo</span><span class="o">;.</span><span class="n">format</span><span class="o">(</span><span class="n">corpse</span><span class="o">))</span>
<span class="lineno">22</span>       <span class="o">}</span>
<span class="lineno">23</span>   <span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
<span class="lineno">24</span> 
<span class="lineno">25</span> <span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span></code></pre></div></p>

<p>During the startup of the Actor , we setup our other two actors (automatically making us their supervisor) and ask for Akka to <code>watch()</code> them. In the case that we see a <code>Terminated</code> message, which will contain an <code>ActorRef</code>, we compare the <code>corpse</code>&rsquo;s body; if it is the Router, we shutdown the <code>ActorSystem</code>. If not, we can keep on going.</p>

<p>Within the <code>SystemKillingRouterOverwatch</code>, below <code>receive()</code>, we&rsquo;ve also added code to run through the test routines, which are just a tweak of what we&rsquo;ve been building already, including poisoning an extra Actor to test termination:</p>

<p><div class="highlight"><pre><code class="language-scala" data-lang="scala"><span class="lineno"> 1</span> <span class="k">def</span> <span class="n">receive</span> <span class="k">=</span> <span class="c1">// &amp;hellip;&lt;/p&gt;</span>
<span class="lineno"> 2</span> 
<span class="lineno"> 3</span> <span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">simpleRouter</span> <span class="o">!</span> <span class="nc">Broadcast</span><span class="o">(</span><span class="nc">Message</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">I</span> <span class="n">will</span> <span class="n">not</span> <span class="n">buy</span> <span class="k">this</span> <span class="n">record</span><span class="o">,</span> <span class="n">it</span> <span class="n">is</span> <span class="n">scratched</span><span class="o">!&amp;</span><span class="n">rdquo</span><span class="o">;))&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
<span class="lineno"> 4</span> 
<span class="lineno"> 5</span> <span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">simpleActor</span> <span class="o">!</span> <span class="nc">Message</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="nc">If</span> <span class="n">there</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="o">;</span><span class="n">s</span> <span class="n">any</span> <span class="n">more</span> <span class="n">stock</span> <span class="n">film</span> <span class="n">of</span> <span class="n">women</span> <span class="n">applauding</span><span class="o">,</span> <span class="n">I</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="o">;</span><span class="n">ll</span> <span class="n">clear</span> <span class="n">the</span> <span class="n">court</span><span class="o">.&amp;</span><span class="n">rdquo</span><span class="o">;)&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
<span class="lineno"> 6</span> 
<span class="lineno"> 7</span> <span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">simpleActor</span> <span class="o">!</span> <span class="nc">PoisonPill</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
<span class="lineno"> 8</span> 
<span class="lineno"> 9</span> <span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">for</span> <span class="o">(</span><span class="n">n</span> <span class="o">&amp;</span><span class="n">lt</span><span class="o">;-</span> <span class="mi">1</span> <span class="n">until</span> <span class="mi">10</span><span class="o">)</span> <span class="n">simpleRouter</span> <span class="o">!</span> <span class="nc">Message</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="nc">Hello</span><span class="o">,</span> <span class="nc">Akka</span> <span class="o">#%</span><span class="n">d</span><span class="o">!&amp;</span><span class="n">rdquo</span><span class="o">;.</span><span class="n">format</span><span class="o">(</span><span class="n">n</span><span class="o">))</span>
<span class="lineno">10</span> <span class="n">simpleRouter</span> <span class="o">!</span> <span class="nc">Broadcast</span><span class="o">(</span><span class="nc">PoisonPill</span><span class="o">)</span>
<span class="lineno">11</span> <span class="n">simpleRouter</span> <span class="o">!</span> <span class="nc">Message</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="nc">Hello</span><span class="o">?</span> <span class="nc">You</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="o">;</span><span class="n">re</span> <span class="n">looking</span> <span class="n">a</span> <span class="n">little</span> <span class="n">green</span> <span class="n">around</span> <span class="n">the</span> <span class="n">gills</span><span class="o">&amp;</span><span class="n">hellip</span><span class="o">;&amp;</span><span class="n">rdquo</span><span class="o">;)</span> <span class="c1">// never gets read</span>
<span class="lineno">12</span> <span class="o">}</span></code></pre></div></p>

<p>The body of our <code>main</code> method is now just a startup of our <code>ActorSystem</code> and the overwatch actor
<div class="highlight"><pre><code class="language-scala" data-lang="scala"><span class="lineno">1</span> <span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
<span class="lineno">2</span> 
<span class="lineno">3</span> <span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">object</span> <span class="nc">RoutedPoisonerWithShutdown</span> <span class="k">extends</span> <span class="nc">App</span> <span class="o">{</span>
<span class="lineno">4</span>   <span class="k">val</span> <span class="n">system</span> <span class="k">=</span> <span class="nc">ActorSystem</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="nc">SimpleSystem</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;)</span>
<span class="lineno">5</span>   <span class="k">val</span> <span class="n">overwatch</span> <span class="k">=</span> <span class="n">system</span><span class="o">.</span><span class="n">actorOf</span><span class="o">(</span><span class="nc">Props</span><span class="o">[</span><span class="kt">SystemKillingRouterOverwatch</span><span class="o">],</span> <span class="n">name</span><span class="o">=&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">overwatch</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;)&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
<span class="lineno">6</span> 
<span class="lineno">7</span> <span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span></code></pre></div></p>

<p>Running this code, we&rsquo;ll see a notification that <code>simpleActor</code> terminated and we didn&rsquo;t care, followed by <code>simpleRoutedActor</code> terminating – to which we respond by shutting down the <code>ActorSystem</code>!</p>

<p>That&rsquo;s it; with a little basic knowledge we can now not only distribute our Akka workloads, but shut the system down cleanly when we are done with it!</p>

<p><em>If you&rsquo;re interested in taking a closer look, I threw up a <a href="http://github.com/bwmcadams/akka-router-shutdown-demo">repository in Github</a> with all of the code from this post</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Immutability and Clever Variable Usage in the Land of Blocks and Branches]]></title>
    <link href="http://blog.evilmonkeylabs.com/2011/08/05/ScalaPythonJavaCaptureBlockResult/"/>
    <updated>2011-08-05T00:00:00-07:00</updated>
    <id>http://blog.evilmonkeylabs.com/2011/08/05/ScalaPythonJavaCaptureBlockResult</id>
    <content type="html"><![CDATA[<p>Last night, I found myself unconciously refactoring some Scala code (I don&rsquo;t recall if it was something I wrote or someone else did at this point). As I looked at what I was doing I realized that many Scala developers don&rsquo;t seem entirely aware of one of my favorite features.  What I&rsquo;m talking about is effectively capturing values from multibranch block statements in Scala.  Used correctly they can greatly decruft complicated code as well as helping us use mutability in places we might not expect an easy way to do so.</p>

<p>In typical C-like languages (such as C, C++, and Java) we are restricted in our syntax should we wish to capture a value when running many branching blocks such as if-else statements, switch statements and even for/foreach constructs. When we find ourselves wanting to set the value of a variable within each possible condition or iteration, we need to declare a mutable variable before the block.  We then mutate this variable within each condition or iteration.  Take this example from Java:</p>

<p><div class="highlight"><pre><code class="language-java" data-lang="java"><span class="kt">boolean</span> <span class="n">valid</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">String</span> <span class="n">status</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
<span class="k">if</span> <span class="o">(</span><span class="n">valid</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">status</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">VALIDATED</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;;</span>
<span class="o">}</span>
<span class="k">else</span> <span class="o">{</span>
    <span class="n">status</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">INVALID</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;;</span>
<span class="o">}</span></code></pre></div></p>

<!--more-->


<p>Not only have we had to declare a mutable value, but adding insult to injury the typical usage pattern includes declaring it as <code>null</code> (FACT: Everytime you explicitly use null, someone drowns a basket of adorable, whimpering puppies. Even if your language paradigm practically requires it.).  Within our if/else block we have established a new value for <code>status</code> based on the value of <code>valid</code>. Granted, this is a somewhat weak example of my point, as you could just as easily have expressed this in a more concise ternary statement:</p>

<p><div class="highlight"><pre><code class="language-java" data-lang="java"><span class="n">String</span> <span class="n">status</span> <span class="o">=</span> <span class="n">valid</span> <span class="o">?</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">VALIDATED</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;</span> <span class="o">:</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">INVALID</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;;</span></code></pre></div></p>

<p>This simplification breaks down quickly once our block becomes more complex.  Even the addition of a single <code>elseif</code> would eliminate the usefulness of the ternary syntax:</p>

<p><div class="highlight"><pre><code class="language-java" data-lang="java"><span class="c1">// In this case, valid is now an int that can hold several states</span>
<span class="kt">int</span> <span class="n">valid</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;/&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">valid</span> <span class="o">=</span> <span class="n">SomeMethodCallThatReturnsValid</span><span class="o">()</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">String</span> <span class="n">status</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">if</span> <span class="o">(</span><span class="n">valid</span> <span class="o">==</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">status</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">VALIDATED</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;;</span>
<span class="o">}</span>
<span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">valid</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">status</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">INVALID</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;;</span> <span class="c1">// A simple not-valid indicator</span>
<span class="o">}</span>
<span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">valid</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">status</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">UNINITIALIZED_ERROR</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;;</span>
<span class="o">}</span>
<span class="k">else</span> <span class="o">{</span>
    <span class="n">status</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">UNKNOWN_ERROR</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;;</span>
<span class="o">}</span></code></pre></div></p>

<p>We&rsquo;ve already bounced ourselves back to the land of <code>null</code> and forced mutability (can you hear those poor, helpless puppies trying to learn how to swim?). We will encounter similar (or potentially worse) limitations in the case of a for/foreach construct.</p>

<p><div class="highlight"><pre><code class="language-java" data-lang="java"><span class="n">List</span><span class="o">&lt;</span><span class="n">User</span><span class="o">&gt;</span> <span class="n">users</span> <span class="o">=</span> <span class="k">new</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">User</span><span class="o">&gt;();&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">for</span> <span class="o">(</span><span class="n">DBRow</span> <span class="n">row</span> <span class="o">:</span> <span class="n">databaseQuery</span><span class="o">(</span><span class="n">queryArgs</span><span class="o">))</span> <span class="o">{</span>
    <span class="n">users</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nf">User</span><span class="o">(</span><span class="n">row</span><span class="o">.</span><span class="na">get</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">username</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;),</span> <span class="n">row</span><span class="o">.</span><span class="na">get</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">first_name</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;),</span> <span class="n">row</span><span class="o">.</span><span class="na">get</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">last_name</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;));</span>
<span class="o">}</span></code></pre></div></p>

<p>Admittedly, this last block isn&rsquo;t <em>that</em> bad, but it still irks me to <strong>have</strong> to declare a mutable list to facilitate it.  We probably could work around with a builder pattern but <strong>(a)</strong> as far as I know Java lacks a builtin List Builder and <strong>(b)</strong> We&rsquo;d still probably be &ldquo;building&rdquo; a mutable list.</p>

<p>These paradigms obviously don&rsquo;t restrict or limit everyone, but those of us who try to pay attention to immutability and the like start to grind our teeth awfully fast when encountering these patterns.  There has to be a better way, right?  How do other languages handle these constructs and related problems?</p>

<h2>The Pythonic Way</h2>

<p>For those that know Python — a language that I have long loved, and using Scala has only reinforced that as I learn &amp; understand more of the FP goodness in Python — there are some nice tricks to alleviate the previously demonstrated pain (and save those puppies).  Unfortunately, some of these tricks also stink a bit too much like syntactic magic; I tend to think at least one of them violates Python&rsquo;s &ldquo;explicit over implicit&rdquo; rules too.</p>

<p><div class="highlight"><pre><code class="language-python" data-lang="python"><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">Again</span><span class="p">,</span> <span class="n">valid</span> <span class="ow">is</span> <span class="n">now</span> <span class="n">an</span> <span class="nb">int</span> <span class="n">that</span> <span class="n">can</span> <span class="n">hold</span> <span class="n">several</span> <span class="n">states</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">valid</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;/&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">valid</span> <span class="o">=</span> <span class="n">some_method_to_set_valid</span><span class="p">()</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">if</span> <span class="n">valid</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
    <span class="n">status</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">VALIDATED</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span>
<span class="k">elif</span> <span class="n">valid</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
    <span class="n">status</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">INVALID</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span>
<span class="k">elif</span> <span class="n">valid</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">:</span>
    <span class="n">status</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">UNINITIALIZED_ERROR</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span>
<span class="k">else</span><span class="p">:</span>
    <span class="n">status</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">UNKNOWN_ERROR</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span></code></pre></div></p>

<p>Here&rsquo;s that magic I&rsquo;m talking about — despite us not explicitly declaring/initializing it, Python will instantiate a variable <code>status</code> at the <em>outer</em> scope (that is to say, outside of our if-else block).  This is incredibly useful for cutting down line noise related to unecessary declaration of variables; unfortunately it is also a common confusion point for beginning Pythonistas.</p>

<pre><code>*"Where the hell did this `status` variable come from? It wasn't ever declared in an outer scope!"*
</code></pre>

<p>While we&rsquo;ve avoided initializing <code>status</code> to null, we still encounter the pesky mutability issue.  We ultimately ended up with a variable <code>status</code> which can be mutated later.  This isn&rsquo;t ideal, but as far as I know Python has no way to enable/enforce immutable state.</p>

<p>Python also can take us closer to an ideal state with the for/foreach constructs.  My big gripe with the previous Java for loop code was the need to declare a mutable <code>List</code> and incrementally add to it.  Python has a cure for what ails us here, in the form of generators — a feature which, as you&rsquo;ll see, I&rsquo;d give my left pinkie (or maybe just the last millimeter of my left pinkie nail) to have in Scala as well.</p>

<p>Here&rsquo;s how a smart Pythonista might express our database processing loop in a way that limits the declaration of mutable variables:</p>

<p><div class="highlight"><pre><code class="language-python" data-lang="python"><span class="k">def</span> <span class="nf">process_dbusers</span><span class="p">(</span><span class="n">dbResults</span><span class="p">):</span>
    <span class="k">for</span> <span class="n">entry</span> <span class="ow">in</span> <span class="n">dbResults</span><span class="p">:</span>
        <span class="k">yield</span> <span class="n">User</span><span class="p">(</span><span class="n">row</span><span class="o">.</span><span class="n">field</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">username</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;),</span> <span class="n">row</span><span class="o">.</span><span class="n">field</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">first_name</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;),</span>
                   <span class="n">row</span><span class="o">.</span><span class="n">field</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">last_name</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;))</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">users</span> <span class="o">=</span> <span class="n">process_dbusers</span><span class="p">(</span><span class="n">db_query</span><span class="p">(</span><span class="n">query_args</span><span class="p">))</span></code></pre></div></p>

<p>With this code, we&rsquo;ve already quickly wandered into the land of &ldquo;Things Java Can&rsquo;t Even Pretend To Do&rdquo; here (which I think highlights my amusement at people arguing Java&rsquo;s power over Python.  It&rsquo;s all relative when you know the right syntax &hellip; ).  To best handle this expression we&rsquo;ve constructed a higher- order function <code>process_dbusers</code>, which takes in a database results iterator, returning a list-like construct with the results.  I want to emphasize the term <em>list-like</em> here because what we got is not, in fact, a list (rather it is &ldquo;Iterable&rdquo;).  A quick peek at the REPL (if you don&rsquo;t already have <a href="http://ipython.org">IPython</a> you are really missing out) evinces this:</p>

<p><div class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">users</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;&lt;</span><span class="n">generator</span> <span class="nb">object</span> <span class="n">process_db</span> <span class="n">at</span> <span class="mh">0x10ca93690</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="nb">type</span><span class="p">(</span><span class="n">users</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;&lt;</span><span class="nb">type</span> <span class="s">&#39;generator&#39;</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span></code></pre></div></p>

<p>Python supports a special type of expression (which again, I&rsquo;d love to have in Scala and have been playing with ways to support) called a <em>generator</em>.  In addition to being immutable, a generator is also lazy; it does not evaluate the entire list at creation, instead evaluating each member as it is first read (notably though, Python generators do not memoize and cannot be iterated repeatedly).  Note that Python&rsquo;s <code>yield</code> keyword differs from Scala&rsquo;s; it may be easiest to think of it as a &ldquo;super-return&rdquo; or &ldquo;return on crack&rdquo; in that it actually suspends execution (via coroutines) after returning <em>each</em> value.</p>

<p>The &lsquo;generator&rsquo; produced is actually an iterable value; requesting the &lsquo;next&rsquo; item resumes execution, runs the next iteration of the internal for loop again, yields the return value and suspends again.  Not only is this generator value immutable, but it should be significantly more efficient in many cases; if we don&rsquo;t need to store each <code>User</code> but process them as we read them, we should see a lot better resource usage.</p>

<p>There is one other way to express the previous statement without needing a nested function set or the &lsquo;yield&rsquo; keyword, using &ldquo;generator expressions&rdquo;.  The downside to the <code>yield</code> based generators is that they must be wrapped inside another function, making them messy to inline with other code. With Generator Expressions we can get the same behavior in a compact, inline one-liner.  A Generator Expression is syntactically identical to a Python <a href="http://docs.python.org/tutorial/datastructures.html#list-comprehensions">List Comprehension</a> with one key difference:  You must enclose the expression in parentheses ( <code>(</code> and <code>)</code> ) instead of square brackets ( <code>[</code> and <code>]</code>).  While a List Comprehension will return a list, enclosing that same statement in parentheses instead of brackets will produce a generator. This Generator Expression works as if we had written a multiline <code>for</code> construct with <code>yield</code>:</p>

<p><div class="highlight"><pre><code class="language-python" data-lang="python"><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">Define</span> <span class="n">a</span> <span class="nb">tuple</span> <span class="n">of</span> <span class="n">test</span> <span class="n">values</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">items</span> <span class="o">=</span> <span class="p">(</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">Foo</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;,</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">bar</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;,</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">Baz</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;,</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">spam</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;,</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">eggs</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;,</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">apples</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;,</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">oranges</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">Use</span> <span class="n">a</span> <span class="n">List</span> <span class="n">Comprehension</span><span class="p">,</span> <span class="n">returns</span> <span class="n">a</span> <span class="nb">list</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">itemList</span> <span class="o">=</span> <span class="p">[</span><span class="n">item</span> <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">items</span><span class="p">]</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="p">[</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">Foo</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;,</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">bar</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;,</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">Baz</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;,</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">spam</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;,</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">eggs</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;,</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">apples</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;,</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">oranges</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;]</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">Use</span> <span class="n">a</span> <span class="n">Generator</span> <span class="n">Expression</span> <span class="n">which</span> <span class="n">returns</span> <span class="n">a</span> <span class="n">generator</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">itemGen</span>  <span class="o">=</span> <span class="p">(</span><span class="n">item</span> <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">items</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;&lt;</span><span class="n">generator</span> <span class="nb">object</span> <span class="o">&lt;</span><span class="n">genexpr</span><span class="o">&gt;</span> <span class="n">at</span> <span class="mh">0x10cafa050</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">You</span> <span class="n">can</span> <span class="n">also</span> <span class="nb">filter</span> <span class="n">these</span> <span class="n">expressions</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">Return</span> <span class="n">a</span> <span class="nb">list</span> <span class="n">which</span> <span class="n">filters</span> <span class="n">to</span> <span class="k">return</span> <span class="n">only</span> <span class="n">items</span> <span class="n">which</span> <span class="n">are</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">food</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">foodList</span> <span class="o">=</span> <span class="p">[</span><span class="n">item</span> <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">items</span> <span class="k">if</span> <span class="n">item</span> <span class="ow">in</span> <span class="p">(</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">spam</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;,</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">eggs</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;,</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">apples</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;,</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">oranges</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;)]</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="p">[</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">spam</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;,</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">eggs</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;,</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">apples</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;,</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">oranges</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;]</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">The</span> <span class="n">same</span> <span class="nb">filter</span><span class="p">,</span> <span class="n">but</span> <span class="k">as</span> <span class="n">a</span> <span class="n">generator</span> <span class="n">expression</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">foodGen</span> <span class="o">=</span> <span class="p">(</span><span class="n">item</span> <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">items</span> <span class="k">if</span> <span class="n">item</span> <span class="ow">in</span> <span class="p">(</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">spam</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;,</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">eggs</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;,</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">apples</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;,</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">oranges</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;))</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;&lt;</span><span class="n">generator</span> <span class="nb">object</span> <span class="o">&lt;</span><span class="n">genexpr</span><span class="o">&gt;</span> <span class="n">at</span> <span class="mh">0x10cafa140</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">Generators</span> <span class="n">are</span> <span class="n">iterable</span> <span class="o">&amp;</span><span class="n">hellip</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">foodGen</span><span class="o">.</span><span class="n">next</span><span class="p">()</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">spam</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">foodGen</span><span class="o">.</span><span class="n">next</span><span class="p">()</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">eggs</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span></code></pre></div></p>

<p>We&rsquo;ve certainly, on the Python side, gotten closer to a world which can exist without unecessary variable initialization and sane immutability&hellip; but aren&rsquo;t entirely where I&rsquo;d like to be.  To understand things better let&rsquo;s look, finally, at what Scala lets us do.</p>

<h2>The Scala Way</h2>

<p>A rough take on the code I was optimizing last night can be used to highlight the power of Scala&rsquo;s way of solving the kinds of problems we are discussing.  Here&rsquo;s a Scala version of our if-elseif-else construct from Java:</p>

<p><div class="highlight"><pre><code class="language-scala" data-lang="scala"><span class="k">val</span> <span class="n">valid</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="n">someMethodCallThatSetsValidity</span><span class="o">()&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">var</span> <span class="n">status</span><span class="k">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="kc">null</span> <span class="c1">// ack, mutable &lt;em&gt;and&lt;/em&gt; null inited - A scala programmer&amp;rsquo;s worst nightmare&lt;/p&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">if</span> <span class="o">(</span><span class="n">valid</span> <span class="o">==</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
  <span class="n">status</span> <span class="k">=</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="nc">VALIDATED</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;</span>
<span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">valid</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
  <span class="n">status</span> <span class="k">=</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="nc">INVALID</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;</span>
<span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">valid</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
  <span class="n">status</span> <span class="k">=</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="nc">UNINITIALIZED_ERROR</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;</span>
<span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
  <span class="n">status</span> <span class="k">=</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="nc">UNKNOWN_ERROR</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;</span>
<span class="o">}</span></code></pre></div></p>

<p>There are lots of things that are egregious here from the eyes of an experienced Scala programmer, but it is also pretty close to the style I would expect from a fairly new Scala programmer.  There is of course a <em>much</em> better way to do this in Scala without any magic tricks.</p>

<p>One of the cool little edge behaviors of Scala&rsquo;s syntax is the ability to capture the return value of most block statements — even if-else statements.  This lends itself to quickly shortening our code <em>and</em> enforcing immutability on the final value of status.</p>

<p><div class="highlight"><pre><code class="language-scala" data-lang="scala"><span class="k">val</span> <span class="n">valid</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="n">someMethodCallThatSetsValidity</span><span class="o">()&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">val</span> <span class="n">status</span> <span class="k">=</span> <span class="k">if</span> <span class="o">(</span><span class="n">valid</span> <span class="o">==</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
  <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="nc">VALIDATED</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;</span> <span class="c1">// returns &amp;ldquo;VALIDATED&amp;rdquo;</span>
<span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">valid</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
  <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="nc">INVALID</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;</span>  <span class="c1">// returns &amp;ldquo;INVALID&amp;rdquo;</span>
<span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">valid</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
  <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="nc">UNINITIALIZED_ERROR</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;</span> <span class="c1">// returns &amp;ldquo;UNINITIALIZED_ERROR&amp;rdquo;</span>
<span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
  <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="nc">UNKNOWN_ERROR</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;</span> <span class="c1">// returns &amp;ldquo;UNKNOWN_ERROR&amp;rdquo;</span>
<span class="o">}</span></code></pre></div></p>

<p>Much better! The way that Scala evaluates this code, you can think of each branch of the block (the body of each &ldquo;if&rdquo;, &ldquo;else if&rdquo; and &ldquo;else&rdquo; statements) as an anonymous function.  Because it is evaluated this way, Scala allows us to return values, which can be captured from the entire block (The use of the explicit <code>return</code> keyword is typically considered bad form in Scala which is why it is omitted here).  If <code>valid</code> has a value of <code>1</code>, this block will return <code>"VALIDATED"</code>.</p>

<p>The type of <code>safe</code> in this code will be inferred to <code>String</code>, because each branch returns a <code>String</code>. Although in Scala it is usually recommended to let type inference do its work wherever possible and avoid explicit type annotations, variables capturing values from a block like this might be a good exception to the rule.</p>

<p>The argument that I make is that if the type inference system finds multiple <em>differing</em> types in each branch, it will search backwards on the type hierarchies for the closest &ldquo;ancestor&rdquo; type of each type.  This can quickly lead to the type of <code>status</code> being something far too generic (or even unexpected in the case of a bug).</p>

<p>We can see this quickly by changing the return of our <code>else</code> branch to a boolean:</p>

<p><div class="highlight"><pre><code class="language-scala" data-lang="scala"><span class="k">val</span> <span class="n">status</span> <span class="k">=</span> <span class="k">if</span> <span class="o">(</span><span class="n">valid</span> <span class="o">==</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
  <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="nc">VALIDATED</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;</span>
<span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">valid</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
  <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="nc">INVALID</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;</span>
<span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">valid</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
  <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="nc">UNINITIALIZED_ERROR</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;</span>
<span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
  <span class="kc">false</span>
<span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;/&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="nc">Turn</span> <span class="n">on</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="nc">Power</span> <span class="nc">Mode</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;</span> <span class="n">in</span> <span class="n">the</span> <span class="n">repl</span> <span class="n">to</span> <span class="n">dump</span> <span class="n">the</span> <span class="k">type</span> <span class="o">(</span><span class="kt">:power</span><span class="o">)</span>
<span class="kt">scala&gt;</span> <span class="kt">:</span><span class="k">type</span> <span class="kt">status</span>
<span class="nc">Any</span>
<span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span></code></pre></div></p>

<p>This is not good, and often will result in a bug.  If you were expecting <code>String</code>, you will be sorely disappointed. The easiest fix to this is to explicitly annotate an expected return type, which forces the compiler to help you enforce expectations:</p>

<p><div class="highlight"><pre><code class="language-scala" data-lang="scala"><span class="k">val</span> <span class="n">status</span><span class="k">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="k">if</span> <span class="o">(</span><span class="n">valid</span> <span class="o">==</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
  <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="nc">VALIDATED</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;</span>
<span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">valid</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
  <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="nc">INVALID</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;</span>
<span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">valid</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
  <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="nc">UNINITIALIZED_ERROR</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;</span>
<span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
  <span class="kc">false</span>
<span class="o">}</span>
<span class="cm">/* Fails to compile!</span>
<span class="cm">&lt;console&gt;:29: error: type mismatch;</span>
<span class="cm"> found   : Boolean(false)</span>
<span class="cm"> required: String</span>
<span class="cm">         false&lt;/p&gt;</span>

<span class="cm">&lt;p&gt;*/</span></code></pre></div></p>

<p>We can also easily simplify this whole block into a pattern match, which will read more clearly in Scala.  Fortuitously, Scala also lets us capture the return values from <code>match</code> blocks, following the same rules (including the Type Annotation concerns) as in if-else.</p>

<p><div class="highlight"><pre><code class="language-scala" data-lang="scala"><span class="k">import</span> <span class="nn">annotation.switch</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;//</span> <span class="nc">Even</span> <span class="n">better</span><span class="o">,</span> <span class="n">cut</span> <span class="n">out</span> <span class="n">one</span> <span class="n">more</span> <span class="n">variable</span> <span class="n">storage</span> <span class="n">by</span> <span class="n">calling</span> <span class="n">our</span> <span class="n">valid</span> <span class="n">check</span> <span class="n">inline</span>
<span class="k">val</span> <span class="n">status</span><span class="k">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="o">(</span><span class="n">someMethodCallThatSetsValidity</span><span class="o">()</span><span class="k">:</span> <span class="kt">@switch</span><span class="o">)</span> <span class="k">match</span> <span class="o">{</span>
    <span class="k">case</span> <span class="mi">1</span>  <span class="k">=&gt;</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="nc">VALIDATED</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;</span>
    <span class="k">case</span> <span class="mi">0</span>  <span class="k">=&gt;</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="nc">INVALID</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;</span>
    <span class="k">case</span> <span class="o">-</span><span class="mi">1</span> <span class="k">=&gt;</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="nc">UNINITIALIZED_ERROR</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;</span>
    <span class="k">case</span> <span class="n">default</span> <span class="k">=&gt;</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="nc">UNKNOWN_ERROR</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;</span>
<span class="o">}</span></code></pre></div></p>

<p><em>The use of the @switch annotation is a trick I learned from <a href="http://suereth.blogspot.com/">Josh Suereth&rsquo;s</a> absolutely superb book <a href="http://www.manning.com/suereth/">Scala in Depth</a>; when used with certain matches (they typically need to match numeric values) they ensure the compiler generates a much more efficient JVM bytecode for the match execution/evaluation.</em></p>

<p>I&rsquo;ll leave the evaluation of that last as an exercise for the reader.  Fundamentally it is a simple restatement of our previous if-else blocks and should make sense.</p>

<p>Now that we&rsquo;ve looked at branching block statements and value capture in Scala, we&rsquo;re left with one last item — for constructs (We aren&rsquo;t going to discuss monad operators such as <code>foreach</code>, <code>map</code>, <code>flatmap</code>, etc here).</p>

<p><div class="highlight"><pre><code class="language-scala" data-lang="scala"><span class="k">for</span> <span class="o">(</span><span class="n">x</span> <span class="o">&amp;</span><span class="n">lt</span><span class="o">;-</span> <span class="mi">1</span> <span class="n">until</span> <span class="mi">42</span><span class="o">)</span> <span class="n">x</span>
<span class="c1">// Loops 42 times, but returns / prints nothing</span></code></pre></div></p>

<p>Unlike other the previously examined branching blocks (if-else and matches), Scala&rsquo;s <code>for</code> loops do <em>not</em> implicitly return the last value.  I would make an educated guess that this is because most developers would not expect or require the default behavior of a <code>for</code> loop to generate return values.  I&rsquo;d also go so far as to posit that this is a very sane default.</p>

<p>Much like Python, to generate a return value from a <code>for</code> loop in Scala we must explicitly declare our intention to return a value. While (as I lamented previously) Scala lacks support for Python style generators, it does support a form of List Comprehensions which allow us to get the behavior we want.  For a Python developer, the rules for constructing these in Scala may get quickly confusing.  The first is that <code>return</code> is not a valid keyword at <em>all</em> inside of a Scala <code>for</code> statement (Incidentally, Python allows it as a &lsquo;valid&rsquo; keyword, but the function will always return the result of the first loop iteration and never progress).</p>

<p><div class="highlight"><pre><code class="language-scala" data-lang="scala"><span class="k">for</span> <span class="o">(</span><span class="n">x</span> <span class="k">&lt;-</span> <span class="mi">1</span> <span class="n">until</span> <span class="mi">42</span><span class="o">)</span> <span class="k">return</span> <span class="n">x</span>
<span class="cm">/* Fails to compile</span>
<span class="cm">&lt;console&gt;:29: error: return outside method definition</span>
<span class="cm">       for (x &amp;lt;- 1 until 42) return x</span>
<span class="cm">*/</span></code></pre></div></p>

<p>Instead, we need to use a special keyword, <code>yield</code>, to signify our intention to create a List Comprehension rather than a simple loop.  Like in Python, <code>yield</code> changes the behavior of a <code>for</code> loop.  However, the behavior of the <code>yield</code> keyword in Scala differs significantly from Python, as it does not invoke generator behavior.  The use of <code>yield</code> inside a Scala <code>for</code> loop will produce results along the lines of those of Python&rsquo;s square bracket enclosed List Comprehensions:</p>

<p><div class="highlight"><pre><code class="language-scala" data-lang="scala"><span class="k">for</span> <span class="o">(</span><span class="n">x</span> <span class="o">&amp;</span><span class="n">lt</span><span class="o">;-</span> <span class="mi">1</span> <span class="n">until</span> <span class="mi">42</span><span class="o">)</span> <span class="k">yield</span> <span class="n">x</span>
<span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">scala</span><span class="o">.</span><span class="n">collection</span><span class="o">.</span><span class="n">immutable</span><span class="o">.</span><span class="nc">IndexedSeq</span><span class="o">[</span><span class="kt">Int</span><span class="o">]</span> <span class="k">=</span> <span class="nc">Vector</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">6</span><span class="o">,</span> <span class="mi">7</span><span class="o">,</span> <span class="mi">8</span><span class="o">,</span> <span class="mi">9</span><span class="o">,</span> <span class="mi">10</span><span class="o">,</span> <span class="mi">11</span><span class="o">,</span> <span class="mi">12</span><span class="o">,</span> <span class="mi">13</span><span class="o">,</span> <span class="mi">14</span><span class="o">,</span> <span class="mi">15</span><span class="o">,</span> <span class="mi">16</span><span class="o">,</span> <span class="mi">17</span><span class="o">,</span> <span class="mi">18</span><span class="o">,</span> <span class="mi">19</span><span class="o">,</span> <span class="mi">20</span><span class="o">,</span> <span class="mi">21</span><span class="o">,</span> <span class="mi">22</span><span class="o">,</span> <span class="mi">23</span><span class="o">,</span> <span class="mi">24</span><span class="o">,</span> <span class="mi">25</span><span class="o">,</span> <span class="mi">26</span><span class="o">,</span> <span class="mi">27</span><span class="o">,</span> <span class="mi">28</span><span class="o">,</span> <span class="mi">29</span><span class="o">,</span> <span class="mi">30</span><span class="o">,</span> <span class="mi">31</span><span class="o">,</span> <span class="mi">32</span><span class="o">,</span> <span class="mi">33</span><span class="o">,</span> <span class="mi">34</span><span class="o">,</span> <span class="mi">35</span><span class="o">,</span> <span class="mi">36</span><span class="o">,</span> <span class="mi">37</span><span class="o">,</span> <span class="mi">38</span><span class="o">,</span> <span class="mi">39</span><span class="o">,</span> <span class="mi">40</span><span class="o">,</span> <span class="mi">41</span><span class="o">,</span> <span class="mi">42</span><span class="o">)</span>
<span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span></code></pre></div></p>

<p>The output of the <code>for</code> loop which uses <code>yield</code> will always be an <em>immutable</em> <code>Seq[_]</code>, letting us save that result for later usage much like we did with our Python generators and comprehensions.  And of course, Scala&rsquo;s <code>for</code> loops allow for filters just like Python&rsquo;s:</p>

<p><div class="highlight"><pre><code class="language-scala" data-lang="scala"><span class="k">val</span> <span class="n">items</span> <span class="k">=</span> <span class="nc">List</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">foo</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;,</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">bar</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;,</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">baz</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;,</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">spam</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;,</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">eggs</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;,</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">apples</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;,</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">oranges</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;)&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">val</span> <span class="n">itemList</span> <span class="k">=</span> <span class="k">for</span> <span class="o">(</span><span class="n">item</span> <span class="o">&amp;</span><span class="n">lt</span><span class="o">;-</span> <span class="n">items</span><span class="o">)</span> <span class="k">yield</span> <span class="n">item</span>
<span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">itemList</span><span class="k">:</span> <span class="kt">List</span><span class="o">[</span><span class="kt">java.lang.String</span><span class="o">]</span> <span class="k">=</span> <span class="nc">List</span><span class="o">(</span><span class="n">foo</span><span class="o">,</span> <span class="n">bar</span><span class="o">,</span> <span class="n">baz</span><span class="o">,</span> <span class="n">spam</span><span class="o">,</span> <span class="n">eggs</span><span class="o">,</span> <span class="n">apples</span><span class="o">,</span> <span class="n">oranges</span><span class="o">)</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">val</span> <span class="n">foodList</span> <span class="k">=</span>
    <span class="k">for</span> <span class="o">(</span><span class="n">item</span> <span class="o">&amp;</span><span class="n">lt</span><span class="o">;-</span> <span class="n">items</span> <span class="k">if</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">spam</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;</span> <span class="o">::</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">eggs</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;</span> <span class="o">::</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">apples</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;</span> <span class="o">::</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">oranges</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;</span> <span class="o">::</span> <span class="nc">Nil</span> <span class="n">contains</span> <span class="n">item</span><span class="o">)</span>
        <span class="k">yield</span> <span class="n">item</span>
<span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">foodList</span><span class="k">:</span> <span class="kt">List</span><span class="o">[</span><span class="kt">java.lang.String</span><span class="o">]</span> <span class="k">=</span> <span class="nc">List</span><span class="o">(</span><span class="n">spam</span><span class="o">,</span> <span class="n">eggs</span><span class="o">,</span> <span class="n">apples</span><span class="o">,</span> <span class="n">oranges</span><span class="o">)</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;//</span> <span class="nc">We</span> <span class="n">can</span> <span class="n">also</span> <span class="n">expand</span> <span class="n">that</span> <span class="k">for</span> <span class="n">comprehension</span> <span class="n">into</span> <span class="n">the</span> <span class="n">alternate</span> <span class="n">syntax</span> <span class="k">for</span> <span class="n">clarity</span>
<span class="k">val</span> <span class="n">expandedFoodList</span> <span class="k">=</span> <span class="k">for</span> <span class="o">{</span>
  <span class="n">item</span> <span class="o">&amp;</span><span class="n">lt</span><span class="o">;-</span> <span class="n">items</span>
  <span class="k">if</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">spam</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;</span> <span class="o">::</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">eggs</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;</span> <span class="o">::</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">apples</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;</span> <span class="o">::</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">oranges</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;</span> <span class="o">::</span> <span class="nc">Nil</span> <span class="n">contains</span> <span class="n">item</span>
<span class="o">}</span> <span class="k">yield</span> <span class="n">item</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;//</span> <span class="n">expandedFoodList</span><span class="k">:</span> <span class="kt">List</span><span class="o">[</span><span class="kt">java.lang.String</span><span class="o">]</span> <span class="k">=</span> <span class="nc">List</span><span class="o">(</span><span class="n">spam</span><span class="o">,</span> <span class="n">eggs</span><span class="o">,</span> <span class="n">apples</span><span class="o">,</span> <span class="n">oranges</span><span class="o">)&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span></code></pre></div></p>

<p>The intention here wasn&rsquo;t to &ldquo;bash&rdquo; on Java or even champion Python or Scala; rather, to highlight the ways that different syntactic features add power, flexiblity and (in the case of things like mutability) potential safety to our code.  Though I&rsquo;m accused of being a Scala fanboy, I want to clearly reiterate generators as something that I still think Python gets as a <em>major</em> edge over Scala.  I work in all three of the highlighted languages on a daily basis and though I probably enjoy Java the least, find gems and strengths in each tool as I switch between them (to be honest though, most of Java&rsquo;s gems these days exist in the JVM and the JDK libraries rather than the language).</p>

<p>It may easily be said that I am biased, but I consider the improved functionality highlighted in Python and Scala to be significantly more powerful (and yet less complex in many ways) than Java&rsquo;s approach.  Mutating variables, null initializations and general spaghetti code for the sake of expressing something that should be simpler to express are all things that lead to workplace violence and big bonus checks for employees of straight jacket manufacturers.</p>

<p>With our improved examples in Scala, we didn&rsquo;t need to create any mutable placeholder values, initialize anything to <code>null</code> <em>or</em> worry about ending up with a still mutable list to contend with.  What we got was a pure, unadulterated, cleanly constructed immutable <code>Seq</code>, just like grandmom used to bake! And it smells freaking <em>delicious</em>.</p>

<p>-b</p>
]]></content>
  </entry>
  
</feed>
