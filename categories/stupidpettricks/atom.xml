<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: stupidpettricks | Evil Monkey Labs]]></title>
  <link href="http://blog.evilmonkeylabs.com/categories/stupidpettricks/atom.xml" rel="self"/>
  <link href="http://blog.evilmonkeylabs.com/"/>
  <updated>2015-04-10T18:23:43-04:00</updated>
  <id>http://blog.evilmonkeylabs.com/</id>
  <author>
    <name><![CDATA[Brendan McAdams]]></name>
    <email><![CDATA[bwmcadams@evilmonkeylabs.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Forcing Scala Compiler 'Nothing' Checks]]></title>
    <link href="http://blog.evilmonkeylabs.com/2012/05/31/Forcing_Compiler_Nothing_checks/"/>
    <updated>2012-05-31T00:00:00-04:00</updated>
    <id>http://blog.evilmonkeylabs.com/2012/05/31/Forcing_Compiler_Nothing_checks</id>
    <content type="html"><![CDATA[<p>Since early in its history, Casbah has had a helper method called <code>getAs[T]</code>, where <code>T</code> is &ldquo;Some type you&rsquo;d like to fetch a particular field as&rdquo;. Because of type erasure on the JVM, working with a Mongo Document can be annoying &ndash; the representation in Scala is the equivalent of a <code>Map[String, Any]</code>. If we were to work with the <code>Map[String, Any]</code> in a standard mode, fetching a field <em>balance</em> which is a <code>Double</code> would require manual casting.</p>

<p><div class="highlight"><pre><code class="language-scala" data-lang="scala"><span class="k">val</span> <span class="n">doc</span><span class="k">:</span> <span class="kt">DBObject</span> <span class="o">=</span> <span class="nc">MongoDBObject</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">foo</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;</span> <span class="o">-&gt;</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">bar</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;,</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">balance</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;</span> <span class="o">-&gt;</span> <span class="mf">2.5</span><span class="o">)&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">val</span> <span class="n">balance</span> <span class="k">=</span> <span class="n">doc</span><span class="o">.</span><span class="n">get</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">balance</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;)</span></code></pre></div></p>

<p>We have already hit another issue here &ndash; in Scala, invoking <code>get</code> on a <code>Map</code> returns <code>Option[T]</code> (Where, in this case, <code>T</code> is of type <code>Any</code>). Which means casting has become more complex: to get a <code>Double</code> we also have to unwrap the <code>Option[Any]</code> first. A lazy man&rsquo;s approach might be something hairy like so:</p>

<p><div class="highlight"><pre><code class="language-scala" data-lang="scala"><span class="n">balance</span><span class="o">.</span><span class="n">getOrElse</span><span class="o">(</span><span class="kc">null</span><span class="o">).</span><span class="n">asInstanceOf</span><span class="o">[</span><span class="kt">Double</span><span class="o">]</span></code></pre></div></p>

<p>In the annals of history (when men were <em>real</em> men, and small furry creatures from Alpha Centauri were <em>real</em> small furry creatures from Alpha Centauri), the above became an annoyingly common pattern. A solution was needed - and so <code>getAs[T]</code> was born. The idea was not only to allow a shortcut to casting, but take care of the <code>Option[T]</code> wrapping for you as well. Invoking <code>getAs[Double]</code> will, in this case, return us an <code>Option[Double]</code>.</p>

<p>But not everything is perfect in the land of <code>getAs[T]</code> &ndash; if the type requested doesn&rsquo;t match the actual type, runtime failures occur. Worse, if the user fails to pass a type, the Scala compiler substitutes <code>Nothing</code>, which <em>guarantees</em> a runtime failure. Runtime failures are bad &ndash; but fortunately, <a href="http://twitter.com/milessabin">Miles Sabin</a> &amp; <a href="http://twitter.com/jteigen">Jon-Anders Teigen</a> came up with an awesome solution.</p>

<!--more-->


<p><div class="highlight"><pre><code class="language-scala" data-lang="scala"><span class="n">doc</span><span class="o">.</span><span class="n">getAs</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;&quot;</span> <span class="n">title</span><span class="o">=</span><span class="s">&quot;foo&quot;</span><span class="o">&gt;</span><span class="nc">String</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;</span>
<span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">res1</span><span class="k">:</span> <span class="kt">Option</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="k">=</span> <span class="nc">Some</span><span class="o">(</span><span class="n">bar</span><span class="o">)</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/&amp;</span><span class="n">lsquo</span><span class="o">;</span>
<span class="n">doc</span><span class="o">.</span><span class="n">getAs</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;&quot;</span> <span class="n">title</span><span class="o">=</span><span class="s">&quot;balance&quot;</span><span class="o">&gt;</span><span class="nc">Double</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;</span>
<span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">res2</span><span class="k">:</span> <span class="kt">Option</span><span class="o">[</span><span class="kt">Double</span><span class="o">]</span> <span class="k">=</span> <span class="nc">Some</span><span class="o">(</span><span class="mf">2.5</span><span class="o">)</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
<span class="n">doc</span><span class="o">.</span><span class="n">getAs</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">balance</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;)</span>
<span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">res3</span><span class="k">:</span> <span class="kt">Option</span><span class="o">[</span><span class="kt">Nothing</span><span class="o">]</span> <span class="k">=</span> <span class="nc">Some</span><span class="o">(</span><span class="mf">2.5</span><span class="o">)</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;/&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="nc">Notably</span> <span class="n">at</span> <span class="n">least</span><span class="o">,</span> <span class="n">the</span> <span class="nc">Scala</span> <span class="n">compiler</span> <span class="n">is</span> <span class="n">smart</span> <span class="n">enough</span> <span class="n">to</span> <span class="n">infer</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">A</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;</span> <span class="n">from</span> <span class="n">the</span> <span class="n">left</span><span class="o">-</span><span class="n">hand</span> <span class="n">side</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="k">if</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span>
   <span class="n">an</span> <span class="n">explicit</span> <span class="k">type</span> <span class="kt">is</span> <span class="kt">declared</span> <span class="kt">&lt;/em&gt;/</span>
<span class="k">val</span> <span class="n">bal</span><span class="k">:</span> <span class="kt">Option</span><span class="o">[</span><span class="kt">Double</span><span class="o">]</span> <span class="k">=</span> <span class="n">getAs</span><span class="o">(</span><span class="n">doc</span><span class="o">,</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">balance</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;)</span>
<span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">bal</span><span class="k">:</span> <span class="kt">Option</span><span class="o">[</span><span class="kt">Double</span><span class="o">]</span> <span class="k">=</span> <span class="nc">Some</span><span class="o">(</span><span class="mf">2.5</span><span class="o">)</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span></code></pre></div></p>

<p>We get back an option of <code>Nothing</code>, which is less than ideal (The REPL appears to be somewhat more forgiving in some of this behavior than the actual runtime is). My reaction to this early on was quite strong –– I wanted to <em>require</em> that the user pass their type argument. Unfortunately, the best I could do within Casbah was attempt to detect the compiler substituted <code>Nothing</code> and warn the user at runtime. Less than ideal, I know.</p>

<p><div class="highlight"><pre><code class="language-scala" data-lang="scala"><span class="k">def</span> <span class="n">getAs</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;key:%20String&quot;</span><span class="o">&gt;</span><span class="n">A</span> <span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="k">:</span> <span class="kt">Any:</span> <span class="kt">Manifest&lt;/a</span><span class="k">&gt;:</span> <span class="kt">Option</span><span class="o">[</span><span class="kt">A</span><span class="o">]</span> <span class="k">=</span> <span class="o">{</span>
  <span class="n">require</span><span class="o">(</span><span class="n">manifest</span><span class="o">[</span><span class="kt">A</span><span class="o">]</span> <span class="o">!=</span> <span class="n">manifest</span><span class="o">[</span><span class="kt">scala.Nothing</span><span class="o">],</span>
    <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="nc">Type</span> <span class="n">inference</span> <span class="n">failed</span><span class="o">;</span> <span class="n">getAs</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;&quot;</span><span class="o">&gt;</span><span class="n">A</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;</span> <span class="k">requires</span> <span class="n">an</span> <span class="n">explicit</span> <span class="k">type</span> <span class="kt">argument</span> <span class="kt">&amp;rdquo</span><span class="o">;</span> <span class="o">+</span>
    <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;(</span><span class="n">e</span><span class="o">.</span><span class="n">g</span><span class="o">.</span> <span class="n">dbObject</span><span class="o">.</span><span class="n">getAs</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;%22somegetAKey%22&quot;</span><span class="o">&gt;&lt;</span><span class="nc">ReturnType</span><span class="o">&gt;&lt;/</span><span class="n">a</span><span class="o">&gt;</span> <span class="o">)</span> <span class="n">to</span> <span class="n">function</span> <span class="n">correctly</span><span class="o">.&amp;</span><span class="n">rdquo</span><span class="o">;)&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">underlying</span><span class="o">.</span><span class="n">get</span><span class="o">(</span><span class="n">key</span><span class="o">)</span> <span class="k">match</span> <span class="o">{</span>
    <span class="k">case</span> <span class="kc">null</span> <span class="k">=&gt;</span> <span class="nc">None</span>
    <span class="k">case</span> <span class="n">value</span> <span class="k">=&gt;</span> <span class="nc">Some</span><span class="o">(</span><span class="n">value</span><span class="o">.</span><span class="n">asInstanceOf</span><span class="o">[</span><span class="kt">A</span><span class="o">])</span>
  <span class="o">}</span>
<span class="o">}</span></code></pre></div></p>

<p>This gave me somewhat improved behavior –- at least users are warned at runtime before something breaks.</p>

<p><div class="highlight"><pre><code class="language-scala" data-lang="scala"><span class="n">doc</span><span class="o">.</span><span class="n">getAs</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">balance</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;)</span>
<span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span>
<span class="n">java</span><span class="o">.</span><span class="n">lang</span><span class="o">.</span><span class="nc">IllegalArgumentException</span><span class="k">:</span> <span class="kt">requirement</span> <span class="kt">failed:</span> <span class="kt">Type</span> <span class="kt">inference</span> <span class="kt">failed</span><span class="o">;</span> <span class="n">getAs</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;&quot;</span><span class="o">&gt;</span><span class="n">A</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;</span> <span class="k">requires</span> <span class="n">an</span> <span class="n">explicit</span> <span class="k">type</span> <span class="kt">argument</span> <span class="o">(</span><span class="kt">e.g.</span> <span class="kt">dbObject.getAs&lt;a</span> <span class="kt">href</span><span class="o">=</span><span class="err">&quot;&quot;</span> <span class="kt">title</span><span class="o">=</span><span class="s">&quot;somegetAKey&quot;</span><span class="o">&gt;&lt;</span><span class="nc">ReturnType</span><span class="o">&gt;&lt;/</span><span class="n">a</span><span class="o">&gt;</span> <span class="o">)</span> <span class="n">to</span> <span class="n">function</span> <span class="n">correctly</span><span class="o">.</span>
<span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span></code></pre></div></p>

<p>Great &ndash; we prevent people from utterly failing to pass a type to <code>getAs</code> by throwing an exception at runtime. A bit like closing the barn doors after the horses escaped, and somewhat counter to the point of compiled languages. Fortunately, Miles Sabin knows a lot of great compiler tricks and Jon-Anders has superpowers (which he uses for good, not evil). Using some of Miles&#8217; tricks, Jon-Anders has fixed Casbah (as of 2.3.0+) to make <code>getAs[T]</code> fail utterly at <em>compile time</em> when no type is passed.</p>

<p>The secret to this trick is essentially that the Scala compiler <em>hates</em> ambiguity. In order to substitute <code>Nothing</code> as a type argument when one isn&rsquo;t supplied, the Scala compiler has an implicit for <code>Nothing</code> scoped. If one were to exacerbate the situation by introducing an additional implicit for <code>Nothing</code>, the compiler would fail when no type argument is passed.</p>

<p>With this in mind, we can morph <code>getAs</code> to work with a type class instead of a standard type argument.</p>

<p><div class="highlight"><pre><code class="language-scala" data-lang="scala"><span class="k">def</span> <span class="n">getAs</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;key:%20String&quot;</span><span class="o">&gt;</span><span class="n">A</span> <span class="k">:</span> <span class="kt">NotNothing&lt;/a</span><span class="k">&gt;:</span> <span class="kt">Option</span><span class="o">[</span><span class="kt">A</span><span class="o">]</span> <span class="k">=</span> <span class="o">{</span>
  <span class="n">underlying</span><span class="o">.</span><span class="n">get</span><span class="o">(</span><span class="n">key</span><span class="o">)</span> <span class="k">match</span> <span class="o">{</span>
    <span class="k">case</span> <span class="kc">null</span> <span class="k">=&gt;</span> <span class="nc">None</span>
    <span class="k">case</span> <span class="n">value</span> <span class="k">=&gt;</span> <span class="nc">Some</span><span class="o">(</span><span class="n">value</span><span class="o">.</span><span class="n">asInstanceOf</span><span class="o">[</span><span class="kt">A</span><span class="o">])</span>
  <span class="o">}</span>
<span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">sealed</span> <span class="k">trait</span> <span class="nc">NotNothing</span><span class="o">[</span><span class="kt">A</span><span class="o">]{</span>
  <span class="k">type</span> <span class="kt">B</span>
<span class="o">}</span></code></pre></div></p>

<p>Our previous unbounded type argument is replaced with the new type class boundary of <code>NotNothing</code> and the runtime <code>Nothing</code> check is removed. We also need concrete instances of our type class, which is where the real magic comes into play.</p>

<p><div class="highlight"><pre><code class="language-scala" data-lang="scala"><span class="k">object</span> <span class="nc">NotNothing</span> <span class="o">{</span>
  <span class="k">implicit</span> <span class="k">val</span> <span class="n">nothing</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">NotNothing</span><span class="o">[</span><span class="kt">Nothing</span><span class="o">]{</span> <span class="k">type</span> <span class="kt">B</span> <span class="o">=</span> <span class="nc">Any</span> <span class="o">}</span>
  <span class="k">implicit</span> <span class="k">def</span> <span class="n">notNothing</span><span class="o">[</span><span class="kt">A</span><span class="o">]</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">NotNothing</span><span class="o">[</span><span class="kt">A</span><span class="o">]{</span> <span class="k">type</span> <span class="kt">B</span> <span class="o">=</span> <span class="n">A</span> <span class="o">}</span>
<span class="o">}</span></code></pre></div></p>

<p>Now, any application of <code>Nothing</code> will trigger the ambiguity problem &ndash; the Scala compiler won&rsquo;t figure out how to resolve the type argument. This trick works because <code>Nothing</code> is at the <em>bottom</em> of Scala&rsquo;s type hierarchy. Were I to call <code>getAs("balance")</code>, the Scala compiler would attempt to fill in <code>Nothing</code> as the type argument. However, both implicit conversons for <code>nothing</code> <em>and</em> <code>notNothing[A]</code> will match &ndash; causing ambiguity and compilation fails.</p>

<p><div class="highlight"><pre><code class="language-scala" data-lang="scala"><span class="n">doc</span><span class="o">.</span><span class="n">getAs</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;&quot;</span> <span class="n">title</span><span class="o">=</span><span class="s">&quot;foo&quot;</span><span class="o">&gt;</span><span class="nc">String</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;</span>
<span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">res0</span><span class="k">:</span> <span class="kt">Option</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="k">=</span> <span class="nc">Some</span><span class="o">(</span><span class="n">bar</span><span class="o">)</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
<span class="n">doc</span><span class="o">.</span><span class="n">getAs</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;&quot;</span> <span class="n">title</span><span class="o">=</span><span class="s">&quot;balance&quot;</span><span class="o">&gt;</span><span class="nc">Double</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;</span>
<span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">res1</span><span class="k">:</span> <span class="kt">Option</span><span class="o">[</span><span class="kt">Double</span><span class="o">]</span> <span class="k">=</span> <span class="nc">Some</span><span class="o">(</span><span class="mf">2.5</span><span class="o">)</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
<span class="n">doc</span><span class="o">.</span><span class="n">getAs</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">balance</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;)</span>
<span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">error</span><span class="k">:</span> <span class="kt">ambiguous</span> <span class="kt">implicit</span> <span class="kt">values:</span>
 <span class="n">both</span> <span class="n">value</span> <span class="n">nothing</span> <span class="n">in</span> <span class="k">object</span> <span class="nc">NotNothing</span> <span class="n">of</span> <span class="k">type</span> <span class="o">=&gt;</span> <span class="n">java</span><span class="o">.</span><span class="n">lang</span><span class="o">.</span><span class="nc">Object</span> <span class="k">with</span> <span class="n">com</span><span class="o">.</span><span class="n">mongodb</span><span class="o">.</span><span class="n">casbah</span><span class="o">.</span><span class="n">commons</span><span class="o">.</span><span class="nc">NotNothing</span><span class="o">[</span><span class="kt">Nothing</span><span class="o">]{</span><span class="k">type</span> <span class="kt">B</span> <span class="o">=</span> <span class="nc">Any</span><span class="o">}</span>
 <span class="n">and</span> <span class="n">method</span> <span class="n">notNothing</span> <span class="n">in</span> <span class="k">object</span> <span class="nc">NotNothing</span> <span class="n">of</span> <span class="k">type</span> <span class="err">[</span><span class="kt">A</span><span class="err">]</span><span class="o">=&gt;</span> <span class="n">java</span><span class="o">.</span><span class="n">lang</span><span class="o">.</span><span class="nc">Object</span> <span class="k">with</span> <span class="n">com</span><span class="o">.</span><span class="n">mongodb</span><span class="o">.</span><span class="n">casbah</span><span class="o">.</span><span class="n">commons</span><span class="o">.</span><span class="nc">NotNothing</span><span class="o">[</span><span class="kt">A</span><span class="o">]{</span><span class="k">type</span> <span class="kt">B</span> <span class="o">=</span> <span class="n">A</span><span class="o">}</span>
 <span class="k">match</span> <span class="n">expected</span> <span class="k">type</span> <span class="kt">com.mongodb.casbah.commons.NotNothing</span><span class="o">[</span><span class="kt">A</span><span class="o">]</span>
              <span class="n">doc</span><span class="o">.</span><span class="n">getAs</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">balance</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;)</span>
                       <span class="o">^</span>
<span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span></code></pre></div></p>

<p>A vast improvement in behavior, especially if we use the <a href="http://suereth.blogspot.com/2011/03/annotate-your-type-classes.html"><code>@implicitNotFound</code> annotation</a> to provide clear error messages.</p>

<p>The moral of the story &ndash; knowing the ins and outs of the type system and compiler corners can do great things for improving the functionality of your code. Especially being aware that as smart as the Scala compiler is, there are limitations inherent in the runtime platform (the JVM, specifically type erasure) that can make our lives difficult if ignored.</p>

<h2>Update</h2>

<p>While reviewing a draft of this post, <a href="http://twitter.com/djspiewak">Daniel Spiewak</a> noted one more issue with my code as it exists.  Namely, that we don&rsquo;t have a sane way of preventing users from <em>miscasting</em>.  That is to say, if I try to fetch &ldquo;balance&rdquo; as a <code>String</code>, this shouldn&rsquo;t be OK.</p>

<p><div class="highlight"><pre><code class="language-scala" data-lang="scala"><span class="n">doc</span><span class="o">.</span><span class="n">getAs</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;&quot;</span> <span class="n">title</span><span class="o">=</span><span class="s">&quot;balance&quot;</span><span class="o">&gt;</span><span class="nc">String</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;.</span><span class="n">getOrElse</span><span class="o">(</span><span class="kc">null</span><span class="o">)</span>
<span class="n">java</span><span class="o">.</span><span class="n">lang</span><span class="o">.</span><span class="nc">ClassCastException</span><span class="k">:</span> <span class="kt">java.lang.Double</span> <span class="kt">cannot</span> <span class="kt">be</span> <span class="kt">cast</span> <span class="kt">to</span> <span class="kt">java.lang.String</span></code></pre></div></p>

<p>Daniel rightly points out how bad a runtime <code>ClassCastException</code> is, and has proposed another fix which I&rsquo;m incorporating.</p>

<p><div class="highlight"><pre><code class="language-scala" data-lang="scala"><span class="k">def</span> <span class="n">getAs</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;key:%20String&quot;</span><span class="o">&gt;</span><span class="n">A</span> <span class="k">:</span> <span class="kt">NotNothing</span> <span class="kt">:</span> <span class="kt">Manifest&lt;/a</span><span class="k">&gt;:</span> <span class="kt">Option</span><span class="o">[</span><span class="kt">A</span><span class="o">]</span> <span class="k">=</span> <span class="o">{</span>
  <span class="n">underlying</span><span class="o">.</span><span class="n">get</span><span class="o">(</span><span class="n">key</span><span class="o">)</span> <span class="k">match</span> <span class="o">{</span>
    <span class="k">case</span> <span class="kc">null</span> <span class="k">=&gt;</span> <span class="nc">None</span>
    <span class="k">case</span> <span class="n">value</span> <span class="k">if</span> <span class="n">manifest</span><span class="o">[</span><span class="kt">A</span><span class="o">]</span> <span class="o">&gt;:&gt;</span> <span class="nc">Manifest</span><span class="o">.</span><span class="n">classType</span><span class="o">(</span><span class="n">value</span><span class="o">.</span><span class="n">getClass</span><span class="o">)</span> <span class="k">=&gt;</span>
      <span class="nc">Some</span><span class="o">(</span><span class="n">value</span><span class="o">.</span><span class="n">asInstanceOf</span><span class="o">[</span><span class="kt">A</span><span class="o">])</span>
    <span class="k">case</span> <span class="n">fail</span> <span class="k">=&gt;</span>
      <span class="n">log</span><span class="o">.</span><span class="n">warn</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="nc">Unable</span> <span class="n">to</span> <span class="n">cast</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="o">;%</span><span class="n">s</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="o">;</span> <span class="n">as</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="o">;%</span><span class="n">s</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="o">;;</span> <span class="n">please</span> <span class="n">check</span> <span class="n">your</span> <span class="n">types</span><span class="o">.&amp;</span><span class="n">rdquo</span><span class="o">;,</span> <span class="nc">Manifest</span><span class="o">.</span><span class="n">classType</span><span class="o">(</span><span class="n">fail</span><span class="o">.</span><span class="n">getClass</span><span class="o">),</span> <span class="n">manifest</span><span class="o">[</span><span class="kt">A</span><span class="o">])</span>
      <span class="nc">None</span>
  <span class="o">}</span>
<span class="o">}</span></code></pre></div></p>

<p>Now, when you ask for a type that doesn&rsquo;t match what the Document contains, you will receive <code>None</code> and a warning in your log such as <code>Unable to cast 'java.lang.Double' as 'java.lang.String'; please check your types.</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[User Configurable Type Filtering with Scala Type Classes]]></title>
    <link href="http://blog.evilmonkeylabs.com/2011/07/13/User_Configgable_Type_Filtering_with_Type_Classes/"/>
    <updated>2011-07-13T00:00:00-04:00</updated>
    <id>http://blog.evilmonkeylabs.com/2011/07/13/User_Configgable_Type_Filtering_with_Type_Classes</id>
    <content type="html"><![CDATA[<p>When I woke up this morning and looked through my twitter mentions, I found this gem sitting there from the middle of the night:</p>

<p><img src="/images/oid_lt_casbah.png" alt="@rit when using &quot;_id&quot; $lt new ObjectId(timestamp) it throws ValidDateOrNumericType, but we might want to select records after id timestamp (from @justthor)" /></p>

<p>The user in question is complaining that when using <a href="http://github.com/mongodb/casbah">Casbah&rsquo;s DSL</a>, it doesn&rsquo;t allow a MongoDB <code>ObjectId</code> as a valid type to the <code>$lt</code> operator.  But as <a href="http://twitter.com/justthor">@justthor</a> points out, it is entirely possible to use <code>ObjectId</code> with the <code>$lt</code> operator since it contains timestamp information (See the <a href="http://www.mongodb.org/display/DOCS/Object+IDs">documentation for ObjectId</a> if you want nitty gritty detail).   When I wrote the code for <code>$lt</code> however, I needed to decide what types were valid and weren&rsquo;t valid; I can&rsquo;t exactly guarantee type safety wih a DSL like Casbah&rsquo;s, but I can enforce type <em>sanity</em>.  Whether I forgot that you can use <code>ObjectId</code> in <code>$lt</code> or just decided that most people wouldn&rsquo;t need to is irrelevant &mdash; I had in this case blocked a user from accomplishing something valid that they needed to.</p>

<p>It is a more than reasonable problem, and my initial reaction was &ldquo;oh crap, I guess I need to patch that&rdquo;.  But what I forgot is that a few releases back, I rearchitected Casbah to obviate this kind of problem.  Casbah now allows for a user definable (or, if you prefer, &ldquo;adjustable&rdquo;) type filter on any of its DSL operators.  This is accomplished through a very simple application of Scala Type Classes, a term which gets batted around a lot in the Scala community, but few seem able to understand or articulate its meaning to us lesser mortals.  Over the last few months I&rsquo;ve come to understand Type Classes much more deeply than I think I ever expected, and applied these lessons to the design of my code.  As I failed to document the power and usage of these features at the time, I am going to be writing some additional detailed articles about <em>my</em> understanding of Type Classes in the next few weeks, and this is the first of such explanations.</p>

<p>So the question at hand is, how exactly does Casbah allow us to do this magical type filtering that I just mentioned, without patching the driver or creating a new release?  First, let&rsquo;s look at how Casbah used to do things before the introduction of the as-yet unexplained Type Class introduction.</p>

<!--more-->


<p><div class="highlight"><pre><code class="language-scala" data-lang="scala"><span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;*</span>
 <span class="o">*</span> <span class="nc">Trait</span> <span class="n">to</span> <span class="n">provide</span> <span class="n">the</span> <span class="nc">$lt</span> <span class="o">(</span><span class="nc">Less</span> <span class="nc">Than</span><span class="o">)</span> <span class="n">method</span> <span class="n">on</span> <span class="n">appropriate</span> <span class="n">callers</span><span class="o">.</span>
 <span class="o">*</span>
 <span class="o">*</span> <span class="nc">Targets</span> <span class="o">(</span><span class="n">takes</span> <span class="n">a</span> <span class="n">right</span><span class="o">-</span><span class="n">hand</span> <span class="n">value</span> <span class="n">of</span><span class="o">)</span> <span class="nc">String</span><span class="o">,</span> <span class="nc">AnyVal</span> <span class="o">(</span><span class="n">see</span> <span class="nc">Scala</span> <span class="n">docs</span> <span class="n">but</span> <span class="n">basically</span> <span class="nc">Int</span><span class="o">,</span> <span class="nc">Long</span><span class="o">,</span> <span class="nc">Char</span><span class="o">,</span> <span class="nc">Byte</span><span class="o">,</span> <span class="n">etc</span><span class="o">)</span>
 <span class="o">*</span> <span class="nc">DBObject</span> <span class="n">and</span> <span class="nc">Map</span><span class="o">[</span><span class="kt">String</span>, <span class="kt">Any</span><span class="o">].</span>
 <span class="o">*</span>
 <span class="o">*</span>
 <span class="o">*</span> <span class="nd">@author</span> <span class="nc">Brendan</span> <span class="n">W</span><span class="o">.</span> <span class="nc">McAdams</span> <span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;&amp;#109;&amp;#97;&amp;#x69;&amp;#x6c;&amp;#116;&amp;#x6f;&amp;#x3a;&amp;#98;&amp;#114;&amp;#101;&amp;#110;&amp;#100;&amp;#x61;&amp;#x6e;&amp;#x40;&amp;#x31;&amp;#x30;&amp;#103;&amp;#101;&amp;#x6e;&amp;#46;&amp;#99;&amp;#x6f;&amp;#109;&quot;</span><span class="o">&gt;&amp;</span><span class="k">#</span><span class="mi">98</span><span class="o">;&amp;</span><span class="k">#</span><span class="mi">114</span><span class="o">;&amp;</span><span class="k">#</span><span class="n">x65</span><span class="o">;&amp;</span><span class="k">#</span><span class="n">x6e</span><span class="o">;&amp;</span><span class="k">#</span><span class="mi">100</span><span class="o">;&amp;</span><span class="k">#</span><span class="n">x61</span><span class="o">;&amp;</span><span class="k">#</span><span class="n">x6e</span><span class="o">;&amp;</span><span class="k">#</span><span class="n">x40</span><span class="o">;&amp;</span><span class="k">#</span><span class="n">x31</span><span class="o">;&amp;</span><span class="k">#</span><span class="mi">48</span><span class="o">;&amp;</span><span class="k">#</span><span class="mi">103</span><span class="o">;&amp;</span><span class="k">#</span><span class="n">x65</span><span class="o">;&amp;</span><span class="k">#</span><span class="n">x6e</span><span class="o">;&amp;</span><span class="k">#</span><span class="mi">46</span><span class="o">;&amp;</span><span class="k">#</span><span class="n">x63</span><span class="o">;&amp;</span><span class="k">#</span><span class="n">x6f</span><span class="o">;&amp;</span><span class="k">#</span><span class="mi">109</span><span class="o">;&lt;/</span><span class="n">a</span><span class="o">&gt;</span>
 <span class="o">*</span> <span class="nd">@see</span> <span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%3C%2C%3C%3D%2C%3E%2C%3E%3D&quot;</span><span class="o">&gt;</span><span class="n">http</span><span class="o">://</span><span class="n">www</span><span class="o">.</span><span class="n">mongodb</span><span class="o">.</span><span class="n">org</span><span class="o">/</span><span class="n">display</span><span class="o">/</span><span class="nc">DOCS</span><span class="o">/</span><span class="nc">Advanced</span><span class="o">+</span><span class="nc">Queries</span><span class="k">#</span><span class="nc">AdvancedQueries</span><span class="o">-%</span><span class="mi">3</span><span class="n">C</span><span class="o">%</span><span class="mi">2</span><span class="n">C</span><span class="o">%</span><span class="mi">3</span><span class="n">C</span><span class="o">%</span><span class="mi">3</span><span class="n">D</span><span class="o">%</span><span class="mi">2</span><span class="n">C</span><span class="o">%</span><span class="mi">3</span><span class="n">E</span><span class="o">%</span><span class="mi">2</span><span class="n">C</span><span class="o">%</span><span class="mi">3</span><span class="n">E</span><span class="o">%</span><span class="mi">3</span><span class="n">D</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;</span>
 <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
<span class="k">trait</span> <span class="nc">LessThanOp</span> <span class="k">extends</span> <span class="nc">QueryOperator</span> <span class="o">{</span>
  <span class="k">private</span> <span class="k">val</span> <span class="n">oper</span> <span class="k">=</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="nc">$lt</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">def</span> <span class="nc">$lt</span><span class="o">(</span><span class="n">target</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span> <span class="k">=</span> <span class="n">op</span><span class="o">(</span><span class="n">oper</span><span class="o">,</span> <span class="n">target</span><span class="o">)</span>
  <span class="k">def</span> <span class="nc">$lt</span><span class="o">(</span><span class="n">target</span><span class="k">:</span> <span class="kt">java.util.Date</span><span class="o">)</span> <span class="k">=</span> <span class="n">op</span><span class="o">(</span><span class="n">oper</span><span class="o">,</span> <span class="n">target</span><span class="o">)</span>
  <span class="k">def</span> <span class="nc">$lt</span><span class="o">(</span><span class="n">target</span><span class="k">:</span> <span class="kt">AnyVal</span><span class="o">)</span> <span class="k">=</span> <span class="n">op</span><span class="o">(</span><span class="n">oper</span><span class="o">,</span> <span class="n">target</span><span class="o">)</span>
  <span class="k">def</span> <span class="nc">$lt</span><span class="o">(</span><span class="n">target</span><span class="k">:</span> <span class="kt">DBObject</span><span class="o">)</span> <span class="k">=</span> <span class="n">op</span><span class="o">(</span><span class="n">oper</span><span class="o">,</span> <span class="n">target</span><span class="o">)</span>
  <span class="k">def</span> <span class="nc">$lt</span><span class="o">(</span><span class="n">target</span><span class="k">:</span> <span class="kt">Map</span><span class="o">[</span><span class="kt">String</span>, <span class="kt">Any</span><span class="o">])</span> <span class="k">=</span> <span class="n">op</span><span class="o">(</span><span class="n">oper</span><span class="o">,</span> <span class="n">target</span><span class="o">.</span><span class="n">asDBObject</span><span class="o">)</span>
<span class="o">}</span></code></pre></div></p>

<p>The <code>op</code> method is just a helper function which assists the DSL in constructing a valid MongoDB query under the covers; it&rsquo;s not particularly relevant to this discussion so let&rsquo;s leave it aside for now.  What <em>is</em> important is to note that this is a very naive approach to the DSL game &mdash; it is neither type safe or type sane.  It has some very basic support for handling &ldquo;special&rdquo; types like <code>String</code>, <code>java.util.Date</code>, <code>DBObject</code> and <code>Map[String, Any]</code> but blindly allows anything which is <code>AnyVal</code> through.  There are, in my opinion, three problems here:</p>

<ul>
<li>Is blindly passing <code>AnyVal</code> a good idea? Typically it consists of things like <code>Int</code>, <code>Char</code>, <code>Boolean</code>, etc but can we be certain this is a safe assumption?</li>
<li>What if a user defines a custom type which they serialize to MongoDB as something which supports <code>$lt</code> &mdash;  How do they use that type with the DSL without patching Casbah itself? <code>BigDecimal</code> is an example of this; the current code does not allow it to be used at all with <code>$lt</code>.</li>
<li>What if a user has a domain specific reason to <em>restrict</em> certain of these types? I shouldn&rsquo;t even need to manufacture an example here: Users should be able to restrict types without patching code, if possible</li>
</ul>


<p>These questions and the fact that I kept patching bugs, adding types, etc on user request led me to seek a new solution while working on Casbah 2.0. While searching for this solution I started to gain a rudamentary understanding of Type Classes and their power, and embarked upon a quest to give the users of Casbah flexible control over the types the DSL will and will not allow through.  Of course, I neglected to adequately document those changes, until now.</p>

<p>After the conversion to Type Classes, here&rsquo;s what the <code>$lt</code> operator&rsquo;s code looks like today::</p>

<p><div class="highlight"><pre><code class="language-scala" data-lang="scala"><span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;*</span>
 <span class="o">*</span> <span class="nc">Trait</span> <span class="n">to</span> <span class="n">provide</span> <span class="n">the</span> <span class="nc">$lt</span> <span class="o">(</span><span class="nc">Less</span> <span class="nc">Than</span><span class="o">)</span> <span class="n">method</span> <span class="n">on</span> <span class="n">appropriate</span> <span class="n">callers</span><span class="o">.</span>
 <span class="o">*</span>
 <span class="o">*</span> <span class="nc">Targets</span> <span class="o">(</span><span class="n">takes</span> <span class="n">a</span> <span class="n">right</span><span class="o">-</span><span class="n">hand</span> <span class="n">value</span> <span class="n">of</span><span class="o">)</span> <span class="nc">String</span><span class="o">,</span> <span class="nc">Numeric</span><span class="o">,</span> <span class="nc">JDK</span> <span class="nc">And</span> <span class="nc">Joda</span> <span class="nc">Dates</span><span class="o">,</span>
 <span class="o">*</span> <span class="nc">Array</span><span class="o">,</span> <span class="nc">DBObject</span> <span class="o">(</span><span class="n">and</span> <span class="nc">DBList</span><span class="o">),</span> <span class="nc">Iterable</span><span class="o">[</span><span class="k">_</span><span class="o">]</span> <span class="n">and</span> <span class="nc">Tuple1</span><span class="o">-&gt;</span><span class="mf">22.</span>
 <span class="o">*</span>
 <span class="o">*</span>
 <span class="o">*</span> <span class="nd">@author</span> <span class="nc">Brendan</span> <span class="n">W</span><span class="o">.</span> <span class="nc">McAdams</span> <span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;&amp;#109;&amp;#x61;&amp;#x69;&amp;#x6c;&amp;#x74;&amp;#111;&amp;#x3a;&amp;#x62;&amp;#114;&amp;#101;&amp;#x6e;&amp;#100;&amp;#x61;&amp;#110;&amp;#x40;&amp;#x31;&amp;#x30;&amp;#103;&amp;#x65;&amp;#110;&amp;#x2e;&amp;#99;&amp;#x6f;&amp;#x6d;&quot;</span><span class="o">&gt;&amp;</span><span class="k">#</span><span class="n">x62</span><span class="o">;&amp;</span><span class="k">#</span><span class="n">x72</span><span class="o">;&amp;</span><span class="k">#</span><span class="mi">101</span><span class="o">;&amp;</span><span class="k">#</span><span class="n">x6e</span><span class="o">;&amp;</span><span class="k">#</span><span class="mi">100</span><span class="o">;&amp;</span><span class="k">#</span><span class="n">x61</span><span class="o">;&amp;</span><span class="k">#</span><span class="n">x6e</span><span class="o">;&amp;</span><span class="k">#</span><span class="mi">64</span><span class="o">;&amp;</span><span class="k">#</span><span class="mi">49</span><span class="o">;&amp;</span><span class="k">#</span><span class="mi">48</span><span class="o">;&amp;</span><span class="k">#</span><span class="mi">103</span><span class="o">;&amp;</span><span class="k">#</span><span class="n">x65</span><span class="o">;&amp;</span><span class="k">#</span><span class="mi">110</span><span class="o">;&amp;</span><span class="k">#</span><span class="n">x2e</span><span class="o">;&amp;</span><span class="k">#</span><span class="n">x63</span><span class="o">;&amp;</span><span class="k">#</span><span class="n">x6f</span><span class="o">;&amp;</span><span class="k">#</span><span class="n">x6d</span><span class="o">;&lt;/</span><span class="n">a</span><span class="o">&gt;</span>
 <span class="o">*</span> <span class="nd">@see</span> <span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%3C%2C%3C%3D%2C%3E%2C%3E%3D&quot;</span><span class="o">&gt;</span><span class="n">http</span><span class="o">://</span><span class="n">www</span><span class="o">.</span><span class="n">mongodb</span><span class="o">.</span><span class="n">org</span><span class="o">/</span><span class="n">display</span><span class="o">/</span><span class="nc">DOCS</span><span class="o">/</span><span class="nc">Advanced</span><span class="o">+</span><span class="nc">Queries</span><span class="k">#</span><span class="nc">AdvancedQueries</span><span class="o">-%</span><span class="mi">3</span><span class="n">C</span><span class="o">%</span><span class="mi">2</span><span class="n">C</span><span class="o">%</span><span class="mi">3</span><span class="n">C</span><span class="o">%</span><span class="mi">3</span><span class="n">D</span><span class="o">%</span><span class="mi">2</span><span class="n">C</span><span class="o">%</span><span class="mi">3</span><span class="n">E</span><span class="o">%</span><span class="mi">2</span><span class="n">C</span><span class="o">%</span><span class="mi">3</span><span class="n">E</span><span class="o">%</span><span class="mi">3</span><span class="n">D</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;</span>
 <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
<span class="k">trait</span> <span class="nc">LessThanOp</span> <span class="k">extends</span> <span class="nc">QueryOperator</span> <span class="o">{</span>
  <span class="k">private</span> <span class="k">val</span> <span class="n">oper</span> <span class="k">=</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="nc">$lt</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">def</span> <span class="nc">$lt</span><span class="o">(</span><span class="n">target</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span> <span class="k">=</span> <span class="n">op</span><span class="o">(</span><span class="n">oper</span><span class="o">,</span> <span class="n">target</span><span class="o">)</span>
  <span class="k">def</span> <span class="nc">$lt</span><span class="o">(</span><span class="n">target</span><span class="k">:</span> <span class="kt">DBObject</span><span class="o">)</span> <span class="k">=</span> <span class="n">op</span><span class="o">(</span><span class="n">oper</span><span class="o">,</span> <span class="n">target</span><span class="o">)</span>
  <span class="k">def</span> <span class="nc">$lt</span><span class="o">(</span><span class="n">target</span><span class="k">:</span> <span class="kt">Array</span><span class="o">[</span><span class="kt">&lt;em&gt;</span><span class="o">])</span> <span class="k">=</span> <span class="n">op</span><span class="o">(</span><span class="n">oper</span><span class="o">,</span> <span class="n">target</span><span class="o">.</span><span class="n">toList</span><span class="o">)</span>
  <span class="k">def</span> <span class="nc">$lt</span><span class="o">(</span><span class="n">target</span><span class="k">:</span> <span class="kt">Tuple1</span><span class="o">[</span><span class="kt">&lt;/em&gt;</span><span class="o">])</span> <span class="k">=</span> <span class="n">op</span><span class="o">(</span><span class="n">oper</span><span class="o">,</span> <span class="n">target</span><span class="o">.</span><span class="n">productIterator</span><span class="o">.</span><span class="n">toList</span><span class="o">)</span>
  <span class="k">def</span> <span class="nc">$lt</span><span class="o">(</span><span class="n">target</span><span class="k">:</span> <span class="kt">Tuple2</span><span class="o">[</span><span class="kt">&lt;em&gt;</span>, <span class="kt">&lt;/em&gt;</span><span class="o">])</span> <span class="k">=</span> <span class="n">op</span><span class="o">(</span><span class="n">oper</span><span class="o">,</span> <span class="n">target</span><span class="o">.</span><span class="n">productIterator</span><span class="o">.</span><span class="n">toList</span><span class="o">)</span>
  <span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;*</span> <span class="nc">SNIP</span> <span class="n">a</span> <span class="n">bunch</span> <span class="n">of</span> <span class="n">individual</span> <span class="n">tuple</span> <span class="n">handling</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
  <span class="k">def</span> <span class="nc">$lt</span><span class="o">(</span><span class="n">target</span><span class="k">:</span> <span class="kt">Iterable</span><span class="o">[</span><span class="k">_</span><span class="o">])</span> <span class="k">=</span> <span class="n">op</span><span class="o">(</span><span class="n">oper</span><span class="o">,</span> <span class="n">target</span><span class="o">.</span><span class="n">toList</span><span class="o">)</span>
  <span class="k">def</span> <span class="nc">$lt</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;target:%20T&quot;</span><span class="o">&gt;</span><span class="n">T</span><span class="k">:</span> <span class="kt">ValidDateOrNumericType&lt;/a&gt;</span> <span class="o">=</span> <span class="n">op</span><span class="o">(</span><span class="n">oper</span><span class="o">,</span> <span class="n">target</span><span class="o">)</span>
<span class="o">}</span></code></pre></div></p>

<p>You should, at this point, notice a fairly stark contrast between the old code and the new.  While we still have specific allowances for <code>DBObject</code>, and have included allowances for things that are <code>Iterable</code> or <code>Array</code>-like, the explicit support for Dates, Numbers and Booleans (Primitive Numbers and Booleans being part of <code>AnyVal</code>) is gone.  Or are they?</p>

<p>The clever reader may have noticed something new lurking at the bottom of this code::</p>

<p><div class="highlight"><pre><code class="language-scala" data-lang="scala"><span class="k">def</span> <span class="nc">$lt</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;target:%20T&quot;</span><span class="o">&gt;</span><span class="n">T</span><span class="k">:</span> <span class="kt">ValidDateOrNumericType&lt;/a&gt;</span> <span class="o">=</span> <span class="n">op</span><span class="o">(</span><span class="n">oper</span><span class="o">,</span> <span class="n">target</span><span class="o">)</span></code></pre></div></p>

<p>This specific method is the pivot point of our new filter system: it is what allows users to independently define what types, beyond the hardcoded ones above, are and are not allowed to pass into the <code>$lt</code> operator.</p>

<p>But what does it all mean?</p>

<h2>Of Type Classes and Context Bounds</h2>

<p>The method above defines a type parameter of <code>[T: ValidDateOrNumericType]</code>; you&rsquo;re probably used to seeing covariance (<code>T &lt;: ValidDateOrNumericType</code>) or contravariance (<code>T &gt;: ValidDateOrNumericType</code>), but may not have encountered this notation before now.  The single colon type boundary is known as a <em>Context Bound</em>  It does not, as first guess might tell you, say that <code>T</code> must be <em>exactly</em> a <code>ValidDateOrNumericType</code>.</p>

<p>Context Bounds are a fairly new syntax, recently introduced to the type parameter system in Scala 2.8.  What they give us is a shortcut for a type-dependent implicit argument (they also work with <code>Manifests</code>, which I&rsquo;ll explain in a future post).  When the Scala Compiler parses our code it will actually produce the following statement, which is how we would have said this in versions prior to 2.8::</p>

<p><div class="highlight"><pre><code class="language-scala" data-lang="scala"><span class="k">def</span> <span class="nc">$lt</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;target:%20T&quot;</span><span class="o">&gt;</span><span class="n">T</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;(</span><span class="k">implicit</span> <span class="n">evidence$1</span><span class="k">:</span> <span class="kt">ValidDateOrNumericType</span><span class="o">[</span><span class="kt">T</span><span class="o">])</span> <span class="k">=</span> <span class="n">op</span><span class="o">(</span><span class="n">oper</span><span class="o">,</span> <span class="n">target</span><span class="o">)</span></code></pre></div></p>

<p>What the Context Boundary syntax says is that we want to accept a generic type <code>T</code>, as long as there is an <em>implicit</em> instance of <code>ValidDateOrNumericType[T]</code> available.  With this simple statement, what we say is quite literally as long as an implicit instance of <code>ValidDateOrNumericType</code> is available for type <code>T</code>, it is a valid type for this method.  This means that you, as a user, can quickly change what type are and aren&rsquo;t allowed into this <code>$lt</code> method merely by adjusting the implicit scope.  Powerful, no?</p>

<p>In this case, <code>ValidDateOrNumericType</code> itself is a completely empty trait (but, as we&rsquo;ll see in my next post can actually become quite powerful with the introduction of some methods!) which is used as a simple filter. The default imports for Casbah&rsquo;s DSL automatically gives you several predefined filter types::</p>

<p><div class="highlight"><pre><code class="language-scala" data-lang="scala"><span class="k">implicit</span> <span class="k">object</span> <span class="nc">JDKDateDoNOk</span> <span class="k">extends</span> <span class="nc">JDKDateOk</span> <span class="k">with</span> <span class="nc">ValidDateOrNumericType</span><span class="o">[</span><span class="kt">java.util.Date</span><span class="o">]</span>
<span class="k">implicit</span> <span class="k">object</span> <span class="nc">JodaDateTimeDoNOk</span> <span class="k">extends</span> <span class="nc">JDKDateOk</span> <span class="k">with</span> <span class="nc">ValidDateOrNumericType</span><span class="o">[</span><span class="kt">org.joda.time.DateTime</span><span class="o">]</span>
<span class="k">implicit</span> <span class="k">object</span> <span class="nc">BigIntDoNOk</span> <span class="k">extends</span> <span class="nc">BigIntOk</span> <span class="k">with</span> <span class="nc">ValidDateOrNumericType</span><span class="o">[</span><span class="kt">BigInt</span><span class="o">]</span>
<span class="k">implicit</span> <span class="k">object</span> <span class="nc">IntDoNOk</span> <span class="k">extends</span> <span class="nc">IntOk</span> <span class="k">with</span> <span class="nc">ValidDateOrNumericType</span><span class="o">[</span><span class="kt">Int</span><span class="o">]</span>
<span class="k">implicit</span> <span class="k">object</span> <span class="nc">ShortDoNOk</span> <span class="k">extends</span> <span class="nc">ShortOk</span> <span class="k">with</span> <span class="nc">ValidDateOrNumericType</span><span class="o">[</span><span class="kt">Short</span><span class="o">]</span>
<span class="k">implicit</span> <span class="k">object</span> <span class="nc">ByteDoNOk</span> <span class="k">extends</span> <span class="nc">ByteOk</span> <span class="k">with</span> <span class="nc">ValidDateOrNumericType</span><span class="o">[</span><span class="kt">Byte</span><span class="o">]</span>
<span class="k">implicit</span> <span class="k">object</span> <span class="nc">LongDoNOk</span> <span class="k">extends</span> <span class="nc">LongOk</span> <span class="k">with</span> <span class="nc">ValidDateOrNumericType</span><span class="o">[</span><span class="kt">Long</span><span class="o">]</span>
<span class="k">implicit</span> <span class="k">object</span> <span class="nc">FloatDoNOk</span> <span class="k">extends</span> <span class="nc">FloatOk</span> <span class="k">with</span> <span class="nc">ValidDateOrNumericType</span><span class="o">[</span><span class="kt">Float</span><span class="o">]</span>
<span class="k">implicit</span> <span class="k">object</span> <span class="nc">BigDecimalDoNOk</span> <span class="k">extends</span> <span class="nc">BigDecimalOk</span> <span class="k">with</span> <span class="nc">ValidDateOrNumericType</span><span class="o">[</span><span class="kt">BigDecimal</span><span class="o">]</span>
<span class="k">implicit</span> <span class="k">object</span> <span class="nc">DoubleDoNOk</span> <span class="k">extends</span> <span class="nc">DoubleOk</span> <span class="k">with</span> <span class="nc">ValidDateOrNumericType</span><span class="o">[</span><span class="kt">Double</span><span class="o">]</span></code></pre></div></p>

<p>All one has to do to introduce a new type as valid to <code>$lt</code> is define an implicit instance of <code>ValidDateOrNumeric[&lt;YourType&gt;]</code>.  Circling back to our original problem, the solution to &ldquo;How do I allow <code>ObjectId</code> in <code>$lt</code>&rdquo; is quite easy:</p>

<p><div class="highlight"><pre><code class="language-scala" data-lang="scala"><span class="k">implicit</span> <span class="k">object</span> <span class="nc">ObjectIdOK</span> <span class="k">extends</span> <span class="nc">ValidDateOrNumericType</span><span class="o">[</span><span class="kt">org.bson.</span><span class="k">type</span><span class="kt">s.ObjectId</span><span class="o">]</span></code></pre></div></p>

<p>As long as that is in scope of your code when you invoke your query statement (such as <code>"_id" $lt new ObjectId(timestamp)</code>) it will construct a valid query to send to MongoDB.</p>

<p>Of course, there is a lot more that we can do with Type Classes than mere filtering.  In my next post, I&rsquo;ll show you how to take decoupling and separation of concerns to the ultimate extreme using Type Classes.</p>
]]></content>
  </entry>
  
</feed>
