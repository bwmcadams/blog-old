<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: scala | Evil Monkey Labs]]></title>
  <link href="http://blog.evilmonkeylabs.com/categories/scala/atom.xml" rel="self"/>
  <link href="http://blog.evilmonkeylabs.com/"/>
  <updated>2015-04-13T12:09:56-07:00</updated>
  <id>http://blog.evilmonkeylabs.com/</id>
  <author>
    <name><![CDATA[Brendan McAdams]]></name>
    <email><![CDATA[bwmcadams@evilmonkeylabs.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[A Skeptic's Guide to scalaz' Gateway Drugs: Part 1 - Disjunctions]]></title>
    <link href="http://blog.evilmonkeylabs.com/2015/04/10/a-skeptics-guide-to-scalaz-part-1-disjunctions/"/>
    <updated>2015-04-10T15:41:37-07:00</updated>
    <id>http://blog.evilmonkeylabs.com/2015/04/10/a-skeptics-guide-to-scalaz-part-1-disjunctions</id>
    <content type="html"><![CDATA[<p><em>(This is Part 1 of a series of distillations of a presentation I&rsquo;ve been giving for the last year, <a href="http://slides.com/bwmcadams/scalaz-gateway-drugs">&ldquo;A Skeptic&rsquo;s Guide to scalaz&#8217; Gateway Drugs&rdquo;</a>. It is meant to provide an introduction to the core functionality of scalaz that a developer might find most useful, without going off the deep end.)</em></p>

<p>What is <code>scalaz</code> exactly? Well, at its core, <code>scalaz</code> is a functional programming library for Scala. It is intended to bring more functional programming concepts from languages like Haskell into Scala.</p>

<p>Until recently, I&rsquo;ve looked at <a href="https://github.com/scalaz/scalaz">scalaz</a> rather skeptically. As a self taught developer without any college or advanced mathematics training, I felt intimidated by what I saw. Long before I exited the ranks of rookie Scala programmer, I dabbled in Haskell a bit but left more confused than I started at.</p>

<p><img src="/images/clockwork-eyes.gif" alt="" /></p>

<p>So, tools like <code>scalaz</code> were a bit scary to me. Plus, &ldquo;what&rsquo;s wrong with the Scala standard library?&rdquo;. As it turns out, a lot. Let&rsquo;s look first at Scala&rsquo;s Either, and where we can improve upon it.</p>

<!--more-->


<p>Scala&rsquo;s builtin <a href="http://www.scala-lang.org/api/current/#scala.util.Either">Either</a> is a common construct used to indicate one of two conditions: Success or Error. These are, by convention, <code>Left</code> for Errors, and <code>Right</code> for Success. The concept is good, but there are some limits to interaction. By default, we cannot use it in a for comprehension:</p>

<pre><code class="scala">scala&gt; val success = Right("Success!")
success: scala.util.Right[Nothing,String] = Right(Success!)

scala&gt; success.isRight
res2: Boolean = true

scala&gt; success.isLeft
res3: Boolean = false

scala&gt; for {
       |   x &lt;- success
       | } yield x
       &lt;console&gt;:10: error: value map is not a member of scala.util.Right[Nothing,String]
                      x &lt;- success
                           ^
</code></pre>

<p><em>(Note, there is a function called <code>rightProjection</code> which converts an <code>Either</code> into something comprehendable)</em></p>

<p>In the <code>scalaz</code> world, there is a similar construct to <code>Either</code>, known as <code>\/</code>. If <code>\/</code> reads like a mouthful, you can call it Disjunction - which we&rsquo;ll do in this post as well. A Disjunction can, like in <code>Either</code> have either a Left or a Right side - typically representative of a Success (right) or an Error (left). These are represented by symbols: <code>-\/</code> for Left, <code>\/-</code> for Right.</p>

<p><em>(I find, in general, that the easiest memory trick is to look at which side of the Disjunction the <code>-</code> appears on.)</em></p>

<p>With Disjunctions, there is an assumption that we prefer Success (the right, or <code>\/-</code>) - this is also known as Right Bias. With Right Bias, for comprehensions, <code>map</code>, and <code>flatMap</code> unpack for us where &ldquo;success&rdquo; (<code>\/-</code>) continues and &ldquo;failure&rdquo; (<code>-\/</code>) aborts.</p>

<p>When declaring a return type of a Disjunction, you should generally prefer to use the Infix notation for clarity sake. That is to say:</p>

<pre><code class="scala">def query(arg: String): Error \/ Success
</code></pre>

<p>with the Infix notation for the return type, is preferable to this:</p>

<pre><code class="scala">def query(arg: String): \/[Error, Success]
</code></pre>

<p>the standard notation, which may not read as clearly.</p>

<p>As for declaring instances of Left or Right, there are a few options in <code>scalaz</code>. The first is postfix operators, <code>.left</code> and <code>.right</code>, which wrap an existing value in a Disjunction instance:</p>

<pre><code class="scala">import scalaz._
import Scalaz._

scala&gt; "Success!".right
res7: scalaz.\/[Nothing,String] = \/-(Success!)

scala&gt; "Failure!".left
res8: scalaz.\/[String,Nothing] = -\/(Failure!)
</code></pre>

<p>Alternately, we can use the Disjunction singleton instance instead:</p>

<pre><code class="scala">import scalaz._
import Scalaz._

scala&gt; \/.left("Failure!")
res10: scalaz.\/[String,Nothing] = -\/(Failure!)


scala&gt; \/.right("Success!")
res12: scalaz.\/[Nothing,String] = \/-(Success!)
</code></pre>

<p>which, by virtue of being more explicit, may be clearer to the reader.</p>

<p>Finally, we can construct instances of Left and Right directly:</p>

<pre><code class="scala">import scalaz._
import Scalaz._

scala&gt; -\/("Failure!")
res9: scalaz.-\/[String] = -\/(Failure!)

scala&gt; \/-("Success!")
res11: scalaz.\/-[String] = \/-(Success!)
</code></pre>

<p>Remember I talked about how we could comprehend over Disjunctions, and success continued while failure aborted?</p>

<p><img src="/images/shining-grinning.gif" alt="Here's Johnny?" /></p>

<p>Let&rsquo;s look at what that looks like with some sample data:</p>

<pre><code class="scala">
import scalaz._
import Scalaz._

val success1 = \/.right("This succeeded")

val success2 = \/.right("This succeeded also!")

val fail1 = \/.left("This failed miserably...")

val fail2 = \/.left("Oops :(")
</code></pre>

<p>We now have a couple of Disjunction instances we can use. If we comprehend over only Right, we get back an instance of Right.</p>

<pre><code class="scala">for {
  one &lt;- success1
  two &lt;- success2 
} yield (one, two)
/* res0: scalaz.\/[Nothing,(String, String)] = 
      \/-((This succeeded,This succeeded also!)) */
</code></pre>

<p>Since both instances we used were Right, we get back an instance of Right ( <code>\/-</code> ).</p>

<p>What if we include a Left in there?</p>

<pre><code class="scala">for {
  one &lt;- success1
  two &lt;- fail1  
  three &lt;- success2
} yield (one, three)
/* res1: scalaz.\/[String,(String, String)] = 
      -\/(This failed miserably...) */
</code></pre>

<p>The behavior here is much like with an <code>Option</code> instance of <code>None</code> (Which we&rsquo;ll talk about in the next post). When Scala encounters a &ldquo;failure&rdquo; - in this case a Left ( <code>-\/</code> ) - it aborts the iteration and returns an instance of the failure. This case means the <code>yield</code> never gets run. This can be valuable as an easy way to work with multiple Disjunctions all of which needed to be Right.</p>

<p>Now you&rsquo;ve had a (hopefully) gentle introduction to the world of <code>\/</code>. In the next part, we&rsquo;ll talk about using Scala&rsquo;s <code>Option</code> in conjunction with Disjunctions to better handle failure conditions with existing code.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pickling Case Classes to Memcached with Scala]]></title>
    <link href="http://blog.evilmonkeylabs.com/2015/03/23/Pickling_Case_Classes_to_Memcached/"/>
    <updated>2015-03-23T00:00:00-07:00</updated>
    <id>http://blog.evilmonkeylabs.com/2015/03/23/Pickling_Case_Classes_to_Memcached</id>
    <content type="html"><![CDATA[<p>Recently, I&rsquo;ve been working on a rewrite of <a href="http://www.sluggy.com">Sluggy Freelance</a> - a friend&rsquo;s site which I&rsquo;ve worked on for about a decade now. Caching is a big part of keeping site cost down, and over the years I&rsquo;ve come to trust <a href="http://memcached.org">Memcached</a>. Fast, lightweight, and easy, Memcached has served me well over the years over several iterations of the site&hellip; from Perl, PHP, and Python.</p>

<p>Today, I&rsquo;m rewriting the site in <a href="http://www.scala-lang.org">Scala</a> with <a href="http://www.scalatra.org">Scalatra</a> and <a href="http://facebook.github.io/react/">React.js</a>. As a result, I&rsquo;m discovering all sorts of new fun that I haven&rsquo;t dealt with in Scala yet. One of these is using Memcached, and specifically serialising/deserialising Case Classes. With the combination of a good Memcached library - <a href="http://github.com/alexandru/shade">shade</a>, in this case - and <a href="https://github.com/scala/pickling">Scala Pickling</a>*, I&rsquo;ve found a powerful combination.</p>

<p>So far, I&rsquo;m working with a datastructure representing navigation: the current book, chapter, and section as well as lists of others of those based on context. As a bonus&hellip; I&rsquo;m actually serialising case classes that are fetched from Slick.</p>

<!--more-->


<p>Here&rsquo;s the navigation structure:</p>

<p><div class="highlight"><pre><code class="language-scala" data-lang="scala"><span class="lineno">1</span> <span class="k">case</span> <span class="k">class</span> <span class="nc">NavigationStruct</span><span class="o">(</span>
<span class="lineno">2</span>   <span class="n">book</span><span class="k">:</span> <span class="kt">Book</span><span class="o">,</span>
<span class="lineno">3</span>   <span class="n">allBooks</span><span class="k">:</span> <span class="kt">Seq</span><span class="o">[</span><span class="kt">Book</span><span class="o">],</span>
<span class="lineno">4</span>   <span class="n">section</span><span class="k">:</span> <span class="kt">Section</span><span class="o">,</span>
<span class="lineno">5</span>   <span class="n">currentSections</span><span class="k">:</span> <span class="kt">Seq</span><span class="o">[</span><span class="kt">Section</span><span class="o">],</span>
<span class="lineno">6</span>   <span class="n">chapter</span><span class="k">:</span> <span class="kt">Chapter</span><span class="o">,</span>
<span class="lineno">7</span>   <span class="n">currentChapters</span><span class="k">:</span> <span class="kt">Seq</span><span class="o">[</span><span class="kt">Chapter</span><span class="o">]</span>
<span class="lineno">8</span> <span class="o">)</span></code></pre></div></p>

<p>We&rsquo;ll leave the content of <code>Book</code>, <code>Section</code>, and <code>Chapter</code> out, but suffice to say they are standard case classes made up of a variety of primitive fields and a few Joda <code>LocalDate</code>s for good measure.</p>

<p>Here are my imports, setting up memcached :</p>

<p><div class="highlight"><pre><code class="language-scala" data-lang="scala"><span class="lineno">1</span> <span class="k">import</span> <span class="nn">shade.memcached._</span>
<span class="lineno">2</span> <span class="c1">// shade uses futures so you&amp;rsquo;ll need the execution context</span>
<span class="lineno">3</span> <span class="k">import</span> <span class="nn">scala.concurrent.ExecutionContext.Implicits.</span><span class="o">{</span><span class="n">global</span> <span class="k">=&gt;</span> <span class="n">ec</span><span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
<span class="lineno">4</span> 
<span class="lineno">5</span> <span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span></code></pre></div></p>

<p>Now, given the topic of conversation what we need is two things:</p>

<ol>
<li>Code to convert a <code>NavigationStruct</code> case class to and from binary via pickling</li>
<li>Code to tell the shade memcached client how to convert scala data to and from memcached</li>
</ol>


<p>Luckily, we can combine these two things. shade provides a <code>Codec[T]</code> mechanism for encoding, into which we can wire our pickling. Here&rsquo;s a rough sketch of my <code>Codec[T]</code> for <code>NavigationStruct</code>:</p>

<p><div class="highlight"><pre><code class="language-scala" data-lang="scala"><span class="lineno">1</span> <span class="k">implicit</span> <span class="k">object</span> <span class="nc">NavStructCodec</span> <span class="k">extends</span> <span class="nc">Codec</span><span class="o">[</span><span class="kt">NavigationStruct</span><span class="o">]</span> <span class="o">{</span>
<span class="lineno">2</span>     <span class="k">def</span> <span class="n">serialize</span><span class="o">(</span><span class="n">struct</span><span class="k">:</span> <span class="kt">NavigationStruct</span><span class="o">)</span><span class="k">:</span> <span class="kt">Array</span><span class="o">[</span><span class="kt">Byte</span><span class="o">]</span> <span class="k">=</span>  <span class="o">???&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
<span class="lineno">3</span> 
<span class="lineno">4</span> <span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">def</span> <span class="n">deserialize</span><span class="o">(</span><span class="n">data</span><span class="k">:</span> <span class="kt">Array</span><span class="o">[</span><span class="kt">Byte</span><span class="o">])</span><span class="k">:</span> <span class="kt">NavigationStruct</span> <span class="o">=</span> <span class="o">???</span>
<span class="lineno">5</span> <span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
<span class="lineno">6</span> 
<span class="lineno">7</span> <span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
<span class="lineno">8</span> 
<span class="lineno">9</span> <span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span></code></pre></div></p>

<p>Our implicit <code>Codec[T]</code> object has two methods: <code>serialize(T): Array[Byte]</code> and <code>deserialize(Array[Byte]): T</code>. This is the shade memcached specific code: It leaves it up to us how we want to serialize/deserialize as long as we work with Arrays of bytes.</p>

<p>And so, in comes Scala pickling&hellip;
<div class="highlight"><pre><code class="language-scala" data-lang="scala"><span class="lineno">1</span> <span class="k">import</span> <span class="nn">scala.pickling.</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span>
<span class="lineno">2</span> <span class="k">import</span> <span class="nn">scala.pickling.Defaults.</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span>
<span class="lineno">3</span> <span class="k">import</span> <span class="nn">scala.pickling.binary._</span></code></pre></div>
 While I import <code>binary</code> support from Pickling, it is worth noting that there&rsquo;s also JSON Support built in as outlined in [the docs]](<a href="https://github.com/scala/pickling">https://github.com/scala/pickling</a>).</p>

<p> With the <code>scala.pickling.Defaults._</code> import comes a few implicits, which let us &ldquo;pickle&rdquo; (aka serialize) arbitrary objects:</p>

<p><div class="highlight"><pre><code class="language-scala" data-lang="scala"><span class="lineno">1</span> <span class="n">struct</span><span class="o">.</span><span class="n">pickle</span><span class="o">.</span><span class="n">value</span></code></pre></div></p>

<p>And &ldquo;unpickle&rdquo; (aka deserialize) from raw bytes back to something useful:
<div class="highlight"><pre><code class="language-scala" data-lang="scala"><span class="lineno">1</span> <span class="n">data</span><span class="o">.</span><span class="n">unpickle</span><span class="o">[</span><span class="kt">NavigationStruct</span><span class="o">]</span></code></pre></div></p>

<p>That&rsquo;s actually it, at least for my simple data structures. Here&rsquo;s the final implicit object:</p>

<p><div class="highlight"><pre><code class="language-scala" data-lang="scala"><span class="lineno"> 1</span> <span class="k">implicit</span> <span class="k">object</span> <span class="nc">NavStructCodec</span> <span class="k">extends</span> <span class="nc">Codec</span><span class="o">[</span><span class="kt">NavigationStruct</span><span class="o">]</span> <span class="o">{</span>
<span class="lineno"> 2</span>     <span class="k">def</span> <span class="n">serialize</span><span class="o">(</span><span class="n">struct</span><span class="k">:</span> <span class="kt">NavigationStruct</span><span class="o">)</span><span class="k">:</span> <span class="kt">Array</span><span class="o">[</span><span class="kt">Byte</span><span class="o">]</span> <span class="k">=</span> <span class="o">{</span>
<span class="lineno"> 3</span>       <span class="n">struct</span><span class="o">.</span><span class="n">pickle</span><span class="o">.</span><span class="n">value</span>
<span class="lineno"> 4</span>     <span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
<span class="lineno"> 5</span> 
<span class="lineno"> 6</span> <span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">def</span> <span class="n">deserialize</span><span class="o">(</span><span class="n">data</span><span class="k">:</span> <span class="kt">Array</span><span class="o">[</span><span class="kt">Byte</span><span class="o">])</span><span class="k">:</span> <span class="kt">NavigationStruct</span> <span class="o">=</span> <span class="o">{</span>
<span class="lineno"> 7</span>   <span class="n">data</span><span class="o">.</span><span class="n">unpickle</span><span class="o">[</span><span class="kt">NavigationStruct</span><span class="o">]</span>
<span class="lineno"> 8</span> <span class="o">}</span>
<span class="lineno"> 9</span> <span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
<span class="lineno">10</span> 
<span class="lineno">11</span> <span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="o">}</span></code></pre></div></p>

<p>This leaves me with an easy route to fetch/save between memcached, where codec handling is automatically taken care of:</p>

<p><div class="highlight"><pre><code class="language-scala" data-lang="scala"><span class="lineno">1</span> <span class="n">memcached</span><span class="o">.</span><span class="n">awaitGet</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;key&quot;</span><span class="o">&gt;</span><span class="nc">NavigationStruct</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;(</span><span class="nc">NavStructCodec</span><span class="o">)</span> <span class="k">match</span> <span class="o">{</span>
<span class="lineno">2</span>   <span class="k">case</span> <span class="nc">Some</span><span class="o">(</span><span class="n">navData</span><span class="o">)</span> <span class="k">=&gt;</span>
<span class="lineno">3</span>     <span class="n">navData</span>
<span class="lineno">4</span>   <span class="k">case</span> <span class="nc">None</span> <span class="k">=&gt;</span>
<span class="lineno">5</span>     <span class="k">val</span> <span class="n">nav</span> <span class="k">=</span> <span class="n">getNavigationData</span><span class="o">(</span><span class="n">date</span><span class="o">)</span>
<span class="lineno">6</span>     <span class="n">memcached</span><span class="o">.</span><span class="n">awaitSet</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="n">nav</span><span class="o">,</span> <span class="n">timeout</span><span class="o">)</span>
<span class="lineno">7</span>     <span class="n">nav</span>
<span class="lineno">8</span> <span class="o">}</span></code></pre></div></p>

<p>Suffice to say, I&rsquo;m quite happy with the simplicity.</p>

<p>* It&rsquo;s been mentioned to me as well that <a href="https://github.com/scodec/scodec">scodec</a> is a great solution for serialisation too, but I haven&rsquo;t yet gone down that road.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Distributing Akka Workloads - And Shutting Down Afterwards]]></title>
    <link href="http://blog.evilmonkeylabs.com/2013/01/17/Distributing_Akka_Workloads_And_Shutting_Down_After/"/>
    <updated>2013-01-17T00:00:00-08:00</updated>
    <id>http://blog.evilmonkeylabs.com/2013/01/17/Distributing_Akka_Workloads_And_Shutting_Down_After</id>
    <content type="html"><![CDATA[<p>Recently, as part of my role with the Professional Services team at <a href="http://typesafe.com">Typesafe</a>, I have been working on site at a customer who is using a lot of Akka and Play. During this time, I&rsquo;ve gotten a chance to solve some interesting problems and answer obscure questions&hellip; which for those who like chasing these kinds of puzzles issues (like myself) is a fantastic way to spend the day (<em>and if this kind of thing sounds exciting to you, we&rsquo;re aggressively hiring for <a href="http://blog.typesafe.com/send-akka-consultant-candidates-our-way-and-w">this kind of work</a> ;)</em> )</p>

<p>One item in particular came up recently as we tried to create a cron-style job to do interval data processing – big blocks of input data would be separated into individual instructions for processing, using <a href="http://doc.akka.io/docs/akka/2.0.5/">Akka 2.0.x</a>. The developer I was working with found that, among other things, using only a single actor to process all of their data items was not particularly performant. Further, once we solved this problem we couldn&rsquo;t figure out how to cleanly shut down Akka without interrupting any messages being processed. Fortunately, Akka offers simple answers to both of these problems&hellip; if you know where to look.</p>

<!--more-->


<p>By their nature, an Actor has a mailbox queueing all of the instructions sent to it, in order, and processes these messages one by one. In short, an individual actor is sequential, not parallel – performance is linear as we add more messages.</p>

<p><div class="highlight"><pre><code class="language-scala" data-lang="scala"><span class="lineno"> 1</span> <span class="k">package</span> <span class="nn">net.evilmonkeylabs.demo</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
<span class="lineno"> 2</span> 
<span class="lineno"> 3</span> <span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">import</span> <span class="nn">akka.actor.</span><span class="o">{</span><span class="nc">ActorSystem</span><span class="o">,</span> <span class="nc">Actor</span><span class="o">,</span> <span class="nc">Props</span><span class="o">}</span>
<span class="lineno"> 4</span> <span class="k">import</span> <span class="nn">akka.event.Logging</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
<span class="lineno"> 5</span> 
<span class="lineno"> 6</span> <span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">case</span> <span class="k">class</span> <span class="nc">Message</span><span class="o">(</span><span class="n">msg</span><span class="k">:</span> <span class="kt">String</span><span class="o">)&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
<span class="lineno"> 7</span> 
<span class="lineno"> 8</span> <span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">class</span> <span class="nc">SimpleActor</span> <span class="k">extends</span> <span class="nc">Actor</span> <span class="o">{</span>
<span class="lineno"> 9</span>   <span class="k">val</span> <span class="n">log</span> <span class="k">=</span> <span class="nc">Logging</span><span class="o">(</span><span class="n">context</span><span class="o">.</span><span class="n">system</span><span class="o">,</span> <span class="k">this</span><span class="o">)&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
<span class="lineno">10</span> 
<span class="lineno">11</span> <span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">def</span> <span class="n">receive</span> <span class="k">=</span> <span class="o">{</span>
<span class="lineno">12</span>     <span class="k">case</span> <span class="nc">Message</span><span class="o">(</span><span class="n">msg</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="n">log</span><span class="o">.</span><span class="n">info</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="nc">Got</span> <span class="n">a</span> <span class="n">valid</span> <span class="n">message</span><span class="k">:</span> <span class="kt">%s&amp;rdquo</span><span class="o">;.</span><span class="n">format</span><span class="o">(</span><span class="n">msg</span><span class="o">))</span>
<span class="lineno">13</span>     <span class="k">case</span> <span class="n">default</span> <span class="k">=&gt;</span> <span class="n">log</span><span class="o">.</span><span class="n">error</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="nc">Got</span> <span class="n">a</span> <span class="n">message</span> <span class="n">I</span> <span class="n">don</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="o">;</span><span class="n">t</span> <span class="n">understand</span><span class="o">.&amp;</span><span class="n">rdquo</span><span class="o">;)</span>
<span class="lineno">14</span>   <span class="o">}</span>
<span class="lineno">15</span> <span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
<span class="lineno">16</span> 
<span class="lineno">17</span> <span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">object</span> <span class="nc">SimpleMain</span> <span class="k">extends</span> <span class="nc">App</span> <span class="o">{</span>
<span class="lineno">18</span>   <span class="k">val</span> <span class="n">system</span> <span class="k">=</span> <span class="nc">ActorSystem</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="nc">SimpleSystem</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;)</span>
<span class="lineno">19</span>   <span class="k">val</span> <span class="n">simpleActor</span> <span class="k">=</span> <span class="n">system</span><span class="o">.</span><span class="n">actorOf</span><span class="o">(</span><span class="nc">Props</span><span class="o">[</span><span class="kt">SimpleActor</span><span class="o">],</span> <span class="n">name</span> <span class="k">=</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">simple</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;)&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
<span class="lineno">20</span> 
<span class="lineno">21</span> <span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">simpleActor</span> <span class="o">!</span> <span class="nc">Message</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="nc">Hello</span><span class="o">,</span> <span class="nc">Akka</span><span class="o">!&amp;</span><span class="n">rdquo</span><span class="o">;)</span> <span class="c1">// toss a message into our actor with the &amp;ldquo;!&amp;rdquo; send op</span>
<span class="lineno">22</span> <span class="o">}</span></code></pre></div></p>

<p>The obvious answer here is to spin up a <em>pool</em> of identical actors, all sharing the workload. While I seem to recall having to do a lot of custom work back in the early days of Pre-1.0 Akka, this is now <em>tremendously</em> easy to accomplish in Akka 2.0+, by the magic of <a href="http://doc.akka.io/docs/akka/2.0.5/scala/routing.html">Akka Routing</a>.</p>

<p>You may ask, just what is a Router in Akka? In simple terms, a Router is an Actor which proxies (and by its nature, <a href="http://doc.akka.io/docs/akka/2.0.5/scala/fault-tolerance.html">supervises</a>) the mailbox for one or more child actors (Which I&rsquo;ll refer to as &lsquo;Routees&rsquo; where possible), and routes messages to them with custom behavior. Akka provides a number of predefined Routers, and most of these are designed to have many child actors (aka &lsquo;routees&rsquo;) and forward a single inbound message to only <em>one</em> of these routees – though there are also several Routers which broadcast to all, including the very useful <a href="http://doc.akka.io/docs/akka/2.0.5/scala/routing.html#ScatterGatherFirstCompletedRouter"><code>ScatterGatherFirstCompletedRouter</code></a> (the use of which I&rsquo;ll cover in a future post).</p>

<p>In our case, what we wanted was several copies of the same actor, working together, but with a given message processed <em>only once</em> – so we aren&rsquo;t worried about Broadcast style routers for now. For this kind of task, there are two built-in router types that I would reach for personally: <a href="http://doc.akka.io/docs/akka/2.0.5/scala/routing.html#RoundRobinRouter"><code>RoundRobinRouter</code></a>, and <a href="http://doc.akka.io/docs/akka/2.0.5/scala/routing.html#SmallestMailboxRouter"><code>SmallestMailboxRouter</code></a>. The astute reader may also note the existence of a <a href="http://doc.akka.io/docs/akka/2.0.5/scala/routing.html#RandomRouter"><code>RandomRouter</code></a> – but my  background makes me somewhat wary of Random distribution of workload due to fear of <a href="http://en.wikipedia.org/wiki/Hot_spot_(computer_science)">hot spotting</a>.</p>

<p>The <code>RoundRobinRouter</code> and <code>SmallestMailboxRouter</code> are well suited for our needs here, so let&rsquo;s look at those. <code>RoundRobinRouter</code> sends the messages one by one through the list of routees – A, B, C, D then A, B, C, D again and so on. By contrasts, the <code>SmallestMailboxRouter</code> routes messages to the routee with the least messages currently in its queue, so that if one is running faster than others for some reason he can do some extra work. While this behavior is admirable for a more complex system, let&rsquo;s keep things simple in our example. We&rsquo;re going to use the <code>RoundRobinRouter</code> for these examples, as it gives us some predictable &amp; well defined behavior to work with. Spinning up a router on top of an actor – and having it automatically spin up duplicates of that actor to route to - is a fairly straightforward process in Akka. We can leave our existing <code>SimpleActor</code> in place, and just change how we set it up.</p>

<p><div class="highlight"><pre><code class="language-scala" data-lang="scala"><span class="lineno"> 1</span> <span class="k">import</span> <span class="nn">akka.routing.RoundRobinRouter</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
<span class="lineno"> 2</span> 
<span class="lineno"> 3</span> <span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">object</span> <span class="nc">SimpleRouterSetup</span> <span class="k">extends</span> <span class="nc">App</span> <span class="o">{</span>
<span class="lineno"> 4</span>   <span class="k">val</span> <span class="n">system</span> <span class="k">=</span> <span class="nc">ActorSystem</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="nc">SimpleSystem</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;)</span>
<span class="lineno"> 5</span>   <span class="k">val</span> <span class="n">simpleRouted</span> <span class="k">=</span> <span class="n">system</span><span class="o">.</span><span class="n">actorOf</span><span class="o">(</span><span class="nc">Props</span><span class="o">[</span><span class="kt">SimpleActor</span><span class="o">].</span><span class="n">withRouter</span><span class="o">(</span>
<span class="lineno"> 6</span>                         <span class="nc">RoundRobinRouter</span><span class="o">(</span><span class="n">nrOfInstances</span> <span class="k">=</span> <span class="mi">10</span><span class="o">)</span>
<span class="lineno"> 7</span>                      <span class="o">),</span> <span class="n">name</span> <span class="k">=</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">simpleRoutedActor</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;)&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
<span class="lineno"> 8</span> 
<span class="lineno"> 9</span> <span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">for</span> <span class="o">(</span><span class="n">n</span> <span class="o">&amp;</span><span class="n">lt</span><span class="o">;-</span> <span class="mi">1</span> <span class="n">until</span> <span class="mi">10</span><span class="o">)</span>  <span class="n">simpleRouted</span> <span class="o">!</span> <span class="nc">Message</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="nc">Hello</span><span class="o">,</span> <span class="nc">Akka</span> <span class="o">#%</span><span class="n">d</span><span class="o">!&amp;</span><span class="n">rdquo</span><span class="o">;.</span><span class="n">format</span><span class="o">(</span><span class="n">n</span><span class="o">))</span>
<span class="lineno">10</span> <span class="o">}</span></code></pre></div></p>

<p>Note the addition of a call to the <code>withRouter()</code> method on our <code>Props[ActorName]</code> declaration. Where a normal <code>Props[ActorName]</code> call sets up a single Actor, <code>withRouter()</code> will return us a Router with <code>nrOfInstances</code> child actors.  Here, we&rsquo;ve setup a <code>RoundRobinRouter</code> with 10 routees; if we look at the output of running this new <code>SimpleRouterSetup</code>, we&rsquo;ll see our log entries have several different actor IDs in them:</p>

<p><div class="highlight"><pre><code class="language-text" data-lang="text">[INFO] [01/17/2013 15:32:51.897] [SimpleSystem-akka.actor.default-dispatcher-7] [akka://SimpleSystem/user/simpleRoutedActor/$f] Got a valid message: Hello, Akka #6!
[INFO] [01/17/2013 15:32:51.900] [SimpleSystem-akka.actor.default-dispatcher-8] [akka://SimpleSystem/user/simpleRoutedActor/$e] Got a valid message: Hello, Akka #5!
[INFO] [01/17/2013 15:32:51.900] [SimpleSystem-akka.actor.default-dispatcher-13] [akka://SimpleSystem/user/simpleRoutedActor/$d] Got a valid message: Hello, Akka #4!</code></pre></div></p>

<p>With the previous example, we were very specific in our setup code – hardcoding the type of router we want as well as the number of routee actor instances. Hardcoding is rarely a good idea, and as such Akka also offers an easy way to make this externally configurable. We can change our router instantiation to read from the config instead:</p>

<p><div class="highlight"><pre><code class="language-scala" data-lang="scala"><span class="lineno">1</span> <span class="k">import</span> <span class="nn">akka.routing.</span><span class="o">{</span><span class="nc">FromConfig</span><span class="o">,</span> <span class="nc">RoundRobinRouter</span><span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
<span class="lineno">2</span> 
<span class="lineno">3</span> <span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">object</span> <span class="nc">SimpleFileConfiggedRouterSetup</span> <span class="k">extends</span> <span class="nc">App</span> <span class="o">{</span>
<span class="lineno">4</span>   <span class="k">val</span> <span class="n">system</span> <span class="k">=</span> <span class="nc">ActorSystem</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="nc">SimpleSystem</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;)</span>
<span class="lineno">5</span>   <span class="k">val</span> <span class="n">simpleRouted</span> <span class="k">=</span> <span class="n">system</span><span class="o">.</span><span class="n">actorOf</span><span class="o">(</span><span class="nc">Props</span><span class="o">[</span><span class="kt">SimpleActor</span><span class="o">].</span><span class="n">withRouter</span><span class="o">(</span><span class="nc">FromConfig</span><span class="o">()),</span>
<span class="lineno">6</span>                                     <span class="n">name</span> <span class="k">=</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">simpleRoutedActor</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;)&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
<span class="lineno">7</span> 
<span class="lineno">8</span> <span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">for</span> <span class="o">(</span><span class="n">n</span> <span class="o">&amp;</span><span class="n">lt</span><span class="o">;-</span> <span class="mi">1</span> <span class="n">until</span> <span class="mi">10</span><span class="o">)</span>  <span class="n">simpleRouted</span> <span class="o">!</span> <span class="nc">Message</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="nc">Hello</span><span class="o">,</span> <span class="nc">Akka</span> <span class="o">#%</span><span class="n">d</span><span class="o">!&amp;</span><span class="n">rdquo</span><span class="o">;.</span><span class="n">format</span><span class="o">(</span><span class="n">n</span><span class="o">))</span>
<span class="lineno">9</span> <span class="o">}</span></code></pre></div></p>

<p>We&rsquo;ve replaced our explicit instantiation of a <code>RoundRobinRouter</code> here with a call to <code>FromConfig()</code>, which tells Akka to find a matching configuration entry with the router setup details.  From here, we then just need to add an entry to our Akka configuration, in the <code>deployment</code> block, with the name we gave our Router:</p>

<p><div class="highlight"><pre><code class="language-scala" data-lang="scala"><span class="n">deployment</span> <span class="o">{</span>
    <span class="o">/</span><span class="n">simpleRoutedActor</span> <span class="o">{</span>
        <span class="n">router</span> <span class="k">=</span> <span class="n">round</span><span class="o">-</span><span class="n">robin</span>
        <span class="n">nr</span><span class="o">-</span><span class="n">of</span><span class="o">-</span><span class="n">instances</span> <span class="k">=</span> <span class="mi">5</span>
    <span class="o">}</span>
<span class="o">}</span></code></pre></div></p>

<p>Now we have an instance of <code>RoundRobinRouter</code>, spinning up and managing 5 identical copies of our <code>SimpleActor</code> – and we can swap out the router type or even raise &amp; lower the number of routees easily from our configuration. From our standpoint as a programmer, the <code>ActorRef</code> we get back from our router initialization is fairly transparent – messages we send to it get routed automatically to a routee, and replies can come back from those actors as well. This behavior is a boon for us, as it means we can begin sending messages to the router without worrying about any special instructions.</p>

<p>Great! We now have a system for distributing our load. If we were feeling particularly adventurous, we could even combine routers with remote actors&hellip; but that&rsquo;s a different post, for another day.</p>

<h2>Cleaning Up After Ourselves</h2>

<p>Here&rsquo;s the part where we once again got stuck. Because we were building a cron job that was meant to run every once in awhile, do its work and then shut down, we found ourselves at odds with Akka&rsquo;s behavior. In order to enable it to run as a daemon and run over long periods of time processing messages at potentially unreliable intervals, Akka&rsquo;s <a href="http://doc.akka.io/docs/akka/2.0.5/general/actor-systems.html"><code>ActorSystem</code></a> starts up a pool of threads. This <code>ActorSystem</code> and its threads continue running – even after our <code>main</code> method completes and we expect exit.  For many types of applications this is ideal, as we want to run continuously; for a cron job however, we want to shut down when our work is done.</p>

<p>The first thought you have might be &ldquo;Well, just throw in a <code>System.exit()</code> call!&rdquo;. Lest we forget, Actors are worked with asynchronously - we are not blocking while we wait for their actions to complete. We can demonstrate that quickly with a  block of code to interact with our Actors. Let&rsquo;s have our Actors print a message when they receive it, but also print as soon as our loop that sends messages <em>to</em> the actors completes.</p>

<p><div class="highlight"><pre><code class="language-scala" data-lang="scala"><span class="lineno">1</span> <span class="k">for</span> <span class="o">(</span><span class="n">n</span> <span class="o">&amp;</span><span class="n">lt</span><span class="o">;-</span> <span class="mi">1</span> <span class="n">until</span> <span class="mi">100</span><span class="o">)</span>  <span class="n">simpleRouted</span> <span class="o">!</span> <span class="nc">Message</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="nc">Hello</span><span class="o">,</span> <span class="nc">Akka</span> <span class="o">#%</span><span class="n">d</span><span class="o">!&amp;</span><span class="n">rdquo</span><span class="o">;.</span><span class="n">format</span><span class="o">(</span><span class="n">n</span><span class="o">))&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
<span class="lineno">2</span> 
<span class="lineno">3</span> <span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="nc">System</span><span class="o">.</span><span class="n">err</span><span class="o">.</span><span class="n">println</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="nc">Finished</span> <span class="n">sending</span> <span class="n">messages</span> <span class="n">to</span> <span class="nc">Router</span><span class="o">.&amp;</span><span class="n">rdquo</span><span class="o">;)</span></code></pre></div>
You might have expected a more sequential behavior out of this code, where everything went in order, such as:</p>

<p><div class="highlight"><pre><code class="language-scala" data-lang="scala"><span class="nc">Got</span> <span class="n">a</span> <span class="n">valid</span> <span class="n">message</span><span class="k">:</span> <span class="kt">Hello</span><span class="o">,</span> <span class="nc">Akka</span> <span class="k">#</span><span class="mi">2</span>
<span class="nc">Got</span> <span class="n">a</span> <span class="n">valid</span> <span class="n">message</span><span class="k">:</span> <span class="kt">Hello</span><span class="o">,</span> <span class="nc">Akka</span> <span class="k">#</span><span class="mi">3</span>
<span class="nc">Got</span> <span class="n">a</span> <span class="n">valid</span> <span class="n">message</span><span class="k">:</span> <span class="kt">Hello</span><span class="o">,</span> <span class="nc">Akka</span> <span class="k">#</span><span class="mi">4</span>
    <span class="o">&amp;</span><span class="n">hellip</span><span class="o">;</span>
<span class="nc">Got</span> <span class="n">a</span> <span class="n">valid</span> <span class="n">message</span><span class="k">:</span> <span class="kt">Hello</span><span class="o">,</span> <span class="nc">Akka</span> <span class="k">#</span><span class="mi">98</span>
<span class="nc">Got</span> <span class="n">a</span> <span class="n">valid</span> <span class="n">message</span><span class="k">:</span> <span class="kt">Hello</span><span class="o">,</span> <span class="nc">Akka</span> <span class="k">#</span><span class="mi">99</span>
<span class="nc">Got</span> <span class="n">a</span> <span class="n">valid</span> <span class="n">message</span><span class="k">:</span> <span class="kt">Hello</span><span class="o">,</span> <span class="nc">Akka</span> <span class="k">#</span><span class="mi">100</span>
<span class="nc">Finished</span> <span class="n">sending</span> <span class="n">messages</span> <span class="n">to</span> <span class="nc">Router</span><span class="o">.</span></code></pre></div></p>

<p>Unfortunately, things don&rsquo;t work <em>quite</em> this way – the invocation to send a message to an Actor is asynchronous and returns immediately, not waiting for the Actor to process our message. Which means we probably saw our &ldquo;Finished Sending&rdquo; notification well before all of &ldquo;Got a valid message&rdquo; printouts. Herein lies our problem – if we force a <code>System.exit()</code> as soon as all of our messages are sent, we will shut down before the processing is done (especially if we are doing something involved like a database operation inside the actor).</p>

<p>Similarly, if instead of System.exit, we were force the <code>ActorSystem</code> to shutdown, we would hit a problem. When the <code>ActorSystem</code> is shut off, Akka will not wait for all queued messages to be processed, and instead begins shutting all Actors down as soon as they finish their <em>current</em> message. Despite our progress with routers, this shutdown behavior is less than ideal for our purposes. Thankfully, there <em>is</em> a solution - but first, let&rsquo;s step back and take a quick look at how we shut down a single actor.</p>

<h3>Poisoning Actors (No, not Wallace Shawn)</h3>

<p><img src="http://blog.evilmonkeylabs.com/images/princess_bride_poison.jpg"/></p>

<p>In order to facilitate the concept of &ldquo;Finish what you are doing, and then shut down&rdquo; with Actors, Akka offers <code>akka.actor.PoisonPill</code>. As a baked in, default behavior, all Akka Actors will automatically handle a <code>PoisonPill</code> message as an instruction to shut down. To use a <code>PoisonPill</code>, we send it to the actor <em>like any other message</em>. Because of this, it will enter the Actor&rsquo;s mailbox and only be processed when it is dequeued.  So if we load 10,000 &ldquo;Do a task&rdquo; messages to an Actor and then send a <code>PoisonPill</code>, we can rightly expect our tasks to complete before the Actor shuts down. This behavior is baked into the default receive handler of all Akka Actors:</p>

<p><div class="highlight"><pre><code class="language-scala" data-lang="scala"><span class="k">case</span> <span class="nc">PoisonPill</span>               <span class="k">⇒</span> <span class="n">self</span><span class="o">.</span><span class="n">stop</span><span class="o">()</span></code></pre></div></p>

<p>Let&rsquo;s take a brief look at what happens when we use this <code>PoisonPill</code> with a single Actor, before taking a look at Routers:</p>

<p><div class="highlight"><pre><code class="language-scala" data-lang="scala"><span class="lineno"> 1</span> <span class="k">import</span> <span class="nn">akka.actor.PoisonPill</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
<span class="lineno"> 2</span> 
<span class="lineno"> 3</span> <span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">object</span> <span class="nc">SimplePoisoner</span> <span class="k">extends</span> <span class="nc">App</span> <span class="o">{</span>
<span class="lineno"> 4</span>   <span class="k">val</span> <span class="n">system</span> <span class="k">=</span> <span class="nc">ActorSystem</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="nc">SimpleSystem</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;)</span>
<span class="lineno"> 5</span>   <span class="k">val</span> <span class="n">simpleActor</span> <span class="k">=</span> <span class="n">system</span><span class="o">.</span><span class="n">actorOf</span><span class="o">(</span><span class="nc">Props</span><span class="o">[</span><span class="kt">SimpleActor</span><span class="o">],</span> <span class="n">name</span> <span class="k">=</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">simple</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;)&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
<span class="lineno"> 6</span> 
<span class="lineno"> 7</span> <span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">simpleActor</span> <span class="o">!</span> <span class="nc">Message</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="nc">Hello</span><span class="o">,</span> <span class="nc">Akka</span><span class="o">!&amp;</span><span class="n">rdquo</span><span class="o">;)</span>
<span class="lineno"> 8</span>   <span class="n">simpleActor</span> <span class="o">!</span> <span class="nc">PoisonPill</span>
<span class="lineno"> 9</span>   <span class="n">simpleActor</span> <span class="o">!</span> <span class="nc">Message</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="nc">Boy</span><span class="o">,</span> <span class="n">that</span> <span class="n">was</span> <span class="n">some</span> <span class="n">tasty</span> <span class="n">arsenic</span><span class="o">!&amp;</span><span class="n">rdquo</span><span class="o">;)</span>
<span class="lineno">10</span> <span class="o">}</span></code></pre></div></p>

<p>If we run this code, we&rsquo;ll note that after the <code>PoisonPill</code> is sent additional messages sent to the actor disappear, as the target Actor has gone away. But what would happen if we tried this with Routers in play?</p>

<p>Unfortunately,  when sent to a Router, <code>PoisonPill</code> behaves quite differently from many users&#8217; expectations – as it is treated differently than normal messages to a router. Because of the way that default &ldquo;Handle a <code>PoisonPill</code>&rdquo; behavior is baked into all Actors (of which Routers are), Routers <em>do not</em> forward a <code>PoisonPill</code> to their routees, but instead take it as an instruction directed at themselves.</p>

<p>This behavior can be surprising at first, especially because shutting an Actor down <em>also shuts down all of its children</em>, allowing the children only to continue processing their current message. Again, we find behavior contrary to what we might want.</p>

<h3>Broadcasting to Akka Routers</h3>

<p>Still determined to solve our shutdown problem, what we want to try now is ask each Actor that is routed to shut itself down <em>after its entire queue is processed</em>. A nice side effect of this is that when all of a Router&rsquo;s children shut down, the Router shuts itself down too. While the Routers we are currently using only route a message to a single Actor, it is possible to broadcast a message to all routees - using a special case class <code>akka.routing.Broadcast</code>.  When a Router receives a <code>Broadcast</code>, it unwraps the message contained within and forwards that message to <em>every Actor it is routing for</em>.</p>

<p><div class="highlight"><pre><code class="language-scala" data-lang="scala"><span class="lineno">1</span> <span class="k">import</span> <span class="nn">akka.routing.Broadcast</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
<span class="lineno">2</span> 
<span class="lineno">3</span> <span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">simpleRouter</span> <span class="o">!</span> <span class="nc">Broadcast</span><span class="o">(</span><span class="nc">Message</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">I</span> <span class="n">will</span> <span class="n">not</span> <span class="n">buy</span> <span class="k">this</span> <span class="n">record</span><span class="o">,</span> <span class="n">it</span> <span class="n">is</span> <span class="n">scratched</span><span class="o">!&amp;</span><span class="n">rdquo</span><span class="o">;))</span></code></pre></div></p>

<p>When running this code, we will see every actor in our Router setup repeat the message, &ldquo;I will not buy this record, it is scratched!&rdquo;. Because the Router does not look at the message being broadcast once unwrapped, his trick works effectively for our task:</p>

<p><div class="highlight"><pre><code class="language-scala" data-lang="scala"><span class="lineno">1</span> <span class="k">for</span> <span class="o">(</span><span class="n">n</span> <span class="o">&amp;</span><span class="n">lt</span><span class="o">;-</span> <span class="mi">1</span> <span class="n">until</span> <span class="mi">10</span><span class="o">)</span>  <span class="n">simpleRouter</span> <span class="o">!</span> <span class="nc">Message</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="nc">Hello</span><span class="o">,</span> <span class="nc">Akka</span> <span class="o">#%</span><span class="n">d</span><span class="o">!&amp;</span><span class="n">rdquo</span><span class="o">;.</span><span class="n">format</span><span class="o">(</span><span class="n">n</span><span class="o">))</span>
<span class="lineno">2</span> <span class="n">simpleRouter</span> <span class="o">!</span> <span class="nc">Broadcast</span><span class="o">(</span><span class="nc">PoisonPill</span><span class="o">)</span>
<span class="lineno">3</span> <span class="n">simpleRouter</span> <span class="o">!</span> <span class="nc">Message</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="nc">Hello</span><span class="o">?</span> <span class="nc">You</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="o">;</span><span class="n">re</span> <span class="n">looking</span> <span class="n">a</span> <span class="n">little</span> <span class="n">green</span> <span class="n">around</span> <span class="n">the</span> <span class="n">gills</span><span class="o">&amp;</span><span class="n">hellip</span><span class="o">;&amp;</span><span class="n">rdquo</span><span class="o">;)</span> <span class="c1">// never gets read&lt;/p&gt;</span>
<span class="lineno">4</span> 
<span class="lineno">5</span> <span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span></code></pre></div></p>

<p>Great! Our Actors are now getting a correct command to shutdown, and allowing the Router above them to shut down gracefully too. We have timed this messaging to allow our full workload to complete before the shutdown, as well.</p>

<p>But&hellip; there&rsquo;s one more problem. If we look at our last block of code and run it, you might notice that the program <em>does not shut down</em>. This is because the <code>ActorSystem</code> remains running, and will not automatically shut itself down. We must instruct it to do so, but now we are back to our original problem – timing.</p>

<p>The best way that I have found to handle this problem is to take advantage of Akka&rsquo;s <a href="http://doc.akka.io/docs/akka/2.0.5/scala/actors.html#Lifecycle_Monitoring_aka_DeathWatch">Lifecycle Monitoring</a>, which allows us to create an actor who listens for notices that Actors have terminated. We need merely notify Akka that we&rsquo;d like to hear about Terminations of a particular actor, and begin listening for those notices.</p>

<p>Since Akka will automatically shut down a Router when all of its routees have terminated, we should (rightly) expect a &ldquo;Router Terminated&rdquo; event soon after broadcasting a <code>PoisonPill</code> to our routees.</p>

<p>Here&rsquo;s a rough sketch of an &ldquo;Overwatch&rdquo; actor, who asks for Akka to watch two other actors (One our router, the other a simple actor we won&rsquo;t shutdown for), and when it sees the Router terminate, shuts down the <code>ActorSystem</code>:</p>

<p><div class="highlight"><pre><code class="language-scala" data-lang="scala"><span class="lineno"> 1</span> <span class="k">class</span> <span class="nc">SystemKillingRouterOverwatch</span> <span class="k">extends</span> <span class="nc">Actor</span> <span class="o">{</span>
<span class="lineno"> 2</span>   <span class="k">val</span> <span class="n">log</span> <span class="k">=</span> <span class="nc">Logging</span><span class="o">(</span><span class="n">context</span><span class="o">.</span><span class="n">system</span><span class="o">,</span> <span class="k">this</span><span class="o">)&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
<span class="lineno"> 3</span> 
<span class="lineno"> 4</span> <span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">val</span> <span class="n">simpleRouter</span> <span class="k">=</span> <span class="n">context</span><span class="o">.</span><span class="n">actorOf</span><span class="o">(</span><span class="nc">Props</span><span class="o">[</span><span class="kt">SimpleActor</span><span class="o">].</span><span class="n">withRouter</span><span class="o">(</span><span class="nc">FromConfig</span><span class="o">()),</span>
<span class="lineno"> 5</span>                                      <span class="n">name</span> <span class="k">=</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">simpleRoutedActor</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;)&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
<span class="lineno"> 6</span> 
<span class="lineno"> 7</span> <span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">val</span> <span class="n">simpleActor</span> <span class="k">=</span> <span class="n">context</span><span class="o">.</span><span class="n">actorOf</span><span class="o">(</span><span class="nc">Props</span><span class="o">[</span><span class="kt">SimpleActor</span><span class="o">],</span> <span class="n">name</span> <span class="k">=</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">simpleActor</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;)&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
<span class="lineno"> 8</span> 
<span class="lineno"> 9</span> <span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="c1">// Setup our other two actors, so we supervise</span>
<span class="lineno">10</span>   <span class="n">context</span><span class="o">.</span><span class="n">watch</span><span class="o">(</span><span class="n">simpleRouter</span><span class="o">)</span>
<span class="lineno">11</span>   <span class="n">context</span><span class="o">.</span><span class="n">watch</span><span class="o">(</span><span class="n">simpleActor</span><span class="o">)&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
<span class="lineno">12</span> 
<span class="lineno">13</span> <span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">def</span> <span class="n">receive</span> <span class="k">=</span> <span class="o">{</span>
<span class="lineno">14</span>     <span class="k">case</span> <span class="nc">Terminated</span><span class="o">(</span><span class="n">corpse</span><span class="o">)</span> <span class="k">=&gt;</span>
<span class="lineno">15</span>       <span class="k">if</span> <span class="o">(</span><span class="n">corpse</span> <span class="o">==</span> <span class="n">simpleRouter</span><span class="o">)</span> <span class="o">{</span>
<span class="lineno">16</span>         <span class="n">log</span><span class="o">.</span><span class="n">warning</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="nc">Received</span> <span class="n">termination</span> <span class="n">notification</span> <span class="k">for</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="o">;&amp;</span><span class="n">rdquo</span><span class="o">;</span> <span class="o">+</span> <span class="n">corpse</span> <span class="o">+</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;&amp;</span><span class="n">rsquo</span><span class="o">;,&amp;</span><span class="n">rdquo</span><span class="o">;</span> <span class="o">+</span>
<span class="lineno">17</span>           <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">is</span> <span class="n">in</span> <span class="n">our</span> <span class="n">watch</span> <span class="n">list</span><span class="o">.</span> <span class="nc">Terminating</span> <span class="nc">ActorSystem</span><span class="o">.&amp;</span><span class="n">rdquo</span><span class="o">;)</span>
<span class="lineno">18</span>         <span class="nc">RoutedPoisonerWithShutdown</span><span class="o">.</span><span class="n">system</span><span class="o">.</span><span class="n">shutdown</span><span class="o">()</span>
<span class="lineno">19</span>       <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
<span class="lineno">20</span>         <span class="n">log</span><span class="o">.</span><span class="n">info</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="nc">Received</span> <span class="n">termination</span> <span class="n">notification</span> <span class="k">for</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="o">;&amp;</span><span class="n">rdquo</span><span class="o">;</span> <span class="o">+</span> <span class="n">corpse</span> <span class="o">+</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;&amp;</span><span class="n">rsquo</span><span class="o">;,&amp;</span><span class="n">rdquo</span><span class="o">;</span> <span class="o">+</span>
<span class="lineno">21</span>           <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">which</span> <span class="n">is</span> <span class="n">not</span> <span class="n">in</span> <span class="n">our</span> <span class="n">deathwatch</span> <span class="n">list</span><span class="o">.&amp;</span><span class="n">rdquo</span><span class="o">;.</span><span class="n">format</span><span class="o">(</span><span class="n">corpse</span><span class="o">))</span>
<span class="lineno">22</span>       <span class="o">}</span>
<span class="lineno">23</span>   <span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
<span class="lineno">24</span> 
<span class="lineno">25</span> <span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span></code></pre></div></p>

<p>During the startup of the Actor , we setup our other two actors (automatically making us their supervisor) and ask for Akka to <code>watch()</code> them. In the case that we see a <code>Terminated</code> message, which will contain an <code>ActorRef</code>, we compare the <code>corpse</code>&rsquo;s body; if it is the Router, we shutdown the <code>ActorSystem</code>. If not, we can keep on going.</p>

<p>Within the <code>SystemKillingRouterOverwatch</code>, below <code>receive()</code>, we&rsquo;ve also added code to run through the test routines, which are just a tweak of what we&rsquo;ve been building already, including poisoning an extra Actor to test termination:</p>

<p><div class="highlight"><pre><code class="language-scala" data-lang="scala"><span class="lineno"> 1</span> <span class="k">def</span> <span class="n">receive</span> <span class="k">=</span> <span class="c1">// &amp;hellip;&lt;/p&gt;</span>
<span class="lineno"> 2</span> 
<span class="lineno"> 3</span> <span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">simpleRouter</span> <span class="o">!</span> <span class="nc">Broadcast</span><span class="o">(</span><span class="nc">Message</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">I</span> <span class="n">will</span> <span class="n">not</span> <span class="n">buy</span> <span class="k">this</span> <span class="n">record</span><span class="o">,</span> <span class="n">it</span> <span class="n">is</span> <span class="n">scratched</span><span class="o">!&amp;</span><span class="n">rdquo</span><span class="o">;))&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
<span class="lineno"> 4</span> 
<span class="lineno"> 5</span> <span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">simpleActor</span> <span class="o">!</span> <span class="nc">Message</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="nc">If</span> <span class="n">there</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="o">;</span><span class="n">s</span> <span class="n">any</span> <span class="n">more</span> <span class="n">stock</span> <span class="n">film</span> <span class="n">of</span> <span class="n">women</span> <span class="n">applauding</span><span class="o">,</span> <span class="n">I</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="o">;</span><span class="n">ll</span> <span class="n">clear</span> <span class="n">the</span> <span class="n">court</span><span class="o">.&amp;</span><span class="n">rdquo</span><span class="o">;)&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
<span class="lineno"> 6</span> 
<span class="lineno"> 7</span> <span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">simpleActor</span> <span class="o">!</span> <span class="nc">PoisonPill</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
<span class="lineno"> 8</span> 
<span class="lineno"> 9</span> <span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">for</span> <span class="o">(</span><span class="n">n</span> <span class="o">&amp;</span><span class="n">lt</span><span class="o">;-</span> <span class="mi">1</span> <span class="n">until</span> <span class="mi">10</span><span class="o">)</span> <span class="n">simpleRouter</span> <span class="o">!</span> <span class="nc">Message</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="nc">Hello</span><span class="o">,</span> <span class="nc">Akka</span> <span class="o">#%</span><span class="n">d</span><span class="o">!&amp;</span><span class="n">rdquo</span><span class="o">;.</span><span class="n">format</span><span class="o">(</span><span class="n">n</span><span class="o">))</span>
<span class="lineno">10</span> <span class="n">simpleRouter</span> <span class="o">!</span> <span class="nc">Broadcast</span><span class="o">(</span><span class="nc">PoisonPill</span><span class="o">)</span>
<span class="lineno">11</span> <span class="n">simpleRouter</span> <span class="o">!</span> <span class="nc">Message</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="nc">Hello</span><span class="o">?</span> <span class="nc">You</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="o">;</span><span class="n">re</span> <span class="n">looking</span> <span class="n">a</span> <span class="n">little</span> <span class="n">green</span> <span class="n">around</span> <span class="n">the</span> <span class="n">gills</span><span class="o">&amp;</span><span class="n">hellip</span><span class="o">;&amp;</span><span class="n">rdquo</span><span class="o">;)</span> <span class="c1">// never gets read</span>
<span class="lineno">12</span> <span class="o">}</span></code></pre></div></p>

<p>The body of our <code>main</code> method is now just a startup of our <code>ActorSystem</code> and the overwatch actor
<div class="highlight"><pre><code class="language-scala" data-lang="scala"><span class="lineno">1</span> <span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
<span class="lineno">2</span> 
<span class="lineno">3</span> <span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">object</span> <span class="nc">RoutedPoisonerWithShutdown</span> <span class="k">extends</span> <span class="nc">App</span> <span class="o">{</span>
<span class="lineno">4</span>   <span class="k">val</span> <span class="n">system</span> <span class="k">=</span> <span class="nc">ActorSystem</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="nc">SimpleSystem</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;)</span>
<span class="lineno">5</span>   <span class="k">val</span> <span class="n">overwatch</span> <span class="k">=</span> <span class="n">system</span><span class="o">.</span><span class="n">actorOf</span><span class="o">(</span><span class="nc">Props</span><span class="o">[</span><span class="kt">SystemKillingRouterOverwatch</span><span class="o">],</span> <span class="n">name</span><span class="o">=&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">overwatch</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;)&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
<span class="lineno">6</span> 
<span class="lineno">7</span> <span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span></code></pre></div></p>

<p>Running this code, we&rsquo;ll see a notification that <code>simpleActor</code> terminated and we didn&rsquo;t care, followed by <code>simpleRoutedActor</code> terminating – to which we respond by shutting down the <code>ActorSystem</code>!</p>

<p>That&rsquo;s it; with a little basic knowledge we can now not only distribute our Akka workloads, but shut the system down cleanly when we are done with it!</p>

<p><em>If you&rsquo;re interested in taking a closer look, I threw up a <a href="http://github.com/bwmcadams/akka-router-shutdown-demo">repository in Github</a> with all of the code from this post</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Understanding Scala's Type Classes]]></title>
    <link href="http://blog.evilmonkeylabs.com/2012/06/11/Understanding_Scala_Type_Classes/"/>
    <updated>2012-06-11T00:00:00-07:00</updated>
    <id>http://blog.evilmonkeylabs.com/2012/06/11/Understanding_Scala_Type_Classes</id>
    <content type="html"><![CDATA[<p>Over the last year or so, I have found myself making more and more use of Scala&rsquo;s Type Class system to add flexibility to my code.  This is especially evident in the MongoDB Scala Driver, <a href="Casbah">http://github.com/mongodb/casbah</a>, where the most recent work has been to simplify many features by migrating them to type classes.</p>

<p>During this work however, I&rsquo;ve found during that many otherwise adroit Scala engineers seem befuddled or daunted by the Type Class. It does me no good to take advantage of clever features that my users don&rsquo;t understand, and many will benefit from introducing these concepts to their own code. So let&rsquo;s take a look at what type classes are, as well as how &amp; why we can utilize them.</p>

<p>Wikipedia defines a Type Class as <em>&ldquo;&hellip; a type system construct that supports ad-hoc polymorphism. This is achieved by adding constraints to type variables in parametrically polymorphic types&rdquo;</em>. Admittedly, a bit of a mouthful &ndash; and not very helpful to those of us who are self taught and lack the benefit of a comprehensive academic Computer Science education (myself included). Surely, there must be a way to simplify this concept?</p>

<p>In evaluating these ideas, I&rsquo;ve found it easiest to think of a Type Class (in Scala, at least) as a special kind of <em>adapter</em>, which can impart additional capabilities upon a given type or set of types. In Scala the Type Class is communicated through <em>implicits</em>, and imparts one, or both, of two behaviors. First, a Type Class can be to utilized to <em>filter</em> what types are valid for a given method call (which I detailed in <a href="/2011/07/13/User_Configgable_Type_Filtering_with_Type_Classes/">this earlier post</a>). Second, a Type Class can impart additional features and behaviors upon a type at method invocation time. This latter is much along the lines of an enhanced kind of composition, rather than the weaker inheritance which often plagues similar behaviors in a language like Java.</p>

<p>To better understand what I am describing, let&rsquo;s compare a few concepts around the creation and interaction of custom domain objects. I have several sets of tasks I have had to accomplish in Scala in the past &ndash; and Scala solutions show some elegant Type Class oriented approaches which are rooted in the Standard Library. While this may seem a bit contrived, it is exactly the kind of problem through which <em>I</em> initially came to understand Type Classes –– and is thus an ideal lesson.</p>

<!--more-->


<p>First, let&rsquo;s take a look at <em>sorting</em> and custom objects to best understand how one accomplishes this. It is not an uncommon task in development for us to create our own objects and need to integrate them into Standard Library behaviors, such as sorting. Let&rsquo;s work with a few sample objects in the form of &ldquo;Bank Accounts&rdquo; to look at how this all work (and I&rsquo;m aware of the poor concurrency control, etc. around balance &ndash; this is a contrived example). Here&rsquo;s our Bank Account object:</p>

<p><div class="highlight"><pre><code class="language-scala" data-lang="scala"><span class="k">class</span> <span class="nc">BankAccount</span><span class="o">(</span><span class="k">val</span> <span class="n">accountNumber</span><span class="k">:</span> <span class="kt">Long</span><span class="o">,</span> <span class="k">val</span> <span class="n">holderFirst</span><span class="k">:</span> <span class="kt">String</span><span class="o">,</span>
                  <span class="k">val</span> <span class="n">holderMiddle</span><span class="k">:</span> <span class="kt">Option</span><span class="o">[</span><span class="kt">String</span><span class="o">],</span> <span class="k">val</span> <span class="n">holderLast</span><span class="k">:</span> <span class="kt">String</span><span class="o">,</span>
                  <span class="k">var</span> <span class="n">balance</span><span class="k">:</span> <span class="kt">Double</span><span class="o">)</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">def</span> <span class="n">holderName</span> <span class="k">=</span>
    <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;%</span><span class="n">s</span><span class="o">,</span> <span class="o">%</span><span class="n">s</span> <span class="o">%</span><span class="n">s</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;.</span><span class="n">format</span><span class="o">(</span><span class="n">holderLast</span><span class="o">,</span> <span class="n">holderFirst</span><span class="o">,</span> <span class="n">holderMiddle</span><span class="o">.</span><span class="n">getOrElse</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;&amp;</span><span class="n">rdquo</span><span class="o">;))&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">override</span> <span class="k">def</span> <span class="n">toString</span><span class="k">:</span> <span class="kt">String</span> <span class="o">=</span>
    <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;{</span> <span class="nc">Acct</span> <span class="k">#</span> <span class="o">%</span><span class="n">s</span><span class="o">,</span> <span class="nc">Held</span> <span class="n">by</span> <span class="o">%</span><span class="n">s</span> <span class="k">with</span> <span class="n">a</span> <span class="n">balance</span> <span class="n">of</span> <span class="n">$</span><span class="o">%</span><span class="mf">8.2f</span><span class="o">}&amp;</span><span class="n">rdquo</span><span class="o">;.</span><span class="n">format</span><span class="o">(</span>
        <span class="n">accountNumber</span><span class="o">,</span> <span class="n">holderName</span><span class="o">,</span> <span class="n">balance</span>
    <span class="o">)&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span></code></pre></div></p>

<p>We can easily populate collections with instances of these accounts as well.</p>

<p><div class="highlight"><pre><code class="language-scala" data-lang="scala"><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">val</span> <span class="n">accounts</span> <span class="k">=</span> <span class="nc">List</span><span class="o">(</span><span class="k">new</span> <span class="nc">BankAccount</span><span class="o">(</span><span class="mi">1000893</span><span class="o">,</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="nc">Brendan</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;,</span> <span class="nc">Some</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">W</span><span class="o">.&amp;</span><span class="n">rdquo</span><span class="o">;),</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="nc">McAdams</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;,</span>
                                    <span class="mf">1234.56</span><span class="o">),</span>
                    <span class="k">new</span> <span class="nc">BankAccount</span><span class="o">(</span><span class="mi">1000256</span><span class="o">,</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="nc">John</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;,</span> <span class="nc">None</span><span class="o">,</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="nc">Smith</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;,</span>
                                    <span class="mf">10000291.83</span><span class="o">),</span>
                    <span class="k">new</span> <span class="nc">BankAccount</span><span class="o">(</span><span class="mi">1000012</span><span class="o">,</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="nc">Jane</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;,</span> <span class="nc">None</span><span class="o">,</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="nc">Doe</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;,</span>
                                    <span class="mf">45.28</span><span class="o">),</span>
                    <span class="k">new</span> <span class="nc">BankAccount</span><span class="o">(</span><span class="mi">4002158</span><span class="o">,</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="nc">Alan</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;,</span> <span class="nc">None</span><span class="o">,</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="nc">Smithee</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;,</span>
                                    <span class="mf">834567.00</span><span class="o">))&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">println</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="nc">Bank</span> <span class="nc">Accounts</span><span class="k">:</span> <span class="kt">&amp;rdquo</span><span class="o">;</span> <span class="o">+</span> <span class="n">accounts</span><span class="o">)&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span></code></pre></div></p>

<p>Given collections of instances of these bank accounts in each language, we&rsquo;d like to easily sort them –– given an arbitrary set of requirements.  Now, neither Scala or Java can &ldquo;automatically&rdquo; figure out how to sort these, instead requiring assistance from us (the developer).</p>

<p><div class="highlight"><pre><code class="language-scala" data-lang="scala"><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">val</span> <span class="n">sortedAccounts</span> <span class="k">=</span> <span class="n">accounts</span><span class="o">.</span><span class="n">sorted</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">println</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;*</span> <span class="nc">Sorted</span> <span class="nc">Accounts</span><span class="k">:</span> <span class="kt">&amp;rdquo</span><span class="o">;</span> <span class="o">+</span> <span class="n">sortedAccounts</span><span class="o">)</span></code></pre></div></p>

<p>It is unfortunately not <em>quite</em> that easy, as the above code will fail to compile asking for a missing argument:</p>

<p><div class="highlight"><pre><code class="language-scala" data-lang="scala"><span class="nc">BankAccount</span><span class="o">.</span><span class="n">scala</span><span class="k">:</span><span class="err">39</span><span class="kt">:</span> <span class="kt">error:</span> <span class="kt">No</span> <span class="kt">implicit</span> <span class="kt">Ordering</span> <span class="kt">defined</span> <span class="kt">for</span> <span class="kt">this.BankAccount.</span>
<span class="kt">val</span> <span class="kt">sortedAccounts</span> <span class="o">=</span> <span class="n">accounts</span><span class="o">.</span><span class="n">sorted</span>
                                    <span class="o">^</span>
<span class="n">one</span> <span class="n">error</span> <span class="n">found</span></code></pre></div></p>

<p>Like in Java, we need to provide Scala information about how to sort a class of type <code>BankAccount</code>.  In Java however, we would need to use inheritance and actually change the structure of <code>BankAccount</code> by implementing the <code>Comparable</code> interface.  Personally, I&rsquo;ve never been a fan of that approach &ndash; changing a class directly can lead to behavioral oddities. It also has two major limitations that I&rsquo;ve run into in the past.</p>

<p>First we get locked into only <em>one</em> way to sort a <code>BankAccount</code>. If initially we want to sort by <code>accountNumber</code>, and code that in we are restricted should another part of our application need to sort by <code>balance</code>. We either work around the builtin sort methods or subclass, introducing more complications.</p>

<p>Second, we are severely restricted in our ability to handle this with a third party class. What if <code>BankAccount</code> is a vendor supplied class and is <code>final</code> so we cannot even create an extended version which implements comparable? Suddenly we are restricted from taking advantage of the sort routines built into the standard library and have to reinvent our own. Not ideal.</p>

<p>Instead, with Scala, the implementation of our <code>Comparable</code> equivalent is done externally in a Type Class of type <code>scala.math.Ordering</code>. When implemented, our instance of <code>Ordering</code> will both control what classes can be sorted as well as providing information about how to sort. But because it is implemented externally and provided as an implicit we can provide multiple versions should we need different sorting behaviors down the line*.</p>

<p>It is important to note that a Type Class in Scala is typically <em>stateless</em>. It is provided to callers as a single static instance based on Type, and only infers necessary state information from <em>instances of the referenced type</em> passed to its methods. The Type Class is controlling how instances of a given type should behave generically and should be side effect free.</p>

<p>The normal way of providing a typeclass is to create a static implicit object of a trait implementation of <code>TypeClass[A]</code> in scope. I prefer to declare the base trait separately from the implicit object to encourage easier reusage.</p>

<p>For providing <a href="http://www.scala-lang.org/archives/downloads/distrib/files/nightly/docs/library/scala/math/Ordering.html">Ordering[BankAccount]</a>, we need to implement an abstract method <code>def compare(x: T, y: T): Int</code> which compares two instances of <code>T</code> (Where, in this case, <code>T</code> represents <code>BankAccount</code>) and returns an <code>Int</code> signifying their order against one another. Negative represents that <code>x &lt; y</code>, positive that <code>x &gt; y</code> and zero if <code>x == y</code>.</p>

<p>Let&rsquo;s take a look at how our <code>Ordering</code> instance for sorting a <code>BankAccount</code> by <code>accountNumber</code> might look.</p>

<p><div class="highlight"><pre><code class="language-scala" data-lang="scala"><span class="k">trait</span> <span class="nc">BankAccountNumberOrder</span> <span class="k">extends</span> <span class="n">scala</span><span class="o">.</span><span class="n">math</span><span class="o">.</span><span class="nc">Ordering</span><span class="o">[</span><span class="kt">BankAccount</span><span class="o">]</span> <span class="o">{</span>
  <span class="k">def</span> <span class="n">compare</span><span class="o">(</span><span class="n">x</span><span class="k">:</span> <span class="kt">BankAccount</span><span class="o">,</span> <span class="n">y</span><span class="k">:</span> <span class="kt">BankAccount</span><span class="o">)</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">x</span><span class="o">.</span><span class="n">accountNumber</span> <span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span> <span class="n">y</span><span class="o">.</span><span class="n">accountNumber</span><span class="o">)</span>
      <span class="o">-</span><span class="mi">1</span>
    <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">x</span><span class="o">.</span><span class="n">accountNumber</span> <span class="o">&gt;</span> <span class="n">y</span><span class="o">.</span><span class="n">accountNumber</span><span class="o">)</span>
      <span class="mi">1</span>
    <span class="k">else</span>
      <span class="mi">0</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">implicit</span> <span class="k">object</span> <span class="nc">BankAccountNumberSort</span> <span class="k">extends</span> <span class="nc">BankAccountNumberOrder</span></code></pre></div></p>

<p>Now with an implicit instance of <code>Ordering[BankAccount]</code> in scope, our sort can succeed. Running our code should produce expected results:</p>

<p><div class="highlight"><pre><code class="language-scala" data-lang="scala"><span class="nc">Bank</span> <span class="nc">Accounts</span><span class="k">:</span> <span class="kt">List</span><span class="o">({</span> <span class="kt">Acct</span> <span class="k">#</span> <span class="err">1000893</span><span class="o">,</span> <span class="kt">Held</span> <span class="kt">by</span> <span class="kt">McAdams</span><span class="o">,</span> <span class="kt">Brendan</span> <span class="kt">W.</span> <span class="kt">with</span> <span class="kt">a</span> <span class="kt">balance</span> <span class="kt">of</span> <span class="kt">$</span> <span class="err">1234</span><span class="kt">.</span><span class="err">56</span><span class="o">},</span> <span class="o">{</span> <span class="nc">Acct</span> <span class="k">#</span> <span class="mi">1000256</span><span class="o">,</span> <span class="nc">Held</span> <span class="n">by</span> <span class="nc">Smith</span><span class="o">,</span> <span class="nc">John</span>  <span class="k">with</span> <span class="n">a</span> <span class="n">balance</span> <span class="n">of</span> <span class="n">$10000291</span><span class="o">.</span><span class="mi">83</span><span class="o">},</span> <span class="o">{</span> <span class="nc">Acct</span> <span class="k">#</span> <span class="mi">1000012</span><span class="o">,</span> <span class="nc">Held</span> <span class="n">by</span> <span class="nc">Doe</span><span class="o">,</span> <span class="nc">Jane</span>  <span class="k">with</span> <span class="n">a</span> <span class="n">balance</span> <span class="n">of</span> <span class="n">$</span>   <span class="mf">45.28</span><span class="o">},</span> <span class="o">{</span> <span class="nc">Acct</span> <span class="k">#</span> <span class="mi">4002158</span><span class="o">,</span> <span class="nc">Held</span> <span class="n">by</span> <span class="nc">Smithee</span><span class="o">,</span> <span class="nc">Alan</span>  <span class="k">with</span> <span class="n">a</span> <span class="n">balance</span> <span class="n">of</span> <span class="n">$834567</span><span class="o">.</span><span class="mi">00</span><span class="o">})&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="nc">Sorted</span> <span class="nc">Accounts</span><span class="k">:</span> <span class="kt">List</span><span class="o">({</span> <span class="kt">Acct</span> <span class="k">#</span> <span class="err">1000012</span><span class="o">,</span> <span class="kt">Held</span> <span class="kt">by</span> <span class="kt">Doe</span><span class="o">,</span> <span class="kt">Jane</span>  <span class="kt">with</span> <span class="kt">a</span> <span class="kt">balance</span> <span class="kt">of</span> <span class="kt">$</span>   <span class="err">45</span><span class="kt">.</span><span class="err">28</span><span class="o">},</span> <span class="o">{</span> <span class="nc">Acct</span> <span class="k">#</span> <span class="mi">1000256</span><span class="o">,</span> <span class="nc">Held</span> <span class="n">by</span> <span class="nc">Smith</span><span class="o">,</span> <span class="nc">John</span>  <span class="k">with</span> <span class="n">a</span> <span class="n">balance</span> <span class="n">of</span> <span class="n">$10000291</span><span class="o">.</span><span class="mi">83</span><span class="o">},</span> <span class="o">{</span> <span class="nc">Acct</span> <span class="k">#</span> <span class="mi">1000893</span><span class="o">,</span> <span class="nc">Held</span> <span class="n">by</span> <span class="nc">McAdams</span><span class="o">,</span> <span class="nc">Brendan</span> <span class="n">W</span><span class="o">.</span> <span class="k">with</span> <span class="n">a</span> <span class="n">balance</span> <span class="n">of</span> <span class="n">$</span> <span class="mf">1234.56</span><span class="o">},</span> <span class="o">{</span> <span class="nc">Acct</span> <span class="k">#</span> <span class="mi">4002158</span><span class="o">,</span> <span class="nc">Held</span> <span class="n">by</span> <span class="nc">Smithee</span><span class="o">,</span> <span class="nc">Alan</span>  <span class="k">with</span> <span class="n">a</span> <span class="n">balance</span> <span class="n">of</span> <span class="n">$834567</span><span class="o">.</span><span class="mi">00</span><span class="o">})</span></code></pre></div></p>

<p>The big benefit here (in my eyes) is that we didn&rsquo;t need to modify our <code>BankAccount</code> class at all to provide this behavior. <em>Even if <code>BankAccount</code> was a sealed third party class</em> we can provide sorting information for it. This is far superior to an inheritance based solution such as Java&rsquo;s. And if we wanted later to sort by <code>balance</code> instead of <code>accountNumber</code> we can explicitly pass a different instance to sort:</p>

<p><div class="highlight"><pre><code class="language-scala" data-lang="scala"><span class="k">object</span> <span class="nc">BankAccountBalanceOrder</span> <span class="k">extends</span> <span class="n">scala</span><span class="o">.</span><span class="n">math</span><span class="o">.</span><span class="nc">Ordering</span><span class="o">[</span><span class="kt">BankAccount</span><span class="o">]</span> <span class="o">{</span>
  <span class="k">def</span> <span class="n">compare</span><span class="o">(</span><span class="n">x</span><span class="k">:</span> <span class="kt">BankAccount</span><span class="o">,</span> <span class="n">y</span><span class="k">:</span> <span class="kt">BankAccount</span><span class="o">)</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">x</span><span class="o">.</span><span class="n">balance</span> <span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span> <span class="n">y</span><span class="o">.</span><span class="n">balance</span><span class="o">)</span>
      <span class="o">-</span><span class="mi">1</span>
    <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">x</span><span class="o">.</span><span class="n">balance</span> <span class="o">&gt;</span> <span class="n">y</span><span class="o">.</span><span class="n">balance</span><span class="o">)</span>
      <span class="mi">1</span>
    <span class="k">else</span>
      <span class="mi">0</span>
<span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">val</span> <span class="n">sortedByBalance</span> <span class="k">=</span> <span class="n">accounts</span><span class="o">.</span><span class="n">sorted</span><span class="o">(</span><span class="nc">BankAccountBalanceOrder</span><span class="o">)&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">println</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">$</span> <span class="nc">Sorted</span> <span class="nc">By</span> <span class="nc">Balance</span><span class="k">:</span> <span class="kt">&amp;rdquo</span><span class="o">;</span> <span class="o">+</span> <span class="n">sortedByBalance</span><span class="o">)</span></code></pre></div></p>

<p>Complete control is passed to us from an externally controlled system. I&rsquo;ll save the details for a future post, but we can even use a type class to define what it means if I say <code>brendansAccount - johnsAccount</code> using an instance of <code>scala.math.Numeric[BankAccount]</code>.</p>

<p>Now go forth and Type with Class.</p>

<p>* <a href="http://twitter.com/djspiewak">Daniel Spiewak</a> points out that Sun realized this complication as well a few Java releases back and introduced <a href="http://docs.oracle.com/javase/6/docs/api/java/util/Comparator.html">Comparator</a>, which is very similar to this Type Class approach.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Forcing Scala Compiler 'Nothing' Checks]]></title>
    <link href="http://blog.evilmonkeylabs.com/2012/05/31/Forcing_Compiler_Nothing_checks/"/>
    <updated>2012-05-31T00:00:00-07:00</updated>
    <id>http://blog.evilmonkeylabs.com/2012/05/31/Forcing_Compiler_Nothing_checks</id>
    <content type="html"><![CDATA[<p>Since early in its history, Casbah has had a helper method called <code>getAs[T]</code>, where <code>T</code> is &ldquo;Some type you&rsquo;d like to fetch a particular field as&rdquo;. Because of type erasure on the JVM, working with a Mongo Document can be annoying &ndash; the representation in Scala is the equivalent of a <code>Map[String, Any]</code>. If we were to work with the <code>Map[String, Any]</code> in a standard mode, fetching a field <em>balance</em> which is a <code>Double</code> would require manual casting.</p>

<p><div class="highlight"><pre><code class="language-scala" data-lang="scala"><span class="k">val</span> <span class="n">doc</span><span class="k">:</span> <span class="kt">DBObject</span> <span class="o">=</span> <span class="nc">MongoDBObject</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">foo</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;</span> <span class="o">-&gt;</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">bar</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;,</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">balance</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;</span> <span class="o">-&gt;</span> <span class="mf">2.5</span><span class="o">)&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">val</span> <span class="n">balance</span> <span class="k">=</span> <span class="n">doc</span><span class="o">.</span><span class="n">get</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">balance</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;)</span></code></pre></div></p>

<p>We have already hit another issue here &ndash; in Scala, invoking <code>get</code> on a <code>Map</code> returns <code>Option[T]</code> (Where, in this case, <code>T</code> is of type <code>Any</code>). Which means casting has become more complex: to get a <code>Double</code> we also have to unwrap the <code>Option[Any]</code> first. A lazy man&rsquo;s approach might be something hairy like so:</p>

<p><div class="highlight"><pre><code class="language-scala" data-lang="scala"><span class="n">balance</span><span class="o">.</span><span class="n">getOrElse</span><span class="o">(</span><span class="kc">null</span><span class="o">).</span><span class="n">asInstanceOf</span><span class="o">[</span><span class="kt">Double</span><span class="o">]</span></code></pre></div></p>

<p>In the annals of history (when men were <em>real</em> men, and small furry creatures from Alpha Centauri were <em>real</em> small furry creatures from Alpha Centauri), the above became an annoyingly common pattern. A solution was needed - and so <code>getAs[T]</code> was born. The idea was not only to allow a shortcut to casting, but take care of the <code>Option[T]</code> wrapping for you as well. Invoking <code>getAs[Double]</code> will, in this case, return us an <code>Option[Double]</code>.</p>

<p>But not everything is perfect in the land of <code>getAs[T]</code> &ndash; if the type requested doesn&rsquo;t match the actual type, runtime failures occur. Worse, if the user fails to pass a type, the Scala compiler substitutes <code>Nothing</code>, which <em>guarantees</em> a runtime failure. Runtime failures are bad &ndash; but fortunately, <a href="http://twitter.com/milessabin">Miles Sabin</a> &amp; <a href="http://twitter.com/jteigen">Jon-Anders Teigen</a> came up with an awesome solution.</p>

<!--more-->


<p><div class="highlight"><pre><code class="language-scala" data-lang="scala"><span class="n">doc</span><span class="o">.</span><span class="n">getAs</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;&quot;</span> <span class="n">title</span><span class="o">=</span><span class="s">&quot;foo&quot;</span><span class="o">&gt;</span><span class="nc">String</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;</span>
<span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">res1</span><span class="k">:</span> <span class="kt">Option</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="k">=</span> <span class="nc">Some</span><span class="o">(</span><span class="n">bar</span><span class="o">)</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/&amp;</span><span class="n">lsquo</span><span class="o">;</span>
<span class="n">doc</span><span class="o">.</span><span class="n">getAs</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;&quot;</span> <span class="n">title</span><span class="o">=</span><span class="s">&quot;balance&quot;</span><span class="o">&gt;</span><span class="nc">Double</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;</span>
<span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">res2</span><span class="k">:</span> <span class="kt">Option</span><span class="o">[</span><span class="kt">Double</span><span class="o">]</span> <span class="k">=</span> <span class="nc">Some</span><span class="o">(</span><span class="mf">2.5</span><span class="o">)</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
<span class="n">doc</span><span class="o">.</span><span class="n">getAs</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">balance</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;)</span>
<span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">res3</span><span class="k">:</span> <span class="kt">Option</span><span class="o">[</span><span class="kt">Nothing</span><span class="o">]</span> <span class="k">=</span> <span class="nc">Some</span><span class="o">(</span><span class="mf">2.5</span><span class="o">)</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;/&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="nc">Notably</span> <span class="n">at</span> <span class="n">least</span><span class="o">,</span> <span class="n">the</span> <span class="nc">Scala</span> <span class="n">compiler</span> <span class="n">is</span> <span class="n">smart</span> <span class="n">enough</span> <span class="n">to</span> <span class="n">infer</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">A</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;</span> <span class="n">from</span> <span class="n">the</span> <span class="n">left</span><span class="o">-</span><span class="n">hand</span> <span class="n">side</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="k">if</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span>
   <span class="n">an</span> <span class="n">explicit</span> <span class="k">type</span> <span class="kt">is</span> <span class="kt">declared</span> <span class="kt">&lt;/em&gt;/</span>
<span class="k">val</span> <span class="n">bal</span><span class="k">:</span> <span class="kt">Option</span><span class="o">[</span><span class="kt">Double</span><span class="o">]</span> <span class="k">=</span> <span class="n">getAs</span><span class="o">(</span><span class="n">doc</span><span class="o">,</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">balance</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;)</span>
<span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">bal</span><span class="k">:</span> <span class="kt">Option</span><span class="o">[</span><span class="kt">Double</span><span class="o">]</span> <span class="k">=</span> <span class="nc">Some</span><span class="o">(</span><span class="mf">2.5</span><span class="o">)</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span></code></pre></div></p>

<p>We get back an option of <code>Nothing</code>, which is less than ideal (The REPL appears to be somewhat more forgiving in some of this behavior than the actual runtime is). My reaction to this early on was quite strong –– I wanted to <em>require</em> that the user pass their type argument. Unfortunately, the best I could do within Casbah was attempt to detect the compiler substituted <code>Nothing</code> and warn the user at runtime. Less than ideal, I know.</p>

<p><div class="highlight"><pre><code class="language-scala" data-lang="scala"><span class="k">def</span> <span class="n">getAs</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;key:%20String&quot;</span><span class="o">&gt;</span><span class="n">A</span> <span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="k">:</span> <span class="kt">Any:</span> <span class="kt">Manifest&lt;/a</span><span class="k">&gt;:</span> <span class="kt">Option</span><span class="o">[</span><span class="kt">A</span><span class="o">]</span> <span class="k">=</span> <span class="o">{</span>
  <span class="n">require</span><span class="o">(</span><span class="n">manifest</span><span class="o">[</span><span class="kt">A</span><span class="o">]</span> <span class="o">!=</span> <span class="n">manifest</span><span class="o">[</span><span class="kt">scala.Nothing</span><span class="o">],</span>
    <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="nc">Type</span> <span class="n">inference</span> <span class="n">failed</span><span class="o">;</span> <span class="n">getAs</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;&quot;</span><span class="o">&gt;</span><span class="n">A</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;</span> <span class="k">requires</span> <span class="n">an</span> <span class="n">explicit</span> <span class="k">type</span> <span class="kt">argument</span> <span class="kt">&amp;rdquo</span><span class="o">;</span> <span class="o">+</span>
    <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;(</span><span class="n">e</span><span class="o">.</span><span class="n">g</span><span class="o">.</span> <span class="n">dbObject</span><span class="o">.</span><span class="n">getAs</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;%22somegetAKey%22&quot;</span><span class="o">&gt;&lt;</span><span class="nc">ReturnType</span><span class="o">&gt;&lt;/</span><span class="n">a</span><span class="o">&gt;</span> <span class="o">)</span> <span class="n">to</span> <span class="n">function</span> <span class="n">correctly</span><span class="o">.&amp;</span><span class="n">rdquo</span><span class="o">;)&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">underlying</span><span class="o">.</span><span class="n">get</span><span class="o">(</span><span class="n">key</span><span class="o">)</span> <span class="k">match</span> <span class="o">{</span>
    <span class="k">case</span> <span class="kc">null</span> <span class="k">=&gt;</span> <span class="nc">None</span>
    <span class="k">case</span> <span class="n">value</span> <span class="k">=&gt;</span> <span class="nc">Some</span><span class="o">(</span><span class="n">value</span><span class="o">.</span><span class="n">asInstanceOf</span><span class="o">[</span><span class="kt">A</span><span class="o">])</span>
  <span class="o">}</span>
<span class="o">}</span></code></pre></div></p>

<p>This gave me somewhat improved behavior –- at least users are warned at runtime before something breaks.</p>

<p><div class="highlight"><pre><code class="language-scala" data-lang="scala"><span class="n">doc</span><span class="o">.</span><span class="n">getAs</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">balance</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;)</span>
<span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span>
<span class="n">java</span><span class="o">.</span><span class="n">lang</span><span class="o">.</span><span class="nc">IllegalArgumentException</span><span class="k">:</span> <span class="kt">requirement</span> <span class="kt">failed:</span> <span class="kt">Type</span> <span class="kt">inference</span> <span class="kt">failed</span><span class="o">;</span> <span class="n">getAs</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;&quot;</span><span class="o">&gt;</span><span class="n">A</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;</span> <span class="k">requires</span> <span class="n">an</span> <span class="n">explicit</span> <span class="k">type</span> <span class="kt">argument</span> <span class="o">(</span><span class="kt">e.g.</span> <span class="kt">dbObject.getAs&lt;a</span> <span class="kt">href</span><span class="o">=</span><span class="err">&quot;&quot;</span> <span class="kt">title</span><span class="o">=</span><span class="s">&quot;somegetAKey&quot;</span><span class="o">&gt;&lt;</span><span class="nc">ReturnType</span><span class="o">&gt;&lt;/</span><span class="n">a</span><span class="o">&gt;</span> <span class="o">)</span> <span class="n">to</span> <span class="n">function</span> <span class="n">correctly</span><span class="o">.</span>
<span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span></code></pre></div></p>

<p>Great &ndash; we prevent people from utterly failing to pass a type to <code>getAs</code> by throwing an exception at runtime. A bit like closing the barn doors after the horses escaped, and somewhat counter to the point of compiled languages. Fortunately, Miles Sabin knows a lot of great compiler tricks and Jon-Anders has superpowers (which he uses for good, not evil). Using some of Miles&#8217; tricks, Jon-Anders has fixed Casbah (as of 2.3.0+) to make <code>getAs[T]</code> fail utterly at <em>compile time</em> when no type is passed.</p>

<p>The secret to this trick is essentially that the Scala compiler <em>hates</em> ambiguity. In order to substitute <code>Nothing</code> as a type argument when one isn&rsquo;t supplied, the Scala compiler has an implicit for <code>Nothing</code> scoped. If one were to exacerbate the situation by introducing an additional implicit for <code>Nothing</code>, the compiler would fail when no type argument is passed.</p>

<p>With this in mind, we can morph <code>getAs</code> to work with a type class instead of a standard type argument.</p>

<p><div class="highlight"><pre><code class="language-scala" data-lang="scala"><span class="k">def</span> <span class="n">getAs</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;key:%20String&quot;</span><span class="o">&gt;</span><span class="n">A</span> <span class="k">:</span> <span class="kt">NotNothing&lt;/a</span><span class="k">&gt;:</span> <span class="kt">Option</span><span class="o">[</span><span class="kt">A</span><span class="o">]</span> <span class="k">=</span> <span class="o">{</span>
  <span class="n">underlying</span><span class="o">.</span><span class="n">get</span><span class="o">(</span><span class="n">key</span><span class="o">)</span> <span class="k">match</span> <span class="o">{</span>
    <span class="k">case</span> <span class="kc">null</span> <span class="k">=&gt;</span> <span class="nc">None</span>
    <span class="k">case</span> <span class="n">value</span> <span class="k">=&gt;</span> <span class="nc">Some</span><span class="o">(</span><span class="n">value</span><span class="o">.</span><span class="n">asInstanceOf</span><span class="o">[</span><span class="kt">A</span><span class="o">])</span>
  <span class="o">}</span>
<span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">sealed</span> <span class="k">trait</span> <span class="nc">NotNothing</span><span class="o">[</span><span class="kt">A</span><span class="o">]{</span>
  <span class="k">type</span> <span class="kt">B</span>
<span class="o">}</span></code></pre></div></p>

<p>Our previous unbounded type argument is replaced with the new type class boundary of <code>NotNothing</code> and the runtime <code>Nothing</code> check is removed. We also need concrete instances of our type class, which is where the real magic comes into play.</p>

<p><div class="highlight"><pre><code class="language-scala" data-lang="scala"><span class="k">object</span> <span class="nc">NotNothing</span> <span class="o">{</span>
  <span class="k">implicit</span> <span class="k">val</span> <span class="n">nothing</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">NotNothing</span><span class="o">[</span><span class="kt">Nothing</span><span class="o">]{</span> <span class="k">type</span> <span class="kt">B</span> <span class="o">=</span> <span class="nc">Any</span> <span class="o">}</span>
  <span class="k">implicit</span> <span class="k">def</span> <span class="n">notNothing</span><span class="o">[</span><span class="kt">A</span><span class="o">]</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">NotNothing</span><span class="o">[</span><span class="kt">A</span><span class="o">]{</span> <span class="k">type</span> <span class="kt">B</span> <span class="o">=</span> <span class="n">A</span> <span class="o">}</span>
<span class="o">}</span></code></pre></div></p>

<p>Now, any application of <code>Nothing</code> will trigger the ambiguity problem &ndash; the Scala compiler won&rsquo;t figure out how to resolve the type argument. This trick works because <code>Nothing</code> is at the <em>bottom</em> of Scala&rsquo;s type hierarchy. Were I to call <code>getAs("balance")</code>, the Scala compiler would attempt to fill in <code>Nothing</code> as the type argument. However, both implicit conversons for <code>nothing</code> <em>and</em> <code>notNothing[A]</code> will match &ndash; causing ambiguity and compilation fails.</p>

<p><div class="highlight"><pre><code class="language-scala" data-lang="scala"><span class="n">doc</span><span class="o">.</span><span class="n">getAs</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;&quot;</span> <span class="n">title</span><span class="o">=</span><span class="s">&quot;foo&quot;</span><span class="o">&gt;</span><span class="nc">String</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;</span>
<span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">res0</span><span class="k">:</span> <span class="kt">Option</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="k">=</span> <span class="nc">Some</span><span class="o">(</span><span class="n">bar</span><span class="o">)</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
<span class="n">doc</span><span class="o">.</span><span class="n">getAs</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;&quot;</span> <span class="n">title</span><span class="o">=</span><span class="s">&quot;balance&quot;</span><span class="o">&gt;</span><span class="nc">Double</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;</span>
<span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">res1</span><span class="k">:</span> <span class="kt">Option</span><span class="o">[</span><span class="kt">Double</span><span class="o">]</span> <span class="k">=</span> <span class="nc">Some</span><span class="o">(</span><span class="mf">2.5</span><span class="o">)</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
<span class="n">doc</span><span class="o">.</span><span class="n">getAs</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">balance</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;)</span>
<span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">error</span><span class="k">:</span> <span class="kt">ambiguous</span> <span class="kt">implicit</span> <span class="kt">values:</span>
 <span class="n">both</span> <span class="n">value</span> <span class="n">nothing</span> <span class="n">in</span> <span class="k">object</span> <span class="nc">NotNothing</span> <span class="n">of</span> <span class="k">type</span> <span class="o">=&gt;</span> <span class="n">java</span><span class="o">.</span><span class="n">lang</span><span class="o">.</span><span class="nc">Object</span> <span class="k">with</span> <span class="n">com</span><span class="o">.</span><span class="n">mongodb</span><span class="o">.</span><span class="n">casbah</span><span class="o">.</span><span class="n">commons</span><span class="o">.</span><span class="nc">NotNothing</span><span class="o">[</span><span class="kt">Nothing</span><span class="o">]{</span><span class="k">type</span> <span class="kt">B</span> <span class="o">=</span> <span class="nc">Any</span><span class="o">}</span>
 <span class="n">and</span> <span class="n">method</span> <span class="n">notNothing</span> <span class="n">in</span> <span class="k">object</span> <span class="nc">NotNothing</span> <span class="n">of</span> <span class="k">type</span> <span class="err">[</span><span class="kt">A</span><span class="err">]</span><span class="o">=&gt;</span> <span class="n">java</span><span class="o">.</span><span class="n">lang</span><span class="o">.</span><span class="nc">Object</span> <span class="k">with</span> <span class="n">com</span><span class="o">.</span><span class="n">mongodb</span><span class="o">.</span><span class="n">casbah</span><span class="o">.</span><span class="n">commons</span><span class="o">.</span><span class="nc">NotNothing</span><span class="o">[</span><span class="kt">A</span><span class="o">]{</span><span class="k">type</span> <span class="kt">B</span> <span class="o">=</span> <span class="n">A</span><span class="o">}</span>
 <span class="k">match</span> <span class="n">expected</span> <span class="k">type</span> <span class="kt">com.mongodb.casbah.commons.NotNothing</span><span class="o">[</span><span class="kt">A</span><span class="o">]</span>
              <span class="n">doc</span><span class="o">.</span><span class="n">getAs</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">balance</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;)</span>
                       <span class="o">^</span>
<span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span></code></pre></div></p>

<p>A vast improvement in behavior, especially if we use the <a href="http://suereth.blogspot.com/2011/03/annotate-your-type-classes.html"><code>@implicitNotFound</code> annotation</a> to provide clear error messages.</p>

<p>The moral of the story &ndash; knowing the ins and outs of the type system and compiler corners can do great things for improving the functionality of your code. Especially being aware that as smart as the Scala compiler is, there are limitations inherent in the runtime platform (the JVM, specifically type erasure) that can make our lives difficult if ignored.</p>

<h2>Update</h2>

<p>While reviewing a draft of this post, <a href="http://twitter.com/djspiewak">Daniel Spiewak</a> noted one more issue with my code as it exists.  Namely, that we don&rsquo;t have a sane way of preventing users from <em>miscasting</em>.  That is to say, if I try to fetch &ldquo;balance&rdquo; as a <code>String</code>, this shouldn&rsquo;t be OK.</p>

<p><div class="highlight"><pre><code class="language-scala" data-lang="scala"><span class="n">doc</span><span class="o">.</span><span class="n">getAs</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;&quot;</span> <span class="n">title</span><span class="o">=</span><span class="s">&quot;balance&quot;</span><span class="o">&gt;</span><span class="nc">String</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;.</span><span class="n">getOrElse</span><span class="o">(</span><span class="kc">null</span><span class="o">)</span>
<span class="n">java</span><span class="o">.</span><span class="n">lang</span><span class="o">.</span><span class="nc">ClassCastException</span><span class="k">:</span> <span class="kt">java.lang.Double</span> <span class="kt">cannot</span> <span class="kt">be</span> <span class="kt">cast</span> <span class="kt">to</span> <span class="kt">java.lang.String</span></code></pre></div></p>

<p>Daniel rightly points out how bad a runtime <code>ClassCastException</code> is, and has proposed another fix which I&rsquo;m incorporating.</p>

<p><div class="highlight"><pre><code class="language-scala" data-lang="scala"><span class="k">def</span> <span class="n">getAs</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;key:%20String&quot;</span><span class="o">&gt;</span><span class="n">A</span> <span class="k">:</span> <span class="kt">NotNothing</span> <span class="kt">:</span> <span class="kt">Manifest&lt;/a</span><span class="k">&gt;:</span> <span class="kt">Option</span><span class="o">[</span><span class="kt">A</span><span class="o">]</span> <span class="k">=</span> <span class="o">{</span>
  <span class="n">underlying</span><span class="o">.</span><span class="n">get</span><span class="o">(</span><span class="n">key</span><span class="o">)</span> <span class="k">match</span> <span class="o">{</span>
    <span class="k">case</span> <span class="kc">null</span> <span class="k">=&gt;</span> <span class="nc">None</span>
    <span class="k">case</span> <span class="n">value</span> <span class="k">if</span> <span class="n">manifest</span><span class="o">[</span><span class="kt">A</span><span class="o">]</span> <span class="o">&gt;:&gt;</span> <span class="nc">Manifest</span><span class="o">.</span><span class="n">classType</span><span class="o">(</span><span class="n">value</span><span class="o">.</span><span class="n">getClass</span><span class="o">)</span> <span class="k">=&gt;</span>
      <span class="nc">Some</span><span class="o">(</span><span class="n">value</span><span class="o">.</span><span class="n">asInstanceOf</span><span class="o">[</span><span class="kt">A</span><span class="o">])</span>
    <span class="k">case</span> <span class="n">fail</span> <span class="k">=&gt;</span>
      <span class="n">log</span><span class="o">.</span><span class="n">warn</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="nc">Unable</span> <span class="n">to</span> <span class="n">cast</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="o">;%</span><span class="n">s</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="o">;</span> <span class="n">as</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="o">;%</span><span class="n">s</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="o">;;</span> <span class="n">please</span> <span class="n">check</span> <span class="n">your</span> <span class="n">types</span><span class="o">.&amp;</span><span class="n">rdquo</span><span class="o">;,</span> <span class="nc">Manifest</span><span class="o">.</span><span class="n">classType</span><span class="o">(</span><span class="n">fail</span><span class="o">.</span><span class="n">getClass</span><span class="o">),</span> <span class="n">manifest</span><span class="o">[</span><span class="kt">A</span><span class="o">])</span>
      <span class="nc">None</span>
  <span class="o">}</span>
<span class="o">}</span></code></pre></div></p>

<p>Now, when you ask for a type that doesn&rsquo;t match what the Document contains, you will receive <code>None</code> and a warning in your log such as <code>Unable to cast 'java.lang.Double' as 'java.lang.String'; please check your types.</code>.</p>
]]></content>
  </entry>
  
</feed>
