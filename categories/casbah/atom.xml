<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: casbah | Bytes.Codes]]></title>
  <link href="http://bytes.codes/categories/casbah/atom.xml" rel="self"/>
  <link href="http://bytes.codes/"/>
  <updated>2016-04-12T09:01:09-06:00</updated>
  <id>http://bytes.codes/</id>
  <author>
    <name><![CDATA[Brendan McAdams]]></name>
    <email><![CDATA[brendan@bytes.codes]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Casbah 2.3.0-RC1 Released]]></title>
    <link href="http://bytes.codes/2012/05/29/Casbah2.3_Released/"/>
    <updated>2012-05-29T00:00:00-06:00</updated>
    <id>http://bytes.codes/2012/05/29/Casbah2.3_Released</id>
    <content type="html"><![CDATA[<p>Today, I published the first Release Candidate of Casbah 2.3.0, available for SBT users as  <code>"org.mongodb" % "casbah" % "2.3.0-RC1"</code>. My <a href="http://notes.implicit.ly/post/24009446396/casbah-2-3-0rc1">release announcement</a> to <a href="http://implicit.ly">implicit.ly</a> contains the details on all of the bugs fixed – I will also be posting another set of blog entries shortly outlining the specific improvements to the code and demoing fetaures.</p>

<p>It has been just about a year since the last major release of Casbah, which was version <strong>2.1.5-1</strong>.  A number of factors led to the delay in getting a major update out the door, for which I apologize.  Amongst other things I have spent much of the last year since Casbah’s prior release on the road doing training, consulting and evangelization of MongoDB to users around the globe; I had less time for code among all these things than I expected!  Additionally, after releasing the <strong>2.1.x</strong> series of Casbah I embarked on what quickly morphed from Casbah <strong>2.2.0</strong> to <strong>3.0.0</strong> – a major refactoring and cleanup of 2+ years of API cruft and “I’m Gonna Learn Me Some Scala!” detritus.  In all the excitement to release a perfect release to end all releases, I did a poor job of making it easy to backport and maintain a compatibility series for <strong>2.x</strong> users – a harsh lesson in the importance of creating small, bite sized git commits that can be cherry picked.</p>

<h2 id="so-what-happened-to-casbah-30-and-22">So What Happened to Casbah 3.0? And 2.2?</h2>

<p>Casbah <strong>2.2.x</strong> is dead – <strong>3.0.x</strong> is certainly not!  When the work following <strong>2.1.x</strong> was begun, I had published a number of early snapshots as Casbah <em>2.2.0-SNAPSHOT</em>.  During this development cycle I found a lot of the aforementioned detritus such as overloaded methods (Casbah was begun as a Scala 2.7.x project and I never fully moved its core APIs over to use named and default arguments - some of these are corrected in Casbah <strong>2.3.0</strong> but in the interest of backwards compatibility with prior releases of 2.x, not completely). As I worked on coding improvements around these things the API drifted further and further away from compatibility and I chose to kill off the <strong>2.2.x</strong> series, planning the next release of Casbah as <strong>3.0.0</strong>.  In addition to that, I intended Casbah <strong>3.0.0</strong> to coincide with MongoDB <strong>2.2.0</strong> which will have additional features such as the New Aggregation Framework.  As MongoDB 2.2 hasn’t been released yet, it became clear I needed to provide an updated Casbah release with many of the improvements but without many of the API breakages introduced in <strong>3.0</strong> - including a vastly improved build of the Casbah Query DSL which has stronger type safety and compiler checks thanks to the inimitable <a href="http://twitter.com/jteigen">Jon-Anders Teigen</a>.</p>

<p>Casbah <strong>3.0</strong> is still very much alive and in development, with <strong>2.3.0</strong> representing a backporting of many of the changes and improvements from <strong>3.0</strong>.  Because of the abandonment of the original <strong>2.2</strong> development series, I felt it was saner to kill <strong>2.2.x</strong> dead and bring the backports into a <strong>2.3.x</strong> series. You can, if you wish, think of this as <em>Casbah 2.3 - The Search for Casbah 2.2</em> (The long rumored sequel to Spaceballs has been said to be called <em>Spaceballs 3: The Search for Spaceballs 2</em>).</p>

<p>I will continue to support and improve Casbah <strong>2.3.x</strong> moving forward as well as completing Casbah <strong>3.0</strong> (still intended to coincide with the release of MongoDB 2.2). If you have any questions, please don’t hesitate to contact me!</p>

<p><em>Later tonight or tomorrow I will post an entry or two detailing all of the wonderful changes in Casbah 2.3.0 and how to take advantage of them.</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Exploring Scala with MongoDB]]></title>
    <link href="http://bytes.codes/2011/01/10/intro-scala-mongo/"/>
    <updated>2011-01-10T00:00:00-07:00</updated>
    <id>http://bytes.codes/2011/01/10/intro-scala-mongo</id>
    <content type="html"><![CDATA[<p>2010 proved to be a great year for growth and adoption of many fledgling technologies—not least among them, <a href="http://mongodb.org/" title="MongoDB">MongoDB</a> and <a href="http://scala-lang.org">Scala</a>.  Scala is designed as an alternative language for the Java platform, with a focus on scalability. It merges many of the Object Oriented concepts of languages like Java and C++ with the functional tools of Erlang, Haskell and Lisp with a bit of the dynamic natures of modern languages like Ruby and Python.  This flexible nature has sped Scala’s adoption in the technology stacks of platforms like <a href="http://www.scala-lang.org/node/7806">LinkedIn</a>, <a href="http://www.artima.com/scalazine/articles/twitter_on_scala.html">Twitter</a>, <a href="http://www.10gen.com/video/misc/foursquare">FourSquare</a> and many more.  By running on the JVM Scala has a strong affinity for working alongside existing Java applications, which allows users to build on their existing technology investments.</p>

<p>For 2011, MongoDB has added official support for Scala with the release of <a href="http://api.mongodb.org/scala/casbah/latest/">Casbah</a>, a Scala driver for MongoDB.  Casbah is built around the existing MongoDB Java Driver to give it a strong foundation, but designed to take advantage of many of the idioms of Scala such as a strong collections library, fluid syntax for building DSLs and functional concepts like closures and currying.</p>

<p>Because it is designed to be easy to work with for Scala users, Casbah introduces a more ‘friendly’ syntax for creating MongoDB Objects, using Scala’s Map syntax:</p>

<p><div class="highlight"><pre><code class="language-scala" data-lang="scala"><span class="k">import</span> <span class="nn">com.mongodb.casbah.Imports._&lt;/p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;/**</span> <span class="nc">Create</span> <span class="n">an</span> <span class="k">object</span> <span class="nc">directly</span> <span class="o">*/</span>
<span class="k">val</span> <span class="n">newObj</span> <span class="k">=</span> <span class="nc">MongoDBObject</span><span class="o">(</span><span class="err">“</span><span class="n">foo</span><span class="err">”</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="err">“</span><span class="n">bar</span><span class="err">”</span><span class="o">,</span>
                           <span class="err">“</span><span class="n">x</span><span class="err">”</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="err">“</span><span class="n">y</span><span class="err">”</span><span class="o">,</span>
                           <span class="err">“</span><span class="n">pie</span><span class="err">”</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="mf">3.14</span><span class="o">,</span>
                           <span class="err">“</span><span class="n">spam</span><span class="err">”</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="err">“</span><span class="n">eggs</span><span class="err">”</span><span class="o">)&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;/**</span> <span class="nc">Or</span><span class="o">,</span> <span class="n">use</span> <span class="n">a</span> <span class="n">builder</span> <span class="n">interface</span> <span class="o">*/</span>
<span class="k">val</span> <span class="n">builder</span> <span class="k">=</span> <span class="nc">MongoDBObject</span><span class="o">.</span><span class="n">newBuilder</span>
<span class="n">builder</span> <span class="o">+=</span> <span class="err">“</span><span class="n">foo</span><span class="err">”</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="err">“</span><span class="n">bar</span><span class="err">”</span>
<span class="n">builder</span> <span class="o">+=</span> <span class="err">“</span><span class="n">x</span><span class="err">”</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="err">“</span><span class="n">y</span><span class="err">”</span>
<span class="n">builder</span> <span class="o">+=</span> <span class="o">(</span><span class="err">“</span><span class="n">pie</span><span class="err">”</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="mf">3.14</span><span class="o">)</span>
<span class="n">builder</span> <span class="o">+=</span> <span class="o">(</span><span class="err">“</span><span class="n">spam</span><span class="err">”</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="err">“</span><span class="n">eggs</span><span class="err">”</span><span class="o">,</span> <span class="err">“</span><span class="n">mmm</span><span class="err">”</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="err">“</span><span class="n">bacon</span><span class="err">”</span><span class="o">)</span>
<span class="k">val</span> <span class="n">newObj</span> <span class="k">=</span> <span class="n">builder</span><span class="o">.</span><span class="n">result</span></code></pre></div></p>

<p>The goal of this syntax is to be more readable, similar to what one might expect from a dynamic language like Ruby or Python.</p>

<!--more-->

<p>In contrast, the same statements in Java tend to be more verbose:</p>

<p><div class="highlight"><pre><code class="language-scala" data-lang="scala"><span class="k">import</span> <span class="nn">com.mongodb.</span><span class="o">*;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="nc">DBObject</span> <span class="n">newObj</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">BasicDBObject</span><span class="o">();</span>
<span class="n">newObj</span><span class="o">.</span><span class="n">put</span><span class="o">(</span><span class="err">“</span><span class="n">foo</span><span class="err">”</span><span class="o">,</span> <span class="err">“</span><span class="n">bar</span><span class="err">”</span><span class="o">);</span>
<span class="n">newObj</span><span class="o">.</span><span class="n">put</span><span class="o">(</span><span class="err">“</span><span class="n">x</span><span class="err">”</span><span class="o">,</span> <span class="err">“</span><span class="n">y</span><span class="err">”</span><span class="o">);</span>
<span class="n">newObj</span><span class="o">.</span><span class="n">put</span><span class="o">(</span><span class="err">“</span><span class="n">pie</span><span class="err">”</span><span class="o">,</span> <span class="mf">3.14</span><span class="o">);</span>
<span class="n">newObj</span><span class="o">.</span><span class="n">put</span><span class="o">(</span><span class="err">“</span><span class="n">spam</span><span class="err">”</span><span class="o">,</span> <span class="err">“</span><span class="n">eggs</span><span class="err">”</span><span class="o">);&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;/**</span> <span class="n">or</span><span class="o">,</span> <span class="n">builder</span> <span class="n">style</span> <span class="o">*/&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="nc">BasicDBObjectBuilder</span> <span class="n">builder</span> <span class="k">=</span> <span class="nc">BasicDBObjectBuilder</span><span class="o">.</span><span class="n">start</span><span class="o">();</span>
<span class="n">builder</span><span class="o">.</span><span class="n">add</span><span class="o">(</span><span class="err">“</span><span class="n">foo</span><span class="err">”</span><span class="o">,</span> <span class="err">“</span><span class="n">bar</span><span class="err">”</span><span class="o">);</span>
<span class="n">builder</span><span class="o">.</span><span class="n">add</span><span class="o">(</span><span class="err">“</span><span class="n">x</span><span class="err">”</span><span class="o">,</span> <span class="err">“</span><span class="n">y</span><span class="err">”</span><span class="o">);</span>
<span class="n">builder</span><span class="o">.</span><span class="n">add</span><span class="o">(</span><span class="err">“</span><span class="n">pie</span><span class="err">”</span><span class="o">,</span> <span class="mf">3.14</span><span class="o">);</span>
<span class="n">builder</span><span class="o">.</span><span class="n">add</span><span class="o">(</span><span class="err">“</span><span class="n">spam</span><span class="err">”</span><span class="o">,</span> <span class="err">“</span><span class="n">eggs</span><span class="err">”</span><span class="o">);</span>
<span class="n">builder</span><span class="o">.</span><span class="n">add</span><span class="o">(</span><span class="err">“</span><span class="n">mmm</span><span class="err">”</span><span class="o">,</span> <span class="err">“</span><span class="n">bacon</span><span class="err">”</span><span class="o">);</span>
<span class="nc">DBObject</span> <span class="n">newObj</span> <span class="k">=</span> <span class="n">builder</span><span class="o">.</span><span class="n">get</span><span class="o">();&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span></code></pre></div></p>

<p>The semantics of working with Collections and Cursors in Casbah are similar to the Java driver they wrap, with a bit of Scala-friendly syntactic sugar added for things like <a href="http://www.scala-lang.org/node/111">for comprehensions</a>.  Where Casbah really shines is in its use of a DSL syntax for creating MongoDB Queries.</p>

<p><div class="highlight"><pre><code class="language-scala" data-lang="scala"><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;/**</span> <span class="nc">This</span> <span class="nc">Query</span> <span class="nc">Object</span> <span class="err">…</span> <span class="o">*/</span>
<span class="k">val</span> <span class="n">query</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">MongoDBObject</span><span class="o">(</span>
                <span class="err">“</span><span class="n">foo</span><span class="err">”</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="nc">MongoDObject</span><span class="o">(</span><span class="err">“</span><span class="nc">$gte</span><span class="err">”</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="mi">5</span><span class="o">,</span> <span class="err">“</span><span class="nc">$lte</span><span class="err">”</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="mi">10</span><span class="o">),</span>
                <span class="err">“</span><span class="n">baz</span><span class="err">”</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="mi">5</span><span class="o">,</span>
                <span class="err">“</span><span class="n">x</span><span class="err">”</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="err">“</span><span class="n">y</span><span class="err">”</span><span class="o">,</span>
                <span class="err">“</span><span class="n">n</span><span class="err">”</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="err">“</span><span class="n">r</span><span class="err">”</span>
            <span class="o">)</span>
<span class="cm">/** Can be constructed instead with the Query DSL: */</span>
<span class="k">val</span> <span class="n">queryDSL</span> <span class="k">=</span> <span class="o">(</span><span class="err">“</span><span class="n">foo</span><span class="err">”</span> <span class="nc">$gte</span> <span class="mi">5</span> <span class="nc">$lte</span> <span class="mi">10</span><span class="o">)</span> <span class="o">++</span> <span class="o">(</span><span class="err">“</span><span class="n">baz</span><span class="err">”</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="mi">5</span><span class="o">)</span> <span class="o">++</span> <span class="o">(</span><span class="err">“</span><span class="n">x</span><span class="err">”</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="err">“</span><span class="n">y</span><span class="err">”</span><span class="o">)</span> <span class="o">++</span> <span class="o">(</span><span class="err">“</span><span class="n">n</span><span class="err">”</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="err">“</span><span class="n">r</span><span class="err">”</span><span class="o">)&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;/**</span> <span class="nc">Easily</span> <span class="n">create</span> <span class="n">negated</span> <span class="n">statements</span><span class="o">.</span> 
    <span class="nc">Instead</span> <span class="n">of</span> <span class="n">a</span> <span class="n">nested</span> <span class="nc">DBObject</span> <span class="n">constructor</span> <span class="n">like</span> <span class="k">this:</span> <span class="kt">*/&lt;/p&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">val</span> <span class="n">ltGt</span> <span class="k">=</span> <span class="nc">MongoDBObject</span><span class="o">(</span>
            <span class="err">“</span><span class="n">foo</span><span class="err">”</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="nc">MongoDBObject</span><span class="o">(</span>
                <span class="err">“</span><span class="nc">$not</span><span class="err">”</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="nc">MongoDBObject</span><span class="o">(</span>
                    <span class="err">“</span><span class="nc">$gte</span><span class="err">”</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="mi">15</span><span class="o">,</span> 
                    <span class="err">“</span><span class="nc">$lt</span><span class="err">”</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="mf">35.2</span><span class="o">,</span> 
                    <span class="err">“</span><span class="nc">$ne</span><span class="err">”</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="mi">16</span><span class="o">)</span>
                <span class="o">)</span>
            <span class="o">)&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;/**</span> <span class="nc">Use</span> <span class="nc">Casbah</span><span class="err">’</span><span class="n">s</span> <span class="nc">Query</span> <span class="nc">DSL</span> <span class="n">to</span> <span class="n">say</span> <span class="n">it</span> <span class="n">much</span> <span class="n">simpler</span> <span class="o">*/</span>
<span class="k">val</span> <span class="n">ltGtDSL</span> <span class="k">=</span> <span class="err">“</span><span class="n">foo</span><span class="err">”</span> <span class="nc">$not</span> <span class="o">{</span> <span class="k">_</span> <span class="nc">$gte</span> <span class="mi">15</span> <span class="nc">$lt</span> <span class="mf">35.2</span> <span class="nc">$ne</span> <span class="mi">16</span> <span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span></code></pre></div></p>

<p>All of MongoDB’s <em>$ Operators</em> including Geospatial Queries are supported by Casbah’s DSL.</p>

<p>This is just a small taste of what Casbah and Scala offer to the MongoDB user, but we encourage you to explore more.  <a href="http://api.mongodb.org/scala/casbah/latest/setting_up.html">Version 2.01</a> is now available for download.</p>

]]></content>
  </entry>
  
</feed>
