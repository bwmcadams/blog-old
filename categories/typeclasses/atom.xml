<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: typeclasses | Evil Monkey Labs]]></title>
  <link href="http://blog.evilmonkeylabs.com/categories/typeclasses/atom.xml" rel="self"/>
  <link href="http://blog.evilmonkeylabs.com/"/>
  <updated>2015-04-10T18:20:15-04:00</updated>
  <id>http://blog.evilmonkeylabs.com/</id>
  <author>
    <name><![CDATA[Brendan McAdams]]></name>
    <email><![CDATA[bwmcadams@evilmonkeylabs.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Understanding Scala's Type Classes]]></title>
    <link href="http://blog.evilmonkeylabs.com/2012/06/11/Understanding_Scala_Type_Classes/"/>
    <updated>2012-06-11T00:00:00-04:00</updated>
    <id>http://blog.evilmonkeylabs.com/2012/06/11/Understanding_Scala_Type_Classes</id>
    <content type="html"><![CDATA[<p>Over the last year or so, I have found myself making more and more use of Scala&rsquo;s Type Class system to add flexibility to my code.  This is especially evident in the MongoDB Scala Driver, <a href="Casbah">http://github.com/mongodb/casbah</a>, where the most recent work has been to simplify many features by migrating them to type classes.</p>

<p>During this work however, I&rsquo;ve found during that many otherwise adroit Scala engineers seem befuddled or daunted by the Type Class. It does me no good to take advantage of clever features that my users don&rsquo;t understand, and many will benefit from introducing these concepts to their own code. So let&rsquo;s take a look at what type classes are, as well as how &amp; why we can utilize them.</p>

<p>Wikipedia defines a Type Class as <em>&ldquo;&hellip; a type system construct that supports ad-hoc polymorphism. This is achieved by adding constraints to type variables in parametrically polymorphic types&rdquo;</em>. Admittedly, a bit of a mouthful &ndash; and not very helpful to those of us who are self taught and lack the benefit of a comprehensive academic Computer Science education (myself included). Surely, there must be a way to simplify this concept?</p>

<p>In evaluating these ideas, I&rsquo;ve found it easiest to think of a Type Class (in Scala, at least) as a special kind of <em>adapter</em>, which can impart additional capabilities upon a given type or set of types. In Scala the Type Class is communicated through <em>implicits</em>, and imparts one, or both, of two behaviors. First, a Type Class can be to utilized to <em>filter</em> what types are valid for a given method call (which I detailed in <a href="/2011/07/13/User_Configgable_Type_Filtering_with_Type_Classes/">this earlier post</a>). Second, a Type Class can impart additional features and behaviors upon a type at method invocation time. This latter is much along the lines of an enhanced kind of composition, rather than the weaker inheritance which often plagues similar behaviors in a language like Java.</p>

<p>To better understand what I am describing, let&rsquo;s compare a few concepts around the creation and interaction of custom domain objects. I have several sets of tasks I have had to accomplish in Scala in the past &ndash; and Scala solutions show some elegant Type Class oriented approaches which are rooted in the Standard Library. While this may seem a bit contrived, it is exactly the kind of problem through which <em>I</em> initially came to understand Type Classes –– and is thus an ideal lesson.</p>

<!--more-->


<p>First, let&rsquo;s take a look at <em>sorting</em> and custom objects to best understand how one accomplishes this. It is not an uncommon task in development for us to create our own objects and need to integrate them into Standard Library behaviors, such as sorting. Let&rsquo;s work with a few sample objects in the form of &ldquo;Bank Accounts&rdquo; to look at how this all work (and I&rsquo;m aware of the poor concurrency control, etc. around balance &ndash; this is a contrived example). Here&rsquo;s our Bank Account object:</p>

<p><div class="highlight"><pre><code class="language-scala" data-lang="scala"><span class="k">class</span> <span class="nc">BankAccount</span><span class="o">(</span><span class="k">val</span> <span class="n">accountNumber</span><span class="k">:</span> <span class="kt">Long</span><span class="o">,</span> <span class="k">val</span> <span class="n">holderFirst</span><span class="k">:</span> <span class="kt">String</span><span class="o">,</span>
                  <span class="k">val</span> <span class="n">holderMiddle</span><span class="k">:</span> <span class="kt">Option</span><span class="o">[</span><span class="kt">String</span><span class="o">],</span> <span class="k">val</span> <span class="n">holderLast</span><span class="k">:</span> <span class="kt">String</span><span class="o">,</span>
                  <span class="k">var</span> <span class="n">balance</span><span class="k">:</span> <span class="kt">Double</span><span class="o">)</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">def</span> <span class="n">holderName</span> <span class="k">=</span>
    <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;%</span><span class="n">s</span><span class="o">,</span> <span class="o">%</span><span class="n">s</span> <span class="o">%</span><span class="n">s</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;.</span><span class="n">format</span><span class="o">(</span><span class="n">holderLast</span><span class="o">,</span> <span class="n">holderFirst</span><span class="o">,</span> <span class="n">holderMiddle</span><span class="o">.</span><span class="n">getOrElse</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;&amp;</span><span class="n">rdquo</span><span class="o">;))&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">override</span> <span class="k">def</span> <span class="n">toString</span><span class="k">:</span> <span class="kt">String</span> <span class="o">=</span>
    <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;{</span> <span class="nc">Acct</span> <span class="k">#</span> <span class="o">%</span><span class="n">s</span><span class="o">,</span> <span class="nc">Held</span> <span class="n">by</span> <span class="o">%</span><span class="n">s</span> <span class="k">with</span> <span class="n">a</span> <span class="n">balance</span> <span class="n">of</span> <span class="n">$</span><span class="o">%</span><span class="mf">8.2f</span><span class="o">}&amp;</span><span class="n">rdquo</span><span class="o">;.</span><span class="n">format</span><span class="o">(</span>
        <span class="n">accountNumber</span><span class="o">,</span> <span class="n">holderName</span><span class="o">,</span> <span class="n">balance</span>
    <span class="o">)&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span></code></pre></div></p>

<p>We can easily populate collections with instances of these accounts as well.</p>

<p><div class="highlight"><pre><code class="language-scala" data-lang="scala"><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">val</span> <span class="n">accounts</span> <span class="k">=</span> <span class="nc">List</span><span class="o">(</span><span class="k">new</span> <span class="nc">BankAccount</span><span class="o">(</span><span class="mi">1000893</span><span class="o">,</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="nc">Brendan</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;,</span> <span class="nc">Some</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">W</span><span class="o">.&amp;</span><span class="n">rdquo</span><span class="o">;),</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="nc">McAdams</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;,</span>
                                    <span class="mf">1234.56</span><span class="o">),</span>
                    <span class="k">new</span> <span class="nc">BankAccount</span><span class="o">(</span><span class="mi">1000256</span><span class="o">,</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="nc">John</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;,</span> <span class="nc">None</span><span class="o">,</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="nc">Smith</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;,</span>
                                    <span class="mf">10000291.83</span><span class="o">),</span>
                    <span class="k">new</span> <span class="nc">BankAccount</span><span class="o">(</span><span class="mi">1000012</span><span class="o">,</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="nc">Jane</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;,</span> <span class="nc">None</span><span class="o">,</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="nc">Doe</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;,</span>
                                    <span class="mf">45.28</span><span class="o">),</span>
                    <span class="k">new</span> <span class="nc">BankAccount</span><span class="o">(</span><span class="mi">4002158</span><span class="o">,</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="nc">Alan</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;,</span> <span class="nc">None</span><span class="o">,</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="nc">Smithee</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;,</span>
                                    <span class="mf">834567.00</span><span class="o">))&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">println</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="nc">Bank</span> <span class="nc">Accounts</span><span class="k">:</span> <span class="kt">&amp;rdquo</span><span class="o">;</span> <span class="o">+</span> <span class="n">accounts</span><span class="o">)&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span></code></pre></div></p>

<p>Given collections of instances of these bank accounts in each language, we&rsquo;d like to easily sort them –– given an arbitrary set of requirements.  Now, neither Scala or Java can &ldquo;automatically&rdquo; figure out how to sort these, instead requiring assistance from us (the developer).</p>

<p><div class="highlight"><pre><code class="language-scala" data-lang="scala"><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">val</span> <span class="n">sortedAccounts</span> <span class="k">=</span> <span class="n">accounts</span><span class="o">.</span><span class="n">sorted</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">println</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;*</span> <span class="nc">Sorted</span> <span class="nc">Accounts</span><span class="k">:</span> <span class="kt">&amp;rdquo</span><span class="o">;</span> <span class="o">+</span> <span class="n">sortedAccounts</span><span class="o">)</span></code></pre></div></p>

<p>It is unfortunately not <em>quite</em> that easy, as the above code will fail to compile asking for a missing argument:</p>

<p><div class="highlight"><pre><code class="language-scala" data-lang="scala"><span class="nc">BankAccount</span><span class="o">.</span><span class="n">scala</span><span class="k">:</span><span class="err">39</span><span class="kt">:</span> <span class="kt">error:</span> <span class="kt">No</span> <span class="kt">implicit</span> <span class="kt">Ordering</span> <span class="kt">defined</span> <span class="kt">for</span> <span class="kt">this.BankAccount.</span>
<span class="kt">val</span> <span class="kt">sortedAccounts</span> <span class="o">=</span> <span class="n">accounts</span><span class="o">.</span><span class="n">sorted</span>
                                    <span class="o">^</span>
<span class="n">one</span> <span class="n">error</span> <span class="n">found</span></code></pre></div></p>

<p>Like in Java, we need to provide Scala information about how to sort a class of type <code>BankAccount</code>.  In Java however, we would need to use inheritance and actually change the structure of <code>BankAccount</code> by implementing the <code>Comparable</code> interface.  Personally, I&rsquo;ve never been a fan of that approach &ndash; changing a class directly can lead to behavioral oddities. It also has two major limitations that I&rsquo;ve run into in the past.</p>

<p>First we get locked into only <em>one</em> way to sort a <code>BankAccount</code>. If initially we want to sort by <code>accountNumber</code>, and code that in we are restricted should another part of our application need to sort by <code>balance</code>. We either work around the builtin sort methods or subclass, introducing more complications.</p>

<p>Second, we are severely restricted in our ability to handle this with a third party class. What if <code>BankAccount</code> is a vendor supplied class and is <code>final</code> so we cannot even create an extended version which implements comparable? Suddenly we are restricted from taking advantage of the sort routines built into the standard library and have to reinvent our own. Not ideal.</p>

<p>Instead, with Scala, the implementation of our <code>Comparable</code> equivalent is done externally in a Type Class of type <code>scala.math.Ordering</code>. When implemented, our instance of <code>Ordering</code> will both control what classes can be sorted as well as providing information about how to sort. But because it is implemented externally and provided as an implicit we can provide multiple versions should we need different sorting behaviors down the line*.</p>

<p>It is important to note that a Type Class in Scala is typically <em>stateless</em>. It is provided to callers as a single static instance based on Type, and only infers necessary state information from <em>instances of the referenced type</em> passed to its methods. The Type Class is controlling how instances of a given type should behave generically and should be side effect free.</p>

<p>The normal way of providing a typeclass is to create a static implicit object of a trait implementation of <code>TypeClass[A]</code> in scope. I prefer to declare the base trait separately from the implicit object to encourage easier reusage.</p>

<p>For providing <a href="http://www.scala-lang.org/archives/downloads/distrib/files/nightly/docs/library/scala/math/Ordering.html">Ordering[BankAccount]</a>, we need to implement an abstract method <code>def compare(x: T, y: T): Int</code> which compares two instances of <code>T</code> (Where, in this case, <code>T</code> represents <code>BankAccount</code>) and returns an <code>Int</code> signifying their order against one another. Negative represents that <code>x &lt; y</code>, positive that <code>x &gt; y</code> and zero if <code>x == y</code>.</p>

<p>Let&rsquo;s take a look at how our <code>Ordering</code> instance for sorting a <code>BankAccount</code> by <code>accountNumber</code> might look.</p>

<p><div class="highlight"><pre><code class="language-scala" data-lang="scala"><span class="k">trait</span> <span class="nc">BankAccountNumberOrder</span> <span class="k">extends</span> <span class="n">scala</span><span class="o">.</span><span class="n">math</span><span class="o">.</span><span class="nc">Ordering</span><span class="o">[</span><span class="kt">BankAccount</span><span class="o">]</span> <span class="o">{</span>
  <span class="k">def</span> <span class="n">compare</span><span class="o">(</span><span class="n">x</span><span class="k">:</span> <span class="kt">BankAccount</span><span class="o">,</span> <span class="n">y</span><span class="k">:</span> <span class="kt">BankAccount</span><span class="o">)</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">x</span><span class="o">.</span><span class="n">accountNumber</span> <span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span> <span class="n">y</span><span class="o">.</span><span class="n">accountNumber</span><span class="o">)</span>
      <span class="o">-</span><span class="mi">1</span>
    <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">x</span><span class="o">.</span><span class="n">accountNumber</span> <span class="o">&gt;</span> <span class="n">y</span><span class="o">.</span><span class="n">accountNumber</span><span class="o">)</span>
      <span class="mi">1</span>
    <span class="k">else</span>
      <span class="mi">0</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">implicit</span> <span class="k">object</span> <span class="nc">BankAccountNumberSort</span> <span class="k">extends</span> <span class="nc">BankAccountNumberOrder</span></code></pre></div></p>

<p>Now with an implicit instance of <code>Ordering[BankAccount]</code> in scope, our sort can succeed. Running our code should produce expected results:</p>

<p><div class="highlight"><pre><code class="language-scala" data-lang="scala"><span class="nc">Bank</span> <span class="nc">Accounts</span><span class="k">:</span> <span class="kt">List</span><span class="o">({</span> <span class="kt">Acct</span> <span class="k">#</span> <span class="err">1000893</span><span class="o">,</span> <span class="kt">Held</span> <span class="kt">by</span> <span class="kt">McAdams</span><span class="o">,</span> <span class="kt">Brendan</span> <span class="kt">W.</span> <span class="kt">with</span> <span class="kt">a</span> <span class="kt">balance</span> <span class="kt">of</span> <span class="kt">$</span> <span class="err">1234</span><span class="kt">.</span><span class="err">56</span><span class="o">},</span> <span class="o">{</span> <span class="nc">Acct</span> <span class="k">#</span> <span class="mi">1000256</span><span class="o">,</span> <span class="nc">Held</span> <span class="n">by</span> <span class="nc">Smith</span><span class="o">,</span> <span class="nc">John</span>  <span class="k">with</span> <span class="n">a</span> <span class="n">balance</span> <span class="n">of</span> <span class="n">$10000291</span><span class="o">.</span><span class="mi">83</span><span class="o">},</span> <span class="o">{</span> <span class="nc">Acct</span> <span class="k">#</span> <span class="mi">1000012</span><span class="o">,</span> <span class="nc">Held</span> <span class="n">by</span> <span class="nc">Doe</span><span class="o">,</span> <span class="nc">Jane</span>  <span class="k">with</span> <span class="n">a</span> <span class="n">balance</span> <span class="n">of</span> <span class="n">$</span>   <span class="mf">45.28</span><span class="o">},</span> <span class="o">{</span> <span class="nc">Acct</span> <span class="k">#</span> <span class="mi">4002158</span><span class="o">,</span> <span class="nc">Held</span> <span class="n">by</span> <span class="nc">Smithee</span><span class="o">,</span> <span class="nc">Alan</span>  <span class="k">with</span> <span class="n">a</span> <span class="n">balance</span> <span class="n">of</span> <span class="n">$834567</span><span class="o">.</span><span class="mi">00</span><span class="o">})&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="nc">Sorted</span> <span class="nc">Accounts</span><span class="k">:</span> <span class="kt">List</span><span class="o">({</span> <span class="kt">Acct</span> <span class="k">#</span> <span class="err">1000012</span><span class="o">,</span> <span class="kt">Held</span> <span class="kt">by</span> <span class="kt">Doe</span><span class="o">,</span> <span class="kt">Jane</span>  <span class="kt">with</span> <span class="kt">a</span> <span class="kt">balance</span> <span class="kt">of</span> <span class="kt">$</span>   <span class="err">45</span><span class="kt">.</span><span class="err">28</span><span class="o">},</span> <span class="o">{</span> <span class="nc">Acct</span> <span class="k">#</span> <span class="mi">1000256</span><span class="o">,</span> <span class="nc">Held</span> <span class="n">by</span> <span class="nc">Smith</span><span class="o">,</span> <span class="nc">John</span>  <span class="k">with</span> <span class="n">a</span> <span class="n">balance</span> <span class="n">of</span> <span class="n">$10000291</span><span class="o">.</span><span class="mi">83</span><span class="o">},</span> <span class="o">{</span> <span class="nc">Acct</span> <span class="k">#</span> <span class="mi">1000893</span><span class="o">,</span> <span class="nc">Held</span> <span class="n">by</span> <span class="nc">McAdams</span><span class="o">,</span> <span class="nc">Brendan</span> <span class="n">W</span><span class="o">.</span> <span class="k">with</span> <span class="n">a</span> <span class="n">balance</span> <span class="n">of</span> <span class="n">$</span> <span class="mf">1234.56</span><span class="o">},</span> <span class="o">{</span> <span class="nc">Acct</span> <span class="k">#</span> <span class="mi">4002158</span><span class="o">,</span> <span class="nc">Held</span> <span class="n">by</span> <span class="nc">Smithee</span><span class="o">,</span> <span class="nc">Alan</span>  <span class="k">with</span> <span class="n">a</span> <span class="n">balance</span> <span class="n">of</span> <span class="n">$834567</span><span class="o">.</span><span class="mi">00</span><span class="o">})</span></code></pre></div></p>

<p>The big benefit here (in my eyes) is that we didn&rsquo;t need to modify our <code>BankAccount</code> class at all to provide this behavior. <em>Even if <code>BankAccount</code> was a sealed third party class</em> we can provide sorting information for it. This is far superior to an inheritance based solution such as Java&rsquo;s. And if we wanted later to sort by <code>balance</code> instead of <code>accountNumber</code> we can explicitly pass a different instance to sort:</p>

<p><div class="highlight"><pre><code class="language-scala" data-lang="scala"><span class="k">object</span> <span class="nc">BankAccountBalanceOrder</span> <span class="k">extends</span> <span class="n">scala</span><span class="o">.</span><span class="n">math</span><span class="o">.</span><span class="nc">Ordering</span><span class="o">[</span><span class="kt">BankAccount</span><span class="o">]</span> <span class="o">{</span>
  <span class="k">def</span> <span class="n">compare</span><span class="o">(</span><span class="n">x</span><span class="k">:</span> <span class="kt">BankAccount</span><span class="o">,</span> <span class="n">y</span><span class="k">:</span> <span class="kt">BankAccount</span><span class="o">)</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">x</span><span class="o">.</span><span class="n">balance</span> <span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span> <span class="n">y</span><span class="o">.</span><span class="n">balance</span><span class="o">)</span>
      <span class="o">-</span><span class="mi">1</span>
    <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">x</span><span class="o">.</span><span class="n">balance</span> <span class="o">&gt;</span> <span class="n">y</span><span class="o">.</span><span class="n">balance</span><span class="o">)</span>
      <span class="mi">1</span>
    <span class="k">else</span>
      <span class="mi">0</span>
<span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">val</span> <span class="n">sortedByBalance</span> <span class="k">=</span> <span class="n">accounts</span><span class="o">.</span><span class="n">sorted</span><span class="o">(</span><span class="nc">BankAccountBalanceOrder</span><span class="o">)&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">println</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">$</span> <span class="nc">Sorted</span> <span class="nc">By</span> <span class="nc">Balance</span><span class="k">:</span> <span class="kt">&amp;rdquo</span><span class="o">;</span> <span class="o">+</span> <span class="n">sortedByBalance</span><span class="o">)</span></code></pre></div></p>

<p>Complete control is passed to us from an externally controlled system. I&rsquo;ll save the details for a future post, but we can even use a type class to define what it means if I say <code>brendansAccount - johnsAccount</code> using an instance of <code>scala.math.Numeric[BankAccount]</code>.</p>

<p>Now go forth and Type with Class.</p>

<p>* <a href="http://twitter.com/djspiewak">Daniel Spiewak</a> points out that Sun realized this complication as well a few Java releases back and introduced <a href="http://docs.oracle.com/javase/6/docs/api/java/util/Comparator.html">Comparator</a>, which is very similar to this Type Class approach.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[User Configurable Type Filtering with Scala Type Classes]]></title>
    <link href="http://blog.evilmonkeylabs.com/2011/07/13/User_Configgable_Type_Filtering_with_Type_Classes/"/>
    <updated>2011-07-13T00:00:00-04:00</updated>
    <id>http://blog.evilmonkeylabs.com/2011/07/13/User_Configgable_Type_Filtering_with_Type_Classes</id>
    <content type="html"><![CDATA[<p>When I woke up this morning and looked through my twitter mentions, I found this gem sitting there from the middle of the night:</p>

<p><img src="/images/oid_lt_casbah.png" alt="@rit when using &quot;_id&quot; $lt new ObjectId(timestamp) it throws ValidDateOrNumericType, but we might want to select records after id timestamp (from @justthor)" /></p>

<p>The user in question is complaining that when using <a href="http://github.com/mongodb/casbah">Casbah&rsquo;s DSL</a>, it doesn&rsquo;t allow a MongoDB <code>ObjectId</code> as a valid type to the <code>$lt</code> operator.  But as <a href="http://twitter.com/justthor">@justthor</a> points out, it is entirely possible to use <code>ObjectId</code> with the <code>$lt</code> operator since it contains timestamp information (See the <a href="http://www.mongodb.org/display/DOCS/Object+IDs">documentation for ObjectId</a> if you want nitty gritty detail).   When I wrote the code for <code>$lt</code> however, I needed to decide what types were valid and weren&rsquo;t valid; I can&rsquo;t exactly guarantee type safety wih a DSL like Casbah&rsquo;s, but I can enforce type <em>sanity</em>.  Whether I forgot that you can use <code>ObjectId</code> in <code>$lt</code> or just decided that most people wouldn&rsquo;t need to is irrelevant &mdash; I had in this case blocked a user from accomplishing something valid that they needed to.</p>

<p>It is a more than reasonable problem, and my initial reaction was &ldquo;oh crap, I guess I need to patch that&rdquo;.  But what I forgot is that a few releases back, I rearchitected Casbah to obviate this kind of problem.  Casbah now allows for a user definable (or, if you prefer, &ldquo;adjustable&rdquo;) type filter on any of its DSL operators.  This is accomplished through a very simple application of Scala Type Classes, a term which gets batted around a lot in the Scala community, but few seem able to understand or articulate its meaning to us lesser mortals.  Over the last few months I&rsquo;ve come to understand Type Classes much more deeply than I think I ever expected, and applied these lessons to the design of my code.  As I failed to document the power and usage of these features at the time, I am going to be writing some additional detailed articles about <em>my</em> understanding of Type Classes in the next few weeks, and this is the first of such explanations.</p>

<p>So the question at hand is, how exactly does Casbah allow us to do this magical type filtering that I just mentioned, without patching the driver or creating a new release?  First, let&rsquo;s look at how Casbah used to do things before the introduction of the as-yet unexplained Type Class introduction.</p>

<!--more-->


<p><div class="highlight"><pre><code class="language-scala" data-lang="scala"><span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;*</span>
 <span class="o">*</span> <span class="nc">Trait</span> <span class="n">to</span> <span class="n">provide</span> <span class="n">the</span> <span class="nc">$lt</span> <span class="o">(</span><span class="nc">Less</span> <span class="nc">Than</span><span class="o">)</span> <span class="n">method</span> <span class="n">on</span> <span class="n">appropriate</span> <span class="n">callers</span><span class="o">.</span>
 <span class="o">*</span>
 <span class="o">*</span> <span class="nc">Targets</span> <span class="o">(</span><span class="n">takes</span> <span class="n">a</span> <span class="n">right</span><span class="o">-</span><span class="n">hand</span> <span class="n">value</span> <span class="n">of</span><span class="o">)</span> <span class="nc">String</span><span class="o">,</span> <span class="nc">AnyVal</span> <span class="o">(</span><span class="n">see</span> <span class="nc">Scala</span> <span class="n">docs</span> <span class="n">but</span> <span class="n">basically</span> <span class="nc">Int</span><span class="o">,</span> <span class="nc">Long</span><span class="o">,</span> <span class="nc">Char</span><span class="o">,</span> <span class="nc">Byte</span><span class="o">,</span> <span class="n">etc</span><span class="o">)</span>
 <span class="o">*</span> <span class="nc">DBObject</span> <span class="n">and</span> <span class="nc">Map</span><span class="o">[</span><span class="kt">String</span>, <span class="kt">Any</span><span class="o">].</span>
 <span class="o">*</span>
 <span class="o">*</span>
 <span class="o">*</span> <span class="nd">@author</span> <span class="nc">Brendan</span> <span class="n">W</span><span class="o">.</span> <span class="nc">McAdams</span> <span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;&amp;#109;&amp;#x61;&amp;#105;&amp;#108;&amp;#x74;&amp;#x6f;&amp;#58;&amp;#98;&amp;#x72;&amp;#x65;&amp;#110;&amp;#x64;&amp;#97;&amp;#x6e;&amp;#64;&amp;#x31;&amp;#48;&amp;#103;&amp;#x65;&amp;#110;&amp;#46;&amp;#x63;&amp;#111;&amp;#109;&quot;</span><span class="o">&gt;&amp;</span><span class="k">#</span><span class="mi">98</span><span class="o">;&amp;</span><span class="k">#</span><span class="n">x72</span><span class="o">;&amp;</span><span class="k">#</span><span class="mi">101</span><span class="o">;&amp;</span><span class="k">#</span><span class="mi">110</span><span class="o">;&amp;</span><span class="k">#</span><span class="mi">100</span><span class="o">;&amp;</span><span class="k">#</span><span class="mi">97</span><span class="o">;&amp;</span><span class="k">#</span><span class="n">x6e</span><span class="o">;&amp;</span><span class="k">#</span><span class="mi">64</span><span class="o">;&amp;</span><span class="k">#</span><span class="mi">49</span><span class="o">;&amp;</span><span class="k">#</span><span class="n">x30</span><span class="o">;&amp;</span><span class="k">#</span><span class="mi">103</span><span class="o">;&amp;</span><span class="k">#</span><span class="n">x65</span><span class="o">;&amp;</span><span class="k">#</span><span class="mi">110</span><span class="o">;&amp;</span><span class="k">#</span><span class="mi">46</span><span class="o">;&amp;</span><span class="k">#</span><span class="n">x63</span><span class="o">;&amp;</span><span class="k">#</span><span class="n">x6f</span><span class="o">;&amp;</span><span class="k">#</span><span class="n">x6d</span><span class="o">;&lt;/</span><span class="n">a</span><span class="o">&gt;</span>
 <span class="o">*</span> <span class="nd">@see</span> <span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%3C%2C%3C%3D%2C%3E%2C%3E%3D&quot;</span><span class="o">&gt;</span><span class="n">http</span><span class="o">://</span><span class="n">www</span><span class="o">.</span><span class="n">mongodb</span><span class="o">.</span><span class="n">org</span><span class="o">/</span><span class="n">display</span><span class="o">/</span><span class="nc">DOCS</span><span class="o">/</span><span class="nc">Advanced</span><span class="o">+</span><span class="nc">Queries</span><span class="k">#</span><span class="nc">AdvancedQueries</span><span class="o">-%</span><span class="mi">3</span><span class="n">C</span><span class="o">%</span><span class="mi">2</span><span class="n">C</span><span class="o">%</span><span class="mi">3</span><span class="n">C</span><span class="o">%</span><span class="mi">3</span><span class="n">D</span><span class="o">%</span><span class="mi">2</span><span class="n">C</span><span class="o">%</span><span class="mi">3</span><span class="n">E</span><span class="o">%</span><span class="mi">2</span><span class="n">C</span><span class="o">%</span><span class="mi">3</span><span class="n">E</span><span class="o">%</span><span class="mi">3</span><span class="n">D</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;</span>
 <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
<span class="k">trait</span> <span class="nc">LessThanOp</span> <span class="k">extends</span> <span class="nc">QueryOperator</span> <span class="o">{</span>
  <span class="k">private</span> <span class="k">val</span> <span class="n">oper</span> <span class="k">=</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="nc">$lt</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">def</span> <span class="nc">$lt</span><span class="o">(</span><span class="n">target</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span> <span class="k">=</span> <span class="n">op</span><span class="o">(</span><span class="n">oper</span><span class="o">,</span> <span class="n">target</span><span class="o">)</span>
  <span class="k">def</span> <span class="nc">$lt</span><span class="o">(</span><span class="n">target</span><span class="k">:</span> <span class="kt">java.util.Date</span><span class="o">)</span> <span class="k">=</span> <span class="n">op</span><span class="o">(</span><span class="n">oper</span><span class="o">,</span> <span class="n">target</span><span class="o">)</span>
  <span class="k">def</span> <span class="nc">$lt</span><span class="o">(</span><span class="n">target</span><span class="k">:</span> <span class="kt">AnyVal</span><span class="o">)</span> <span class="k">=</span> <span class="n">op</span><span class="o">(</span><span class="n">oper</span><span class="o">,</span> <span class="n">target</span><span class="o">)</span>
  <span class="k">def</span> <span class="nc">$lt</span><span class="o">(</span><span class="n">target</span><span class="k">:</span> <span class="kt">DBObject</span><span class="o">)</span> <span class="k">=</span> <span class="n">op</span><span class="o">(</span><span class="n">oper</span><span class="o">,</span> <span class="n">target</span><span class="o">)</span>
  <span class="k">def</span> <span class="nc">$lt</span><span class="o">(</span><span class="n">target</span><span class="k">:</span> <span class="kt">Map</span><span class="o">[</span><span class="kt">String</span>, <span class="kt">Any</span><span class="o">])</span> <span class="k">=</span> <span class="n">op</span><span class="o">(</span><span class="n">oper</span><span class="o">,</span> <span class="n">target</span><span class="o">.</span><span class="n">asDBObject</span><span class="o">)</span>
<span class="o">}</span></code></pre></div></p>

<p>The <code>op</code> method is just a helper function which assists the DSL in constructing a valid MongoDB query under the covers; it&rsquo;s not particularly relevant to this discussion so let&rsquo;s leave it aside for now.  What <em>is</em> important is to note that this is a very naive approach to the DSL game &mdash; it is neither type safe or type sane.  It has some very basic support for handling &ldquo;special&rdquo; types like <code>String</code>, <code>java.util.Date</code>, <code>DBObject</code> and <code>Map[String, Any]</code> but blindly allows anything which is <code>AnyVal</code> through.  There are, in my opinion, three problems here:</p>

<ul>
<li>Is blindly passing <code>AnyVal</code> a good idea? Typically it consists of things like <code>Int</code>, <code>Char</code>, <code>Boolean</code>, etc but can we be certain this is a safe assumption?</li>
<li>What if a user defines a custom type which they serialize to MongoDB as something which supports <code>$lt</code> &mdash;  How do they use that type with the DSL without patching Casbah itself? <code>BigDecimal</code> is an example of this; the current code does not allow it to be used at all with <code>$lt</code>.</li>
<li>What if a user has a domain specific reason to <em>restrict</em> certain of these types? I shouldn&rsquo;t even need to manufacture an example here: Users should be able to restrict types without patching code, if possible</li>
</ul>


<p>These questions and the fact that I kept patching bugs, adding types, etc on user request led me to seek a new solution while working on Casbah 2.0. While searching for this solution I started to gain a rudamentary understanding of Type Classes and their power, and embarked upon a quest to give the users of Casbah flexible control over the types the DSL will and will not allow through.  Of course, I neglected to adequately document those changes, until now.</p>

<p>After the conversion to Type Classes, here&rsquo;s what the <code>$lt</code> operator&rsquo;s code looks like today::</p>

<p><div class="highlight"><pre><code class="language-scala" data-lang="scala"><span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;*</span>
 <span class="o">*</span> <span class="nc">Trait</span> <span class="n">to</span> <span class="n">provide</span> <span class="n">the</span> <span class="nc">$lt</span> <span class="o">(</span><span class="nc">Less</span> <span class="nc">Than</span><span class="o">)</span> <span class="n">method</span> <span class="n">on</span> <span class="n">appropriate</span> <span class="n">callers</span><span class="o">.</span>
 <span class="o">*</span>
 <span class="o">*</span> <span class="nc">Targets</span> <span class="o">(</span><span class="n">takes</span> <span class="n">a</span> <span class="n">right</span><span class="o">-</span><span class="n">hand</span> <span class="n">value</span> <span class="n">of</span><span class="o">)</span> <span class="nc">String</span><span class="o">,</span> <span class="nc">Numeric</span><span class="o">,</span> <span class="nc">JDK</span> <span class="nc">And</span> <span class="nc">Joda</span> <span class="nc">Dates</span><span class="o">,</span>
 <span class="o">*</span> <span class="nc">Array</span><span class="o">,</span> <span class="nc">DBObject</span> <span class="o">(</span><span class="n">and</span> <span class="nc">DBList</span><span class="o">),</span> <span class="nc">Iterable</span><span class="o">[</span><span class="k">_</span><span class="o">]</span> <span class="n">and</span> <span class="nc">Tuple1</span><span class="o">-&gt;</span><span class="mf">22.</span>
 <span class="o">*</span>
 <span class="o">*</span>
 <span class="o">*</span> <span class="nd">@author</span> <span class="nc">Brendan</span> <span class="n">W</span><span class="o">.</span> <span class="nc">McAdams</span> <span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;&amp;#109;&amp;#x61;&amp;#105;&amp;#x6c;&amp;#x74;&amp;#x6f;&amp;#x3a;&amp;#x62;&amp;#114;&amp;#x65;&amp;#x6e;&amp;#x64;&amp;#97;&amp;#x6e;&amp;#64;&amp;#x31;&amp;#x30;&amp;#103;&amp;#x65;&amp;#110;&amp;#x2e;&amp;#x63;&amp;#111;&amp;#x6d;&quot;</span><span class="o">&gt;&amp;</span><span class="k">#</span><span class="mi">98</span><span class="o">;&amp;</span><span class="k">#</span><span class="n">x72</span><span class="o">;&amp;</span><span class="k">#</span><span class="n">x65</span><span class="o">;&amp;</span><span class="k">#</span><span class="mi">110</span><span class="o">;&amp;</span><span class="k">#</span><span class="mi">100</span><span class="o">;&amp;</span><span class="k">#</span><span class="n">x61</span><span class="o">;&amp;</span><span class="k">#</span><span class="mi">110</span><span class="o">;&amp;</span><span class="k">#</span><span class="mi">64</span><span class="o">;&amp;</span><span class="k">#</span><span class="mi">49</span><span class="o">;&amp;</span><span class="k">#</span><span class="mi">48</span><span class="o">;&amp;</span><span class="k">#</span><span class="n">x67</span><span class="o">;&amp;</span><span class="k">#</span><span class="n">x65</span><span class="o">;&amp;</span><span class="k">#</span><span class="n">x6e</span><span class="o">;&amp;</span><span class="k">#</span><span class="mi">46</span><span class="o">;&amp;</span><span class="k">#</span><span class="mi">99</span><span class="o">;&amp;</span><span class="k">#</span><span class="n">x6f</span><span class="o">;&amp;</span><span class="k">#</span><span class="mi">109</span><span class="o">;&lt;/</span><span class="n">a</span><span class="o">&gt;</span>
 <span class="o">*</span> <span class="nd">@see</span> <span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%3C%2C%3C%3D%2C%3E%2C%3E%3D&quot;</span><span class="o">&gt;</span><span class="n">http</span><span class="o">://</span><span class="n">www</span><span class="o">.</span><span class="n">mongodb</span><span class="o">.</span><span class="n">org</span><span class="o">/</span><span class="n">display</span><span class="o">/</span><span class="nc">DOCS</span><span class="o">/</span><span class="nc">Advanced</span><span class="o">+</span><span class="nc">Queries</span><span class="k">#</span><span class="nc">AdvancedQueries</span><span class="o">-%</span><span class="mi">3</span><span class="n">C</span><span class="o">%</span><span class="mi">2</span><span class="n">C</span><span class="o">%</span><span class="mi">3</span><span class="n">C</span><span class="o">%</span><span class="mi">3</span><span class="n">D</span><span class="o">%</span><span class="mi">2</span><span class="n">C</span><span class="o">%</span><span class="mi">3</span><span class="n">E</span><span class="o">%</span><span class="mi">2</span><span class="n">C</span><span class="o">%</span><span class="mi">3</span><span class="n">E</span><span class="o">%</span><span class="mi">3</span><span class="n">D</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;</span>
 <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
<span class="k">trait</span> <span class="nc">LessThanOp</span> <span class="k">extends</span> <span class="nc">QueryOperator</span> <span class="o">{</span>
  <span class="k">private</span> <span class="k">val</span> <span class="n">oper</span> <span class="k">=</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="nc">$lt</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">def</span> <span class="nc">$lt</span><span class="o">(</span><span class="n">target</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span> <span class="k">=</span> <span class="n">op</span><span class="o">(</span><span class="n">oper</span><span class="o">,</span> <span class="n">target</span><span class="o">)</span>
  <span class="k">def</span> <span class="nc">$lt</span><span class="o">(</span><span class="n">target</span><span class="k">:</span> <span class="kt">DBObject</span><span class="o">)</span> <span class="k">=</span> <span class="n">op</span><span class="o">(</span><span class="n">oper</span><span class="o">,</span> <span class="n">target</span><span class="o">)</span>
  <span class="k">def</span> <span class="nc">$lt</span><span class="o">(</span><span class="n">target</span><span class="k">:</span> <span class="kt">Array</span><span class="o">[</span><span class="kt">&lt;em&gt;</span><span class="o">])</span> <span class="k">=</span> <span class="n">op</span><span class="o">(</span><span class="n">oper</span><span class="o">,</span> <span class="n">target</span><span class="o">.</span><span class="n">toList</span><span class="o">)</span>
  <span class="k">def</span> <span class="nc">$lt</span><span class="o">(</span><span class="n">target</span><span class="k">:</span> <span class="kt">Tuple1</span><span class="o">[</span><span class="kt">&lt;/em&gt;</span><span class="o">])</span> <span class="k">=</span> <span class="n">op</span><span class="o">(</span><span class="n">oper</span><span class="o">,</span> <span class="n">target</span><span class="o">.</span><span class="n">productIterator</span><span class="o">.</span><span class="n">toList</span><span class="o">)</span>
  <span class="k">def</span> <span class="nc">$lt</span><span class="o">(</span><span class="n">target</span><span class="k">:</span> <span class="kt">Tuple2</span><span class="o">[</span><span class="kt">&lt;em&gt;</span>, <span class="kt">&lt;/em&gt;</span><span class="o">])</span> <span class="k">=</span> <span class="n">op</span><span class="o">(</span><span class="n">oper</span><span class="o">,</span> <span class="n">target</span><span class="o">.</span><span class="n">productIterator</span><span class="o">.</span><span class="n">toList</span><span class="o">)</span>
  <span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;*</span> <span class="nc">SNIP</span> <span class="n">a</span> <span class="n">bunch</span> <span class="n">of</span> <span class="n">individual</span> <span class="n">tuple</span> <span class="n">handling</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
  <span class="k">def</span> <span class="nc">$lt</span><span class="o">(</span><span class="n">target</span><span class="k">:</span> <span class="kt">Iterable</span><span class="o">[</span><span class="k">_</span><span class="o">])</span> <span class="k">=</span> <span class="n">op</span><span class="o">(</span><span class="n">oper</span><span class="o">,</span> <span class="n">target</span><span class="o">.</span><span class="n">toList</span><span class="o">)</span>
  <span class="k">def</span> <span class="nc">$lt</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;target:%20T&quot;</span><span class="o">&gt;</span><span class="n">T</span><span class="k">:</span> <span class="kt">ValidDateOrNumericType&lt;/a&gt;</span> <span class="o">=</span> <span class="n">op</span><span class="o">(</span><span class="n">oper</span><span class="o">,</span> <span class="n">target</span><span class="o">)</span>
<span class="o">}</span></code></pre></div></p>

<p>You should, at this point, notice a fairly stark contrast between the old code and the new.  While we still have specific allowances for <code>DBObject</code>, and have included allowances for things that are <code>Iterable</code> or <code>Array</code>-like, the explicit support for Dates, Numbers and Booleans (Primitive Numbers and Booleans being part of <code>AnyVal</code>) is gone.  Or are they?</p>

<p>The clever reader may have noticed something new lurking at the bottom of this code::</p>

<p><div class="highlight"><pre><code class="language-scala" data-lang="scala"><span class="k">def</span> <span class="nc">$lt</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;target:%20T&quot;</span><span class="o">&gt;</span><span class="n">T</span><span class="k">:</span> <span class="kt">ValidDateOrNumericType&lt;/a&gt;</span> <span class="o">=</span> <span class="n">op</span><span class="o">(</span><span class="n">oper</span><span class="o">,</span> <span class="n">target</span><span class="o">)</span></code></pre></div></p>

<p>This specific method is the pivot point of our new filter system: it is what allows users to independently define what types, beyond the hardcoded ones above, are and are not allowed to pass into the <code>$lt</code> operator.</p>

<p>But what does it all mean?</p>

<h2>Of Type Classes and Context Bounds</h2>

<p>The method above defines a type parameter of <code>[T: ValidDateOrNumericType]</code>; you&rsquo;re probably used to seeing covariance (<code>T &lt;: ValidDateOrNumericType</code>) or contravariance (<code>T &gt;: ValidDateOrNumericType</code>), but may not have encountered this notation before now.  The single colon type boundary is known as a <em>Context Bound</em>  It does not, as first guess might tell you, say that <code>T</code> must be <em>exactly</em> a <code>ValidDateOrNumericType</code>.</p>

<p>Context Bounds are a fairly new syntax, recently introduced to the type parameter system in Scala 2.8.  What they give us is a shortcut for a type-dependent implicit argument (they also work with <code>Manifests</code>, which I&rsquo;ll explain in a future post).  When the Scala Compiler parses our code it will actually produce the following statement, which is how we would have said this in versions prior to 2.8::</p>

<p><div class="highlight"><pre><code class="language-scala" data-lang="scala"><span class="k">def</span> <span class="nc">$lt</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;target:%20T&quot;</span><span class="o">&gt;</span><span class="n">T</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;(</span><span class="k">implicit</span> <span class="n">evidence$1</span><span class="k">:</span> <span class="kt">ValidDateOrNumericType</span><span class="o">[</span><span class="kt">T</span><span class="o">])</span> <span class="k">=</span> <span class="n">op</span><span class="o">(</span><span class="n">oper</span><span class="o">,</span> <span class="n">target</span><span class="o">)</span></code></pre></div></p>

<p>What the Context Boundary syntax says is that we want to accept a generic type <code>T</code>, as long as there is an <em>implicit</em> instance of <code>ValidDateOrNumericType[T]</code> available.  With this simple statement, what we say is quite literally as long as an implicit instance of <code>ValidDateOrNumericType</code> is available for type <code>T</code>, it is a valid type for this method.  This means that you, as a user, can quickly change what type are and aren&rsquo;t allowed into this <code>$lt</code> method merely by adjusting the implicit scope.  Powerful, no?</p>

<p>In this case, <code>ValidDateOrNumericType</code> itself is a completely empty trait (but, as we&rsquo;ll see in my next post can actually become quite powerful with the introduction of some methods!) which is used as a simple filter. The default imports for Casbah&rsquo;s DSL automatically gives you several predefined filter types::</p>

<p><div class="highlight"><pre><code class="language-scala" data-lang="scala"><span class="k">implicit</span> <span class="k">object</span> <span class="nc">JDKDateDoNOk</span> <span class="k">extends</span> <span class="nc">JDKDateOk</span> <span class="k">with</span> <span class="nc">ValidDateOrNumericType</span><span class="o">[</span><span class="kt">java.util.Date</span><span class="o">]</span>
<span class="k">implicit</span> <span class="k">object</span> <span class="nc">JodaDateTimeDoNOk</span> <span class="k">extends</span> <span class="nc">JDKDateOk</span> <span class="k">with</span> <span class="nc">ValidDateOrNumericType</span><span class="o">[</span><span class="kt">org.joda.time.DateTime</span><span class="o">]</span>
<span class="k">implicit</span> <span class="k">object</span> <span class="nc">BigIntDoNOk</span> <span class="k">extends</span> <span class="nc">BigIntOk</span> <span class="k">with</span> <span class="nc">ValidDateOrNumericType</span><span class="o">[</span><span class="kt">BigInt</span><span class="o">]</span>
<span class="k">implicit</span> <span class="k">object</span> <span class="nc">IntDoNOk</span> <span class="k">extends</span> <span class="nc">IntOk</span> <span class="k">with</span> <span class="nc">ValidDateOrNumericType</span><span class="o">[</span><span class="kt">Int</span><span class="o">]</span>
<span class="k">implicit</span> <span class="k">object</span> <span class="nc">ShortDoNOk</span> <span class="k">extends</span> <span class="nc">ShortOk</span> <span class="k">with</span> <span class="nc">ValidDateOrNumericType</span><span class="o">[</span><span class="kt">Short</span><span class="o">]</span>
<span class="k">implicit</span> <span class="k">object</span> <span class="nc">ByteDoNOk</span> <span class="k">extends</span> <span class="nc">ByteOk</span> <span class="k">with</span> <span class="nc">ValidDateOrNumericType</span><span class="o">[</span><span class="kt">Byte</span><span class="o">]</span>
<span class="k">implicit</span> <span class="k">object</span> <span class="nc">LongDoNOk</span> <span class="k">extends</span> <span class="nc">LongOk</span> <span class="k">with</span> <span class="nc">ValidDateOrNumericType</span><span class="o">[</span><span class="kt">Long</span><span class="o">]</span>
<span class="k">implicit</span> <span class="k">object</span> <span class="nc">FloatDoNOk</span> <span class="k">extends</span> <span class="nc">FloatOk</span> <span class="k">with</span> <span class="nc">ValidDateOrNumericType</span><span class="o">[</span><span class="kt">Float</span><span class="o">]</span>
<span class="k">implicit</span> <span class="k">object</span> <span class="nc">BigDecimalDoNOk</span> <span class="k">extends</span> <span class="nc">BigDecimalOk</span> <span class="k">with</span> <span class="nc">ValidDateOrNumericType</span><span class="o">[</span><span class="kt">BigDecimal</span><span class="o">]</span>
<span class="k">implicit</span> <span class="k">object</span> <span class="nc">DoubleDoNOk</span> <span class="k">extends</span> <span class="nc">DoubleOk</span> <span class="k">with</span> <span class="nc">ValidDateOrNumericType</span><span class="o">[</span><span class="kt">Double</span><span class="o">]</span></code></pre></div></p>

<p>All one has to do to introduce a new type as valid to <code>$lt</code> is define an implicit instance of <code>ValidDateOrNumeric[&lt;YourType&gt;]</code>.  Circling back to our original problem, the solution to &ldquo;How do I allow <code>ObjectId</code> in <code>$lt</code>&rdquo; is quite easy:</p>

<p><div class="highlight"><pre><code class="language-scala" data-lang="scala"><span class="k">implicit</span> <span class="k">object</span> <span class="nc">ObjectIdOK</span> <span class="k">extends</span> <span class="nc">ValidDateOrNumericType</span><span class="o">[</span><span class="kt">org.bson.</span><span class="k">type</span><span class="kt">s.ObjectId</span><span class="o">]</span></code></pre></div></p>

<p>As long as that is in scope of your code when you invoke your query statement (such as <code>"_id" $lt new ObjectId(timestamp)</code>) it will construct a valid query to send to MongoDB.</p>

<p>Of course, there is a lot more that we can do with Type Classes than mere filtering.  In my next post, I&rsquo;ll show you how to take decoupling and separation of concerns to the ultimate extreme using Type Classes.</p>
]]></content>
  </entry>
  
</feed>
