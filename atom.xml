<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>Evil Monkey Labs</title>
 <link href="http://blog.evilmonkeylabs.com" rel="self"/>
 <link href="http://blog.evilmonkeylabs.com"/>
 <updated>2012-11-06T17:35:25+00:00</updated>
 <id>http://blog.evilmonkeylabs.com/</id>
 
 <author>
   <name>Brendan W. McAdams</name>
   <email>bwmcadams+blog@evilmonkeylabs.com</email>
 </author>
 

 
 <entry>
   <title>And Now For Something Completely Different!</title>
   <link href="http://blog.evilmonkeylabs.com/2012/11/06/and-now-for-something-completely-different/"/>
   <updated>2012-11-06T00:00:00+00:00</updated>
   <id>http://blog.evilmonkeylabs.com/2012/11/06/and-now-for-something-completely-different</id>
   <content type="html">&lt;p&gt;I write this it is at the end of two very long years working with 10gen (The MongoDB Company), a company of less than 20 people when I joined that is now approaching 200. Although my role has been fungible during my time here, my primary focus has been to improve Scala integration for MongoDB, and evangelize it around the world.  In this pursuit I've worn out an entire US Passport, as well as my favorite pair of Doc Martens.&lt;/p&gt;

&lt;p&gt;In addition to writing code, I've trained new users (customers and colleagues alike), given presentations to audiences large &amp;amp; small, and helped companies to better deploy MongoDB in their applications – in over 50 cities and 15 countries (Those who know me now will expect a whinging anecdote about the time they sent me to Armenia…) I've spent a quarter of my time at 10gen working out of a London office that didn't exist when I first arrived, traveling and helping build a MongoDB following in Europe.&lt;/p&gt;

&lt;p&gt;Most excitingly I've had the opportunity to have met, and in some cases had the pleasure of working with, some of the most interesting and talented individuals I've ever encountered. Engineers, Developer Evangelists, Community Managers, Systems Administrators, and one self-described &quot;Markitect&quot; (Which is how &lt;a href=&quot;http://twitter.com/forjared&quot;&gt;Jared Rosoff&lt;/a&gt; once described his job to me; a cross between Marketing and Software Architecture). People like &lt;a href=&quot;http://twitter.com/meghanpgill&quot;&gt;Meghan Gill&lt;/a&gt; (and her growing team), have helped create and grow the Open Source community around MongoDB – Meghan's the one you can blame for the MongoDB mugs that are multiplying like tribbles around the globe.&lt;/p&gt;

&lt;p&gt;At the risk of offending any by singling so few out, I could spend all day just citing excellence in many of my colleagues at 10gen – there is some incredible talent on hand. In my own time here, I've managed to develop and hone some previously unknown skills as a teacher, consultant, and developer evangelist.  Through building software with hundreds of thousands of open source users, I've learned to be a better engineer. The most important lesson? That the users, and how they use (or want to use) your software matters above all else; observe, listen and adapt.  The user may not always be right, but in many cases they can point you in the direction from which the wind is blowing.&lt;/p&gt;

&lt;p&gt;The reality is that all of this has been an incredible adventure – but also a lot of hard work, and tremendously tiring.  10gen today is a very different company from the one I've joined – and about 10 times the size.  I feel that I've reached the apex of what I wish to accomplish with 10gen, and I've spent a bit of time considering new challenges; it is far from easy to decide if I can leave all the great work I've done behind. So, when I finish my current tour of duty in Europe, I pursue that challenge.&lt;/p&gt;

&lt;p&gt;As such, it is time that I announce my impending departure from 10gen, to pursue something new. MongoDB is a tremendous product, and 10gen has built something quite amazing in a very short time. Being in the community from early on, it has been humbling to watch how quickly they (we) have built a product, company and community. To further have had an opportunity to have participated in that was humbling, and I look forward to seeing what the future brings, even if I won't be part of this particular story.&lt;/p&gt;

&lt;p&gt;I'm turning the page, and starting a new chapter...&lt;/p&gt;

&lt;p&gt;What's next? After returning home from Europe in December I plan to take a few days off to gather my wits. After that, I'm very happy to announce that I'll be joining the incredible team at &lt;a href=&quot;http://typesafe.com&quot;&gt;Typesafe&lt;/a&gt;, as a member of their burgeoning Professional Services team. While there, I look forward to helping build, teach, and promote the foundation for the next generation of scalable applications.  This generation includes the &lt;a href=&quot;http://scala-lang.org&quot;&gt;Scala programming language&lt;/a&gt;, &lt;a href=&quot;http://akka.io&quot;&gt;Akka framework&lt;/a&gt; for distributed &amp;amp; concurrent computing, and &lt;a href=&quot;http://playframework.org&quot;&gt;Play!&lt;/a&gt; for web applications. I have been working with Scala and Akka for almost as long as I have MongoDB; for me, it is a natural progression forward.&lt;/p&gt;

&lt;p&gt;The team that Typesafe has built is awe-inspiring, and the plentitude of knowledge and experience they offer are hard to refuse for someone seeking new challenges and skills.&lt;/p&gt;

&lt;p&gt;By no means is this the end of my MongoDB life, merely my 10gen one. Many of you will still see me at the same conferences, looking much the same. Maybe in a different t-shirt (though I still have an awful lot of comfortable MongoDB ones) I may be promoting a different product, but I still believe in MongoDB and am always glad to help see that forward as well. I helped set the tone for Scala and MongoDB and don't intend to abandon it. I plan to continue my contributions to projects like Casbah as I move forward. Projects to rethink MongoDB on the Scala platform, such as Hammersmith, will continue to occupy what spare time I find; I'm always happy to help with other projects and ideas that strike my fancy.&lt;/p&gt;

&lt;p&gt;And, as I sharead with my coworkers already, to those of you I &lt;em&gt;won't&lt;/em&gt; see as much of in my new role... &lt;a href=&quot;http://www.youtube.com/watch?v=ojydNb3Lrrs&quot;&gt;So Long, And Thanks For All The Fish!&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Understanding Scala's Type Classes</title>
   <link href="http://blog.evilmonkeylabs.com/2012/06/11/Understanding_Scala_Type_Classes/"/>
   <updated>2012-06-11T00:00:00+00:00</updated>
   <id>http://blog.evilmonkeylabs.com/2012/06/11/Understanding_Scala_Type_Classes</id>
   <content type="html">&lt;p&gt;Over the last year or so, I have found myself making more and more use of Scala's Type Class system to add flexibility to my code.  This is especially evident in the MongoDB Scala Driver, &lt;a href=&quot;Casbah&quot;&gt;http://github.com/mongodb/casbah&lt;/a&gt;, where the most recent work has been to simplify many features by migrating them to type classes.&lt;/p&gt;

&lt;p&gt;During this work however, I've found during that many otherwise adroit Scala engineers seem befuddled or daunted by the Type Class. It does me no good to take advantage of clever features that my users don't understand, and many will benefit from introducing these concepts to their own code. So let's take a look at what type classes are, as well as how &amp;amp; why we can utilize them.&lt;/p&gt;

&lt;p&gt;Wikipedia defines a Type Class as &lt;em&gt;&quot;... a type system construct that supports ad-hoc polymorphism. This is achieved by adding constraints to type variables in parametrically polymorphic types&quot;&lt;/em&gt;. Admittedly, a bit of a mouthful -- and not very helpful to those of us who are self taught and lack the benefit of a comprehensive academic Computer Science education (myself included). Surely, there must be a way to simplify this concept?&lt;/p&gt;

&lt;p&gt;In evaluating these ideas, I've found it easiest to think of a Type Class (in Scala, at least) as a special kind of &lt;em&gt;adapter&lt;/em&gt;, which can impart additional capabilities upon a given type or set of types. In Scala the Type Class is communicated through &lt;em&gt;implicits&lt;/em&gt;, and imparts one, or both, of two behaviors. First, a Type Class can be to utilized to &lt;em&gt;filter&lt;/em&gt; what types are valid for a given method call (which I detailed in &lt;a href=&quot;/2011/07/13/User_Configgable_Type_Filtering_with_Type_Classes/&quot;&gt;this earlier post&lt;/a&gt;). Second, a Type Class can impart additional features and behaviors upon a type at method invocation time. This latter is much along the lines of an enhanced kind of composition, rather than the weaker inheritance which often plagues similar behaviors in a language like Java.&lt;/p&gt;

&lt;p&gt;To better understand what I am describing, let's compare a few concepts around the creation and interaction of custom domain objects. I have several sets of tasks I have had to accomplish in Scala in the past -- and Scala solutions show some elegant Type Class oriented approaches which are rooted in the Standard Library. While this may seem a bit contrived, it is exactly the kind of problem through which &lt;em&gt;I&lt;/em&gt; initially came to understand Type Classes –– and is thus an ideal lesson.&lt;/p&gt;

&lt;!--more--&gt;


&lt;p&gt;First, let's take a look at &lt;em&gt;sorting&lt;/em&gt; and custom objects to best understand how one accomplishes this. It is not an uncommon task in development for us to create our own objects and need to integrate them into Standard Library behaviors, such as sorting. Let's work with a few sample objects in the form of &quot;Bank Accounts&quot; to look at how this all work (and I'm aware of the poor concurrency control, etc. around balance -- this is a contrived example). Here's our Bank Account object:&lt;/p&gt;

&lt;div&gt;
  &lt;pre&gt;&lt;code class='scala'&gt;class BankAccount(val accountNumber: Long, val holderFirst: String,
                  val holderMiddle: Option[String], val holderLast: String,
                  var balance: Double) {

  def holderName = 
    &amp;quot;%s, %s %s&amp;quot;.format(holderLast, holderFirst, holderMiddle.getOrElse(&amp;quot;&amp;quot;))

  override def toString: String = 
    &amp;quot;{ Acct # %s, Held by %s with a balance of $%8.2f}&amp;quot;.format(
        accountNumber, holderName, balance
    )
                              
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;We can easily populate collections with instances of these accounts as well.&lt;/p&gt;

&lt;div&gt;
  &lt;pre&gt;&lt;code class='scala'&gt;val accounts = List(new BankAccount(1000893, &amp;quot;Brendan&amp;quot;, Some(&amp;quot;W.&amp;quot;), &amp;quot;McAdams&amp;quot;,
                                    1234.56),
                    new BankAccount(1000256, &amp;quot;John&amp;quot;, None, &amp;quot;Smith&amp;quot;, 
                                    10000291.83),
                    new BankAccount(1000012, &amp;quot;Jane&amp;quot;, None, &amp;quot;Doe&amp;quot;, 
                                    45.28),
                    new BankAccount(4002158, &amp;quot;Alan&amp;quot;, None, &amp;quot;Smithee&amp;quot;, 
                                    834567.00))

println(&amp;quot;Bank Accounts: &amp;quot; + accounts)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;Given collections of instances of these bank accounts in each language, we'd like to easily sort them –– given an arbitrary set of requirements.  Now, neither Scala or Java can &quot;automatically&quot; figure out how to sort these, instead requiring assistance from us (the developer).&lt;/p&gt;

&lt;div&gt;
  &lt;pre&gt;&lt;code class='scala'&gt;val sortedAccounts = accounts.sorted

println(&amp;quot;* Sorted Accounts: &amp;quot; + sortedAccounts)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;It is unfortunately not &lt;em&gt;quite&lt;/em&gt; that easy, as the above code will fail to compile asking for a missing argument:&lt;/p&gt;

&lt;div&gt;
  &lt;pre&gt;&lt;code class='scala'&gt;BankAccount.scala:39: error: No implicit Ordering defined for this.BankAccount.
val sortedAccounts = accounts.sorted
                                    ^
one error found&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;Like in Java, we need to provide Scala information about how to sort a class of type &lt;code&gt;BankAccount&lt;/code&gt;.  In Java however, we would need to use inheritance and actually change the structure of &lt;code&gt;BankAccount&lt;/code&gt; by implementing the &lt;code&gt;Comparable&lt;/code&gt; interface.  Personally, I've never been a fan of that approach -- changing a class directly can lead to behavioral oddities. It also has two major limitations that I've run into in the past.&lt;/p&gt;

&lt;p&gt;First we get locked into only &lt;em&gt;one&lt;/em&gt; way to sort a &lt;code&gt;BankAccount&lt;/code&gt;. If initially we want to sort by &lt;code&gt;accountNumber&lt;/code&gt;, and code that in we are restricted should another part of our application need to sort by &lt;code&gt;balance&lt;/code&gt;. We either work around the builtin sort methods or subclass, introducing more complications.&lt;/p&gt;

&lt;p&gt;Second, we are severely restricted in our ability to handle this with a third party class. What if &lt;code&gt;BankAccount&lt;/code&gt; is a vendor supplied class and is &lt;code&gt;final&lt;/code&gt; so we cannot even create an extended version which implements comparable? Suddenly we are restricted from taking advantage of the sort routines built into the standard library and have to reinvent our own. Not ideal.&lt;/p&gt;

&lt;p&gt;Instead, with Scala, the implementation of our &lt;code&gt;Comparable&lt;/code&gt; equivalent is done externally in a Type Class of type &lt;code&gt;scala.math.Ordering&lt;/code&gt;. When implemented, our instance of &lt;code&gt;Ordering&lt;/code&gt; will both control what classes can be sorted as well as providing information about how to sort. But because it is implemented externally and provided as an implicit we can provide multiple versions should we need different sorting behaviors down the line*.&lt;/p&gt;

&lt;p&gt;It is important to note that a Type Class in Scala is typically &lt;em&gt;stateless&lt;/em&gt;. It is provided to callers as a single static instance based on Type, and only infers necessary state information from &lt;em&gt;instances of the referenced type&lt;/em&gt; passed to its methods. The Type Class is controlling how instances of a given type should behave generically and should be side effect free.&lt;/p&gt;

&lt;p&gt;The normal way of providing a typeclass is to create a static implicit object of a trait implementation of &lt;code&gt;TypeClass[A]&lt;/code&gt; in scope. I prefer to declare the base trait separately from the implicit object to encourage easier reusage.&lt;/p&gt;

&lt;p&gt;For providing &lt;a href=&quot;http://www.scala-lang.org/archives/downloads/distrib/files/nightly/docs/library/scala/math/Ordering.html&quot;&gt;Ordering[BankAccount]&lt;/a&gt;, we need to implement an abstract method &lt;code&gt;def compare(x: T, y: T): Int&lt;/code&gt; which compares two instances of &lt;code&gt;T&lt;/code&gt; (Where, in this case, &lt;code&gt;T&lt;/code&gt; represents &lt;code&gt;BankAccount&lt;/code&gt;) and returns an &lt;code&gt;Int&lt;/code&gt; signifying their order against one another. Negative represents that &lt;code&gt;x &amp;lt; y&lt;/code&gt;, positive that &lt;code&gt;x &amp;gt; y&lt;/code&gt; and zero if &lt;code&gt;x == y&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let's take a look at how our &lt;code&gt;Ordering&lt;/code&gt; instance for sorting a &lt;code&gt;BankAccount&lt;/code&gt; by &lt;code&gt;accountNumber&lt;/code&gt; might look.&lt;/p&gt;

&lt;div&gt;
  &lt;pre&gt;&lt;code class='scala'&gt;trait BankAccountNumberOrder extends scala.math.Ordering[BankAccount] {
  def compare(x: BankAccount, y: BankAccount): Int = 
    if (x.accountNumber &amp;lt; y.accountNumber) 
      -1
    else if (x.accountNumber &amp;gt; y.accountNumber) 
      1
    else
      0
  
}

implicit object BankAccountNumberSort extends BankAccountNumberOrder&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;Now with an implicit instance of &lt;code&gt;Ordering[BankAccount]&lt;/code&gt; in scope, our sort can succeed. Running our code should produce expected results:&lt;/p&gt;

&lt;div&gt;
  &lt;pre&gt;&lt;code class='scala'&gt;Bank Accounts: List({ Acct # 1000893, Held by McAdams, Brendan W. with a balance of $ 1234.56}, { Acct # 1000256, Held by Smith, John  with a balance of $10000291.83}, { Acct # 1000012, Held by Doe, Jane  with a balance of $   45.28}, { Acct # 4002158, Held by Smithee, Alan  with a balance of $834567.00})

Sorted Accounts: List({ Acct # 1000012, Held by Doe, Jane  with a balance of $   45.28}, { Acct # 1000256, Held by Smith, John  with a balance of $10000291.83}, { Acct # 1000893, Held by McAdams, Brendan W. with a balance of $ 1234.56}, { Acct # 4002158, Held by Smithee, Alan  with a balance of $834567.00})&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;The big benefit here (in my eyes) is that we didn't need to modify our &lt;code&gt;BankAccount&lt;/code&gt; class at all to provide this behavior. &lt;em&gt;Even if &lt;code&gt;BankAccount&lt;/code&gt; was a sealed third party class&lt;/em&gt; we can provide sorting information for it. This is far superior to an inheritance based solution such as Java's. And if we wanted later to sort by &lt;code&gt;balance&lt;/code&gt; instead of &lt;code&gt;accountNumber&lt;/code&gt; we can explicitly pass a different instance to sort:&lt;/p&gt;

&lt;div&gt;
  &lt;pre&gt;&lt;code class='scala'&gt;object BankAccountBalanceOrder extends scala.math.Ordering[BankAccount] {
  def compare(x: BankAccount, y: BankAccount): Int = 
    if (x.balance &amp;lt; y.balance) 
      -1
    else if (x.balance &amp;gt; y.balance) 
      1
    else
      0
}

val sortedByBalance = accounts.sorted(BankAccountBalanceOrder)

println(&amp;quot;$ Sorted By Balance: &amp;quot; + sortedByBalance)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;Complete control is passed to us from an externally controlled system. I'll save the details for a future post, but we can even use a type class to define what it means if I say &lt;code&gt;brendansAccount - johnsAccount&lt;/code&gt; using an instance of &lt;code&gt;scala.math.Numeric[BankAccount]&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now go forth and Type with Class.&lt;/p&gt;

&lt;p&gt;* &lt;a href=&quot;http://twitter.com/djspiewak&quot;&gt;Daniel Spiewak&lt;/a&gt; points out that Sun realized this complication as well a few Java releases back and introduced &lt;a href=&quot;http://docs.oracle.com/javase/6/docs/api/java/util/Comparator.html&quot;&gt;Comparator&lt;/a&gt;, which is very similar to this Type Class approach.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Forcing Scala Compiler 'Nothing' Checks</title>
   <link href="http://blog.evilmonkeylabs.com/2012/05/31/Forcing_Compiler_Nothing_checks/"/>
   <updated>2012-05-31T00:00:00+00:00</updated>
   <id>http://blog.evilmonkeylabs.com/2012/05/31/Forcing_Compiler_Nothing_checks</id>
   <content type="html">&lt;p&gt;Since early in its history, Casbah has had a helper method called &lt;code&gt;getAs[T]&lt;/code&gt;, where &lt;code&gt;T&lt;/code&gt; is &quot;Some type you'd like to fetch a particular field as&quot;. Because of type erasure on the JVM, working with a Mongo Document can be annoying -- the representation in Scala is the equivalent of a &lt;code&gt;Map[String, Any]&lt;/code&gt;. If we were to work with the &lt;code&gt;Map[String, Any]&lt;/code&gt; in a standard mode, fetching a field &lt;em&gt;balance&lt;/em&gt; which is a &lt;code&gt;Double&lt;/code&gt; would require manual casting.&lt;/p&gt;

&lt;div&gt;
  &lt;pre&gt;&lt;code class='scala'&gt;val doc: DBObject = MongoDBObject(&amp;quot;foo&amp;quot; -&amp;gt; &amp;quot;bar&amp;quot;, &amp;quot;balance&amp;quot; -&amp;gt; 2.5)

val balance = doc.get(&amp;quot;balance&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;We have already hit another issue here -- in Scala, invoking &lt;code&gt;get&lt;/code&gt; on a &lt;code&gt;Map&lt;/code&gt; returns &lt;code&gt;Option[T]&lt;/code&gt; (Where, in this case, &lt;code&gt;T&lt;/code&gt; is of type &lt;code&gt;Any&lt;/code&gt;). Which means casting has become more complex: to get a &lt;code&gt;Double&lt;/code&gt; we also have to unwrap the &lt;code&gt;Option[Any]&lt;/code&gt; first. A lazy man's approach might be something hairy like so:&lt;/p&gt;

&lt;div&gt;
  &lt;pre&gt;&lt;code class='scala'&gt;balance.getOrElse(null).asInstanceOf[Double]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;In the annals of history (when men were &lt;em&gt;real&lt;/em&gt; men, and small furry creatures from Alpha Centauri were &lt;em&gt;real&lt;/em&gt; small furry creatures from Alpha Centauri), the above became an annoyingly common pattern. A solution was needed - and so &lt;code&gt;getAs[T]&lt;/code&gt; was born. The idea was not only to allow a shortcut to casting, but take care of the &lt;code&gt;Option[T]&lt;/code&gt; wrapping for you as well. Invoking &lt;code&gt;getAs[Double]&lt;/code&gt; will, in this case, return us an &lt;code&gt;Option[Double]&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;But not everything is perfect in the land of &lt;code&gt;getAs[T]&lt;/code&gt; -- if the type requested doesn't match the actual type, runtime failures occur. Worse, if the user fails to pass a type, the Scala compiler substitutes &lt;code&gt;Nothing&lt;/code&gt;, which &lt;em&gt;guarantees&lt;/em&gt; a runtime failure. Runtime failures are bad -- but fortunately, &lt;a href=&quot;http://twitter.com/milessabin&quot;&gt;Miles Sabin&lt;/a&gt; &amp;amp; &lt;a href=&quot;http://twitter.com/jteigen&quot;&gt;Jon-Anders Teigen&lt;/a&gt; came up with an awesome solution.&lt;/p&gt;

&lt;!--more--&gt;




&lt;div&gt;
  &lt;pre&gt;&lt;code class='scala'&gt;doc.getAs[String](&amp;quot;foo&amp;quot;)
/* res1: Option[String] = Some(bar) */'
doc.getAs[Double](&amp;quot;balance&amp;quot;)
/* res2: Option[Double] = Some(2.5) */
doc.getAs(&amp;quot;balance&amp;quot;)
/* res3: Option[Nothing] = Some(2.5) */

/* Notably at least, the Scala compiler is smart enough to infer &amp;quot;A&amp;quot; from the left-hand side *if* 
   an explicit type is declared */ 
val bal: Option[Double] = getAs(doc, &amp;quot;balance&amp;quot;)
/* bal: Option[Double] = Some(2.5) */&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;We get back an option of &lt;code&gt;Nothing&lt;/code&gt;, which is less than ideal (The REPL appears to be somewhat more forgiving in some of this behavior than the actual runtime is). My reaction to this early on was quite strong –– I wanted to &lt;em&gt;require&lt;/em&gt; that the user pass their type argument. Unfortunately, the best I could do within Casbah was attempt to detect the compiler substituted &lt;code&gt;Nothing&lt;/code&gt; and warn the user at runtime. Less than ideal, I know.&lt;/p&gt;

&lt;div&gt;
  &lt;pre&gt;&lt;code class='scala'&gt;def getAs[A &amp;lt;: Any: Manifest](key: String): Option[A] = {
  require(manifest[A] != manifest[scala.Nothing],
    &amp;quot;Type inference failed; getAs[A]() requires an explicit type argument &amp;quot; +
    &amp;quot;(e.g. dbObject.getAs[&amp;lt;ReturnType&amp;gt;](\&amp;quot;somegetAKey\&amp;quot;) ) to function correctly.&amp;quot;)

  underlying.get(key) match {
    case null =&amp;gt; None
    case value =&amp;gt; Some(value.asInstanceOf[A])
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;This gave me somewhat improved behavior –- at least users are warned at runtime before something breaks.&lt;/p&gt;

&lt;div&gt;
  &lt;pre&gt;&lt;code class='scala'&gt;doc.getAs(&amp;quot;balance&amp;quot;)
/* 
java.lang.IllegalArgumentException: requirement failed: Type inference failed; getAs[A]() requires an explicit type argument (e.g. dbObject.getAs[&amp;lt;ReturnType&amp;gt;](&amp;quot;somegetAKey&amp;quot;) ) to function correctly.
*/&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;Great -- we prevent people from utterly failing to pass a type to &lt;code&gt;getAs&lt;/code&gt; by throwing an exception at runtime. A bit like closing the barn doors after the horses escaped, and somewhat counter to the point of compiled languages. Fortunately, Miles Sabin knows a lot of great compiler tricks and Jon-Anders has superpowers (which he uses for good, not evil). Using some of Miles' tricks, Jon-Anders has fixed Casbah (as of 2.3.0+) to make &lt;code&gt;getAs[T]&lt;/code&gt; fail utterly at &lt;em&gt;compile time&lt;/em&gt; when no type is passed.&lt;/p&gt;

&lt;p&gt;The secret to this trick is essentially that the Scala compiler &lt;em&gt;hates&lt;/em&gt; ambiguity. In order to substitute &lt;code&gt;Nothing&lt;/code&gt; as a type argument when one isn't supplied, the Scala compiler has an implicit for &lt;code&gt;Nothing&lt;/code&gt; scoped. If one were to exacerbate the situation by introducing an additional implicit for &lt;code&gt;Nothing&lt;/code&gt;, the compiler would fail when no type argument is passed.&lt;/p&gt;

&lt;p&gt;With this in mind, we can morph &lt;code&gt;getAs&lt;/code&gt; to work with a type class instead of a standard type argument.&lt;/p&gt;

&lt;div&gt;
  &lt;pre&gt;&lt;code class='scala'&gt;def getAs[A : NotNothing](key: String): Option[A] = {
  underlying.get(key) match {
    case null =&amp;gt; None
    case value =&amp;gt; Some(value.asInstanceOf[A])
  }
}

sealed trait NotNothing[A]{
  type B
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;Our previous unbounded type argument is replaced with the new type class boundary of &lt;code&gt;NotNothing&lt;/code&gt; and the runtime &lt;code&gt;Nothing&lt;/code&gt; check is removed. We also need concrete instances of our type class, which is where the real magic comes into play.&lt;/p&gt;

&lt;div&gt;
  &lt;pre&gt;&lt;code class='scala'&gt;object NotNothing {
  implicit val nothing = new NotNothing[Nothing]{ type B = Any }
  implicit def notNothing[A] = new NotNothing[A]{ type B = A }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;Now, any application of &lt;code&gt;Nothing&lt;/code&gt; will trigger the ambiguity problem -- the Scala compiler won't figure out how to resolve the type argument. This trick works because &lt;code&gt;Nothing&lt;/code&gt; is at the &lt;em&gt;bottom&lt;/em&gt; of Scala's type hierarchy. Were I to call &lt;code&gt;getAs(&quot;balance&quot;)&lt;/code&gt;, the Scala compiler would attempt to fill in &lt;code&gt;Nothing&lt;/code&gt; as the type argument. However, both implicit conversons for &lt;code&gt;nothing&lt;/code&gt; &lt;em&gt;and&lt;/em&gt; &lt;code&gt;notNothing[A]&lt;/code&gt; will match -- causing ambiguity and compilation fails.&lt;/p&gt;

&lt;div&gt;
  &lt;pre&gt;&lt;code class='scala'&gt;doc.getAs[String](&amp;quot;foo&amp;quot;)
/* res0: Option[String] = Some(bar) */
doc.getAs[Double](&amp;quot;balance&amp;quot;)
/* res1: Option[Double] = Some(2.5) */
doc.getAs(&amp;quot;balance&amp;quot;)
/* error: ambiguous implicit values:
 both value nothing in object NotNothing of type =&amp;gt; java.lang.Object with com.mongodb.casbah.commons.NotNothing[Nothing]{type B = Any}
 and method notNothing in object NotNothing of type [A]=&amp;gt; java.lang.Object with com.mongodb.casbah.commons.NotNothing[A]{type B = A}
 match expected type com.mongodb.casbah.commons.NotNothing[A]
              doc.getAs(&amp;quot;balance&amp;quot;) 
                       ^
*/&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;A vast improvement in behavior, especially if we use the &lt;a href=&quot;http://suereth.blogspot.com/2011/03/annotate-your-type-classes.html&quot;&gt;&lt;code&gt;@implicitNotFound&lt;/code&gt; annotation&lt;/a&gt; to provide clear error messages.&lt;/p&gt;

&lt;p&gt;The moral of the story -- knowing the ins and outs of the type system and compiler corners can do great things for improving the functionality of your code. Especially being aware that as smart as the Scala compiler is, there are limitations inherent in the runtime platform (the JVM, specifically type erasure) that can make our lives difficult if ignored.&lt;/p&gt;

&lt;h2&gt;Update&lt;/h2&gt;

&lt;p&gt;While reviewing a draft of this post, &lt;a href=&quot;http://twitter.com/djspiewak&quot;&gt;Daniel Spiewak&lt;/a&gt; noted one more issue with my code as it exists.  Namely, that we don't have a sane way of preventing users from &lt;em&gt;miscasting&lt;/em&gt;.  That is to say, if I try to fetch &quot;balance&quot; as a &lt;code&gt;String&lt;/code&gt;, this shouldn't be OK.&lt;/p&gt;

&lt;div&gt;
  &lt;pre&gt;&lt;code class='scala'&gt;doc.getAs[String](&amp;quot;balance&amp;quot;).getOrElse(null)
java.lang.ClassCastException: java.lang.Double cannot be cast to java.lang.String&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;Daniel rightly points out how bad a runtime &lt;code&gt;ClassCastException&lt;/code&gt; is, and has proposed another fix which I'm incorporating.&lt;/p&gt;

&lt;div&gt;
  &lt;pre&gt;&lt;code class='scala'&gt;def getAs[A : NotNothing : Manifest](key: String): Option[A] = {
  underlying.get(key) match {
    case null =&amp;gt; None
    case value if manifest[A] &amp;gt;:&amp;gt; Manifest.classType(value.getClass) =&amp;gt;
      Some(value.asInstanceOf[A])
    case fail =&amp;gt; 
      log.warn(&amp;quot;Unable to cast '%s' as '%s'; please check your types.&amp;quot;, Manifest.classType(fail.getClass), manifest[A])
      None
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;Now, when you ask for a type that doesn't match what the Document contains, you will receive &lt;code&gt;None&lt;/code&gt; and a warning in your log such as &lt;code&gt;Unable to cast 'java.lang.Double' as 'java.lang.String'; please check your types.&lt;/code&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Casbah 2.3.0-RC1 Released</title>
   <link href="http://blog.evilmonkeylabs.com/2012/05/29/Casbah2.3_Released/"/>
   <updated>2012-05-29T00:00:00+00:00</updated>
   <id>http://blog.evilmonkeylabs.com/2012/05/29/Casbah2.3_Released</id>
   <content type="html">&lt;p&gt;Today, I published the first Release Candidate of Casbah 2.3.0, available for SBT users as  &lt;code&gt;&quot;org.mongodb&quot; % &quot;casbah&quot; % &quot;2.3.0-RC1&quot;&lt;/code&gt;. My &lt;a href=&quot;http://notes.implicit.ly/post/24009446396/casbah-2-3-0rc1&quot;&gt;release announcement&lt;/a&gt; to &lt;a href=&quot;http://implicit.ly&quot;&gt;implicit.ly&lt;/a&gt; contains the details on all of the bugs fixed – I will also be posting another set of blog entries shortly outlining the specific improvements to the code and demoing fetaures.&lt;/p&gt;

&lt;p&gt;It has been just about a year since the last major release of Casbah, which was version &lt;strong&gt;2.1.5-1&lt;/strong&gt;.  A number of factors led to the delay in getting a major update out the door, for which I apologize.  Amongst other things I have spent much of the last year since Casbah's prior release on the road doing training, consulting and evangelization of MongoDB to users around the globe; I had less time for code among all these things than I expected!  Additionally, after releasing the &lt;strong&gt;2.1.x&lt;/strong&gt; series of Casbah I embarked on what quickly morphed from Casbah &lt;strong&gt;2.2.0&lt;/strong&gt; to &lt;strong&gt;3.0.0&lt;/strong&gt; – a major refactoring and cleanup of 2+ years of API cruft and &quot;I'm Gonna Learn Me Some Scala!&quot; detritus.  In all the excitement to release a perfect release to end all releases, I did a poor job of making it easy to backport and maintain a compatibility series for &lt;strong&gt;2.x&lt;/strong&gt; users – a harsh lesson in the importance of creating small, bite sized git commits that can be cherry picked.&lt;/p&gt;

&lt;h2&gt;So What Happened to Casbah 3.0? And 2.2?&lt;/h2&gt;

&lt;p&gt;Casbah &lt;strong&gt;2.2.x&lt;/strong&gt; is dead – &lt;strong&gt;3.0.x&lt;/strong&gt; is certainly not!  When the work following &lt;strong&gt;2.1.x&lt;/strong&gt; was begun, I had published a number of early snapshots as Casbah &lt;em&gt;2.2.0-SNAPSHOT&lt;/em&gt;.  During this development cycle I found a lot of the aforementioned detritus such as overloaded methods (Casbah was begun as a Scala 2.7.x project and I never fully moved its core APIs over to use named and default arguments - some of these are corrected in Casbah &lt;strong&gt;2.3.0&lt;/strong&gt; but in the interest of backwards compatibility with prior releases of 2.x, not completely). As I worked on coding improvements around these things the API drifted further and further away from compatibility and I chose to kill off the &lt;strong&gt;2.2.x&lt;/strong&gt; series, planning the next release of Casbah as &lt;strong&gt;3.0.0&lt;/strong&gt;.  In addition to that, I intended Casbah &lt;strong&gt;3.0.0&lt;/strong&gt; to coincide with MongoDB &lt;strong&gt;2.2.0&lt;/strong&gt; which will have additional features such as the New Aggregation Framework.  As MongoDB 2.2 hasn't been released yet, it became clear I needed to provide an updated Casbah release with many of the improvements but without many of the API breakages introduced in &lt;strong&gt;3.0&lt;/strong&gt; - including a vastly improved build of the Casbah Query DSL which has stronger type safety and compiler checks thanks to the inimitable &lt;a href=&quot;http://twitter.com/jteigen&quot;&gt;Jon-Anders Teigen&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Casbah &lt;strong&gt;3.0&lt;/strong&gt; is still very much alive and in development, with &lt;strong&gt;2.3.0&lt;/strong&gt; representing a backporting of many of the changes and improvements from &lt;strong&gt;3.0&lt;/strong&gt;.  Because of the abandonment of the original &lt;strong&gt;2.2&lt;/strong&gt; development series, I felt it was saner to kill &lt;strong&gt;2.2.x&lt;/strong&gt; dead and bring the backports into a &lt;strong&gt;2.3.x&lt;/strong&gt; series. You can, if you wish, think of this as &lt;em&gt;Casbah 2.3 - The Search for Casbah 2.2&lt;/em&gt; (The long rumored sequel to Spaceballs has been said to be called &lt;em&gt;Spaceballs 3: The Search for Spaceballs 2&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;I will continue to support and improve Casbah &lt;strong&gt;2.3.x&lt;/strong&gt; moving forward as well as completing Casbah &lt;strong&gt;3.0&lt;/strong&gt; (still intended to coincide with the release of MongoDB 2.2). If you have any questions, please don't hesitate to contact me!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Later tonight or tomorrow I will post an entry or two detailing all of the wonderful changes in Casbah 2.3.0 and how to take advantage of them.&lt;/em&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Immutability and Clever Variable Usage in the Land of Blocks and Branches</title>
   <link href="http://blog.evilmonkeylabs.com/2011/08/05/ScalaPythonJavaCaptureBlockResult/"/>
   <updated>2011-08-05T00:00:00+00:00</updated>
   <id>http://blog.evilmonkeylabs.com/2011/08/05/ScalaPythonJavaCaptureBlockResult</id>
   <content type="html">&lt;p&gt;Last night, I found myself unconciously refactoring some Scala code (I don't recall if it was something I wrote or someone else did at this point). As I looked at what I was doing I realized that many Scala developers don't seem entirely aware of one of my favorite features.  What I'm talking about is effectively capturing values from multibranch block statements in Scala.  Used correctly they can greatly decruft complicated code as well as helping us use mutability in places we might not expect an easy way to do so.&lt;/p&gt;

&lt;p&gt;In typical C-like languages (such as C, C++, and Java) we are restricted in our syntax should we wish to capture a value when running many branching blocks such as if-else statements, switch statements and even for/foreach constructs. When we find ourselves wanting to set the value of a variable within each possible condition or iteration, we need to declare a mutable variable before the block.  We then mutate this variable within each condition or iteration.  Take this example from Java:&lt;/p&gt;

&lt;div&gt;
  &lt;pre&gt;&lt;code class='java'&gt;boolean valid = false;

String status = null;
if (valid) {
    status = &amp;quot;VALIDATED&amp;quot;;
} 
else {
    status = &amp;quot;INVALID&amp;quot;;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;




&lt;!--more--&gt;


&lt;p&gt;Not only have we had to declare a mutable value, but adding insult to injury the typical usage pattern includes declaring it as &lt;code&gt;null&lt;/code&gt; (FACT: Everytime you explicitly use null, someone drowns a basket of adorable, whimpering puppies. Even if your language paradigm practically requires it.).  Within our if/else block we have established a new value for &lt;code&gt;status&lt;/code&gt; based on the value of &lt;code&gt;valid&lt;/code&gt;. Granted, this is a somewhat weak example of my point, as you could just as easily have expressed this in a more concise ternary statement:&lt;/p&gt;

&lt;div&gt;
  &lt;pre&gt;&lt;code class='java'&gt;String status = valid ? &amp;quot;VALIDATED&amp;quot; : &amp;quot;INVALID&amp;quot;;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;This simplification breaks down quickly once our block becomes more complex.  Even the addition of a single &lt;code&gt;elseif&lt;/code&gt; would eliminate the usefulness of the ternary syntax:&lt;/p&gt;

&lt;div&gt;
  &lt;pre&gt;&lt;code class='java'&gt;// In this case, valid is now an int that can hold several states
int valid = -1; 

/* valid = SomeMethodCallThatReturnsValid() */

String status = null;

if (valid == 1) {
    status = &amp;quot;VALIDATED&amp;quot;;
} 
else if (valid == 0) {
    status = &amp;quot;INVALID&amp;quot;; // A simple not-valid indicator
} 
else if (valid == -1) {
    status = &amp;quot;UNINITIALIZED_ERROR&amp;quot;;
}
else {
    status = &amp;quot;UNKNOWN_ERROR&amp;quot;;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;We've already bounced ourselves back to the land of &lt;code&gt;null&lt;/code&gt; and forced mutability (can you hear those poor, helpless puppies trying to learn how to swim?). We will encounter similar (or potentially worse) limitations in the case of a for/foreach construct.&lt;/p&gt;

&lt;div&gt;
  &lt;pre&gt;&lt;code class='java'&gt;List&amp;lt;User&amp;gt; users = new List&amp;lt;User&amp;gt;();

for (DBRow row : databaseQuery(queryArgs)) {
    users.add(new User(row.get(&amp;quot;username&amp;quot;), row.get(&amp;quot;first_name&amp;quot;), row.get(&amp;quot;last_name&amp;quot;));
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;Admittedly, this last block isn't &lt;em&gt;that&lt;/em&gt; bad, but it still irks me to &lt;strong&gt;have&lt;/strong&gt; to declare a mutable list to facilitate it.  We probably could work around with a builder pattern but &lt;strong&gt;(a)&lt;/strong&gt; as far as I know Java lacks a builtin List Builder and &lt;strong&gt;(b)&lt;/strong&gt; We'd still probably be &quot;building&quot; a mutable list.&lt;/p&gt;

&lt;p&gt;These paradigms obviously don't restrict or limit everyone, but those of us who try to pay attention to immutability and the like start to grind our teeth awfully fast when encountering these patterns.  There has to be a better way, right?  How do other languages handle these constructs and related problems?&lt;/p&gt;

&lt;h2&gt;The Pythonic Way&lt;/h2&gt;

&lt;p&gt;For those that know Python — a language that I have long loved, and using Scala has only reinforced that as I learn &amp;amp; understand more of the FP goodness in Python — there are some nice tricks to alleviate the previously demonstrated pain (and save those puppies).  Unfortunately, some of these tricks also stink a bit too much like syntactic magic; I tend to think at least one of them violates Python's &quot;explicit over implicit&quot; rules too.&lt;/p&gt;

&lt;div&gt;
  &lt;pre&gt;&lt;code class='python'&gt;# Again, valid is now an int that can hold several states
valid = -1 

/* valid = some_method_to_set_valid() */

if valid == 1:
    status = &amp;quot;VALIDATED&amp;quot;
elif valid == 0:
    status = &amp;quot;INVALID&amp;quot;
elif valid == -1:
    status = &amp;quot;UNINITIALIZED_ERROR&amp;quot;
else:
    status = &amp;quot;UNKNOWN_ERROR&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;Here's that magic I'm talking about — despite us not explicitly declaring/initializing it, Python will instantiate a variable &lt;code&gt;status&lt;/code&gt; at the &lt;em&gt;outer&lt;/em&gt; scope (that is to say, outside of our if-else block).  This is incredibly useful for cutting down line noise related to unecessary declaration of variables; unfortunately it is also a common confusion point for beginning Pythonistas.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;*&quot;Where the hell did this `status` variable come from? It wasn't ever declared in an outer scope!&quot;*
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;While we've avoided initializing &lt;code&gt;status&lt;/code&gt; to null, we still encounter the pesky mutability issue.  We ultimately ended up with a variable &lt;code&gt;status&lt;/code&gt; which can be mutated later.  This isn't ideal, but as far as I know Python has no way to enable/enforce immutable state.&lt;/p&gt;

&lt;p&gt;Python also can take us closer to an ideal state with the for/foreach constructs.  My big gripe with the previous Java for loop code was the need to declare a mutable &lt;code&gt;List&lt;/code&gt; and incrementally add to it.  Python has a cure for what ails us here, in the form of generators — a feature which, as you'll see, I'd give my left pinkie (or maybe just the last millimeter of my left pinkie nail) to have in Scala as well.&lt;/p&gt;

&lt;p&gt;Here's how a smart Pythonista might express our database processing loop in a way that limits the declaration of mutable variables:&lt;/p&gt;

&lt;div&gt;
  &lt;pre&gt;&lt;code class='python'&gt;def process_dbusers(dbResults):
    for entry in dbResults:
        yield User(row.field('username'), row.field('first_name'), 
                   row.field('last_name'))

users = process_dbusers(db_query(query_args))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;With this code, we've already quickly wandered into the land of &quot;Things Java Can't Even Pretend To Do&quot; here (which I think highlights my amusement at people arguing Java's power over Python.  It's all relative when you know the right syntax ... ).  To best handle this expression we've constructed a higher- order function &lt;code&gt;process_dbusers&lt;/code&gt;, which takes in a database results iterator, returning a list-like construct with the results.  I want to emphasize the term &lt;em&gt;list-like&lt;/em&gt; here because what we got is not, in fact, a list (rather it is &quot;Iterable&quot;).  A quick peek at the REPL (if you don't already have &lt;a href=&quot;http://ipython.org&quot;&gt;IPython&lt;/a&gt; you are really missing out) evinces this:&lt;/p&gt;

&lt;div&gt;
  &lt;pre&gt;&lt;code class='python'&gt;users
# &amp;lt;generator object process_db at 0x10ca93690&amp;gt;

type(users)
# &amp;lt;type 'generator'&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;Python supports a special type of expression (which again, I'd love to have in Scala and have been playing with ways to support) called a &lt;em&gt;generator&lt;/em&gt;.  In addition to being immutable, a generator is also lazy; it does not evaluate the entire list at creation, instead evaluating each member as it is first read (notably though, Python generators do not memoize and cannot be iterated repeatedly).  Note that Python's &lt;code&gt;yield&lt;/code&gt; keyword differs from Scala's; it may be easiest to think of it as a &quot;super-return&quot; or &quot;return on crack&quot; in that it actually suspends execution (via coroutines) after returning &lt;em&gt;each&lt;/em&gt; value.&lt;/p&gt;

&lt;p&gt;The 'generator' produced is actually an iterable value; requesting the 'next' item resumes execution, runs the next iteration of the internal for loop again, yields the return value and suspends again.  Not only is this generator value immutable, but it should be significantly more efficient in many cases; if we don't need to store each &lt;code&gt;User&lt;/code&gt; but process them as we read them, we should see a lot better resource usage.&lt;/p&gt;

&lt;p&gt;There is one other way to express the previous statement without needing a nested function set or the 'yield' keyword, using &quot;generator expressions&quot;.  The downside to the &lt;code&gt;yield&lt;/code&gt; based generators is that they must be wrapped inside another function, making them messy to inline with other code. With Generator Expressions we can get the same behavior in a compact, inline one-liner.  A Generator Expression is syntactically identical to a Python &lt;a href=&quot;http://docs.python.org/tutorial/datastructures.html#list-comprehensions&quot;&gt;List Comprehension&lt;/a&gt; with one key difference:  You must enclose the expression in parentheses ( &lt;code&gt;(&lt;/code&gt; and &lt;code&gt;)&lt;/code&gt; ) instead of square brackets ( &lt;code&gt;[&lt;/code&gt; and &lt;code&gt;]&lt;/code&gt;).  While a List Comprehension will return a list, enclosing that same statement in parentheses instead of brackets will produce a generator. This Generator Expression works as if we had written a multiline &lt;code&gt;for&lt;/code&gt; construct with &lt;code&gt;yield&lt;/code&gt;:&lt;/p&gt;

&lt;div&gt;
  &lt;pre&gt;&lt;code class='python'&gt;# Define a tuple of test values
items = ('Foo', 'bar', 'Baz', 'spam', 'eggs', 'apples', 'oranges')

# Use a List Comprehension, returns a list
itemList = [item for item in items]
# ['Foo', 'bar', 'Baz', 'spam', 'eggs', 'apples', 'oranges']
# Use a Generator Expression which returns a generator
itemGen  = (item for item in items)
# &amp;lt;generator object &amp;lt;genexpr&amp;gt; at 0x10cafa050&amp;gt;

# You can also filter these expressions
# Return a list which filters to return only items which are 'food'
foodList = [item for item in items if item in ('spam', 'eggs', 'apples', 'oranges')]
# ['spam', 'eggs', 'apples', 'oranges']
# The same filter, but as a generator expression
foodGen = (item for item in items if item in ('spam', 'eggs', 'apples', 'oranges'))
# &amp;lt;generator object &amp;lt;genexpr&amp;gt; at 0x10cafa140&amp;gt;
# Generators are iterable ...
foodGen.next()
# 'spam'
foodGen.next()
# 'eggs'&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;We've certainly, on the Python side, gotten closer to a world which can exist without unecessary variable initialization and sane immutability... but aren't entirely where I'd like to be.  To understand things better let's look, finally, at what Scala lets us do.&lt;/p&gt;

&lt;h2&gt;The Scala Way&lt;/h2&gt;

&lt;p&gt;A rough take on the code I was optimizing last night can be used to highlight the power of Scala's way of solving the kinds of problems we are discussing.  Here's a Scala version of our if-elseif-else construct from Java:&lt;/p&gt;

&lt;div&gt;
  &lt;pre&gt;&lt;code class='scala'&gt;val valid: Int = someMethodCallThatSetsValidity() 

var status: String = null // ack, mutable *and* null inited - A scala programmer's worst nightmare

if (valid == 1) {
  status = &amp;quot;VALIDATED&amp;quot;
} else if (valid == 0) {
  status = &amp;quot;INVALID&amp;quot; 
} else if (valid == -1) {
  status = &amp;quot;UNINITIALIZED_ERROR&amp;quot;
} else { 
  status = &amp;quot;UNKNOWN_ERROR&amp;quot;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;There are lots of things that are egregious here from the eyes of an experienced Scala programmer, but it is also pretty close to the style I would expect from a fairly new Scala programmer.  There is of course a &lt;em&gt;much&lt;/em&gt; better way to do this in Scala without any magic tricks.&lt;/p&gt;

&lt;p&gt;One of the cool little edge behaviors of Scala's syntax is the ability to capture the return value of most block statements — even if-else statements.  This lends itself to quickly shortening our code &lt;em&gt;and&lt;/em&gt; enforcing immutability on the final value of status.&lt;/p&gt;

&lt;div&gt;
  &lt;pre&gt;&lt;code class='scala'&gt;val valid: Int = someMethodCallThatSetsValidity() 

val status = if (valid == 1) { 
  &amp;quot;VALIDATED&amp;quot; // returns &amp;quot;VALIDATED&amp;quot;
} else if (valid == 0) {
  &amp;quot;INVALID&amp;quot;  // returns &amp;quot;INVALID&amp;quot;
} else if (valid == -1) {
  &amp;quot;UNINITIALIZED_ERROR&amp;quot; // returns &amp;quot;UNINITIALIZED_ERROR&amp;quot;
} else { 
  &amp;quot;UNKNOWN_ERROR&amp;quot; // returns &amp;quot;UNKNOWN_ERROR&amp;quot;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;Much better! The way that Scala evaluates this code, you can think of each branch of the block (the body of each &quot;if&quot;, &quot;else if&quot; and &quot;else&quot; statements) as an anonymous function.  Because it is evaluated this way, Scala allows us to return values, which can be captured from the entire block (The use of the explicit &lt;code&gt;return&lt;/code&gt; keyword is typically considered bad form in Scala which is why it is omitted here).  If &lt;code&gt;valid&lt;/code&gt; has a value of &lt;code&gt;1&lt;/code&gt;, this block will return &lt;code&gt;&quot;VALIDATED&quot;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The type of &lt;code&gt;safe&lt;/code&gt; in this code will be inferred to &lt;code&gt;String&lt;/code&gt;, because each branch returns a &lt;code&gt;String&lt;/code&gt;. Although in Scala it is usually recommended to let type inference do its work wherever possible and avoid explicit type annotations, variables capturing values from a block like this might be a good exception to the rule.&lt;/p&gt;

&lt;p&gt;The argument that I make is that if the type inference system finds multiple &lt;em&gt;differing&lt;/em&gt; types in each branch, it will search backwards on the type hierarchies for the closest &quot;ancestor&quot; type of each type.  This can quickly lead to the type of &lt;code&gt;status&lt;/code&gt; being something far too generic (or even unexpected in the case of a bug).&lt;/p&gt;

&lt;p&gt;We can see this quickly by changing the return of our &lt;code&gt;else&lt;/code&gt; branch to a boolean:&lt;/p&gt;

&lt;div&gt;
  &lt;pre&gt;&lt;code class='scala'&gt;val status = if (valid == 1) { 
  &amp;quot;VALIDATED&amp;quot;
} else if (valid == 0) {
  &amp;quot;INVALID&amp;quot; 
} else if (valid == -1) {
  &amp;quot;UNINITIALIZED_ERROR&amp;quot;
} else { 
  false 
}

/* Turn on &amp;quot;Power Mode&amp;quot; in the repl to dump the type (:power) 
scala&amp;gt; :type status
Any
*/&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;This is not good, and often will result in a bug.  If you were expecting &lt;code&gt;String&lt;/code&gt;, you will be sorely disappointed. The easiest fix to this is to explicitly annotate an expected return type, which forces the compiler to help you enforce expectations:&lt;/p&gt;

&lt;div&gt;
  &lt;pre&gt;&lt;code class='scala'&gt;val status: String = if (valid == 1) { 
  &amp;quot;VALIDATED&amp;quot;
} else if (valid == 0) {
  &amp;quot;INVALID&amp;quot; 
} else if (valid == -1) {
  &amp;quot;UNINITIALIZED_ERROR&amp;quot;
} else { 
  false 
}
/* Fails to compile!
&amp;lt;console&amp;gt;:29: error: type mismatch;
 found   : Boolean(false)
 required: String
         false 

*/&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;We can also easily simplify this whole block into a pattern match, which will read more clearly in Scala.  Fortuitously, Scala also lets us capture the return values from &lt;code&gt;match&lt;/code&gt; blocks, following the same rules (including the Type Annotation concerns) as in if-else.&lt;/p&gt;

&lt;div&gt;
  &lt;pre&gt;&lt;code class='scala'&gt;import annotation.switch

// Even better, cut out one more variable storage by calling our valid check inline
val status: String = (someMethodCallThatSetsValidity(): @switch) match {
    case 1  =&amp;gt; &amp;quot;VALIDATED&amp;quot;
    case 0  =&amp;gt; &amp;quot;INVALID&amp;quot;
    case -1 =&amp;gt; &amp;quot;UNINITIALIZED_ERROR&amp;quot;
    case default =&amp;gt; &amp;quot;UNKNOWN_ERROR&amp;quot;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;&lt;em&gt;The use of the @switch annotation is a trick I learned from &lt;a href=&quot;http://suereth.blogspot.com/&quot;&gt;Josh Suereth's&lt;/a&gt; absolutely superb book &lt;a href=&quot;http://www.manning.com/suereth/&quot;&gt;Scala in Depth&lt;/a&gt;; when used with certain matches (they typically need to match numeric values) they ensure the compiler generates a much more efficient JVM bytecode for the match execution/evaluation.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I'll leave the evaluation of that last as an exercise for the reader.  Fundamentally it is a simple restatement of our previous if-else blocks and should make sense.&lt;/p&gt;

&lt;p&gt;Now that we've looked at branching block statements and value capture in Scala, we're left with one last item — for constructs (We aren't going to discuss monad operators such as &lt;code&gt;foreach&lt;/code&gt;, &lt;code&gt;map&lt;/code&gt;, &lt;code&gt;flatmap&lt;/code&gt;, etc here).&lt;/p&gt;

&lt;div&gt;
  &lt;pre&gt;&lt;code class='scala'&gt;for (x &amp;lt;- 1 until 42) x
// Loops 42 times, but returns / prints nothing&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;Unlike other the previously examined branching blocks (if-else and matches), Scala's &lt;code&gt;for&lt;/code&gt; loops do &lt;em&gt;not&lt;/em&gt; implicitly return the last value.  I would make an educated guess that this is because most developers would not expect or require the default behavior of a &lt;code&gt;for&lt;/code&gt; loop to generate return values.  I'd also go so far as to posit that this is a very sane default.&lt;/p&gt;

&lt;p&gt;Much like Python, to generate a return value from a &lt;code&gt;for&lt;/code&gt; loop in Scala we must explicitly declare our intention to return a value. While (as I lamented previously) Scala lacks support for Python style generators, it does support a form of List Comprehensions which allow us to get the behavior we want.  For a Python developer, the rules for constructing these in Scala may get quickly confusing.  The first is that &lt;code&gt;return&lt;/code&gt; is not a valid keyword at &lt;em&gt;all&lt;/em&gt; inside of a Scala &lt;code&gt;for&lt;/code&gt; statement (Incidentally, Python allows it as a 'valid' keyword, but the function will always return the result of the first loop iteration and never progress).&lt;/p&gt;

&lt;div&gt;
  &lt;pre&gt;&lt;code class='scala'&gt;for (x &amp;lt;- 1 until 42) return x
/* Fails to compile 
&amp;lt;console&amp;gt;:29: error: return outside method definition
       for (x &amp;lt;- 1 until 42) return x 
*/&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;Instead, we need to use a special keyword, &lt;code&gt;yield&lt;/code&gt;, to signify our intention to create a List Comprehension rather than a simple loop.  Like in Python, &lt;code&gt;yield&lt;/code&gt; changes the behavior of a &lt;code&gt;for&lt;/code&gt; loop.  However, the behavior of the &lt;code&gt;yield&lt;/code&gt; keyword in Scala differs significantly from Python, as it does not invoke generator behavior.  The use of &lt;code&gt;yield&lt;/code&gt; inside a Scala &lt;code&gt;for&lt;/code&gt; loop will produce results along the lines of those of Python's square bracket enclosed List Comprehensions:&lt;/p&gt;

&lt;div&gt;
  &lt;pre&gt;&lt;code class='scala'&gt;for (x &amp;lt;- 1 until 42) yield x
/* scala.collection.immutable.IndexedSeq[Int] = Vector(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42)
*/&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;The output of the &lt;code&gt;for&lt;/code&gt; loop which uses &lt;code&gt;yield&lt;/code&gt; will always be an &lt;em&gt;immutable&lt;/em&gt; &lt;code&gt;Seq[_]&lt;/code&gt;, letting us save that result for later usage much like we did with our Python generators and comprehensions.  And of course, Scala's &lt;code&gt;for&lt;/code&gt; loops allow for filters just like Python's:&lt;/p&gt;

&lt;div&gt;
  &lt;pre&gt;&lt;code class='scala'&gt;val items = List(&amp;quot;foo&amp;quot;, &amp;quot;bar&amp;quot;, &amp;quot;baz&amp;quot;, &amp;quot;spam&amp;quot;, &amp;quot;eggs&amp;quot;, &amp;quot;apples&amp;quot;, &amp;quot;oranges&amp;quot;)

val itemList = for (item &amp;lt;- items) yield item
/* itemList: List[java.lang.String] = List(foo, bar, baz, spam, eggs, apples, oranges) */

val foodList = 
    for (item &amp;lt;- items if &amp;quot;spam&amp;quot; :: &amp;quot;eggs&amp;quot; :: &amp;quot;apples&amp;quot; :: &amp;quot;oranges&amp;quot; :: Nil contains item) 
        yield item
/* foodList: List[java.lang.String] = List(spam, eggs, apples, oranges) */

// We can also expand that for comprehension into the alternate syntax for clarity
val expandedFoodList = for {
  item &amp;lt;- items
  if &amp;quot;spam&amp;quot; :: &amp;quot;eggs&amp;quot; :: &amp;quot;apples&amp;quot; :: &amp;quot;oranges&amp;quot; :: Nil contains item
} yield item

// expandedFoodList: List[java.lang.String] = List(spam, eggs, apples, oranges)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;The intention here wasn't to &quot;bash&quot; on Java or even champion Python or Scala; rather, to highlight the ways that different syntactic features add power, flexiblity and (in the case of things like mutability) potential safety to our code.  Though I'm accused of being a Scala fanboy, I want to clearly reiterate generators as something that I still think Python gets as a &lt;em&gt;major&lt;/em&gt; edge over Scala.  I work in all three of the highlighted languages on a daily basis and though I probably enjoy Java the least, find gems and strengths in each tool as I switch between them (to be honest though, most of Java's gems these days exist in the JVM and the JDK libraries rather than the language).&lt;/p&gt;

&lt;p&gt;It may easily be said that I am biased, but I consider the improved functionality highlighted in Python and Scala to be significantly more powerful (and yet less complex in many ways) than Java's approach.  Mutating variables, null initializations and general spaghetti code for the sake of expressing something that should be simpler to express are all things that lead to workplace violence and big bonus checks for employees of straight jacket manufacturers.&lt;/p&gt;

&lt;p&gt;With our improved examples in Scala, we didn't need to create any mutable placeholder values, initialize anything to &lt;code&gt;null&lt;/code&gt; &lt;em&gt;or&lt;/em&gt; worry about ending up with a still mutable list to contend with.  What we got was a pure, unadulterated, cleanly constructed immutable &lt;code&gt;Seq&lt;/code&gt;, just like grandmom used to bake! And it smells freaking &lt;em&gt;delicious&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;-b&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>User Configurable Type Filtering with Scala Type Classes</title>
   <link href="http://blog.evilmonkeylabs.com/2011/07/13/User_Configgable_Type_Filtering_with_Type_Classes/"/>
   <updated>2011-07-13T00:00:00+00:00</updated>
   <id>http://blog.evilmonkeylabs.com/2011/07/13/User_Configgable_Type_Filtering_with_Type_Classes</id>
   <content type="html">&lt;p&gt;When I woke up this morning and looked through my twitter mentions, I found this gem sitting there from the middle of the night:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/oid_lt_casbah.png&quot; alt=&quot;@rit when using &amp;quot;_id&amp;quot; $lt new ObjectId(timestamp) it throws ValidDateOrNumericType, but we might want to select records after id timestamp (from @justthor)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The user in question is complaining that when using &lt;a href=&quot;http://github.com/mongodb/casbah&quot;&gt;Casbah's DSL&lt;/a&gt;, it doesn't allow a MongoDB &lt;code&gt;ObjectId&lt;/code&gt; as a valid type to the &lt;code&gt;$lt&lt;/code&gt; operator.  But as &lt;a href=&quot;http://twitter.com/justthor&quot;&gt;@justthor&lt;/a&gt; points out, it is entirely possible to use &lt;code&gt;ObjectId&lt;/code&gt; with the &lt;code&gt;$lt&lt;/code&gt; operator since it contains timestamp information (See the &lt;a href=&quot;http://www.mongodb.org/display/DOCS/Object+IDs&quot;&gt;documentation for ObjectId&lt;/a&gt; if you want nitty gritty detail).   When I wrote the code for &lt;code&gt;$lt&lt;/code&gt; however, I needed to decide what types were valid and weren't valid; I can't exactly guarantee type safety wih a DSL like Casbah's, but I can enforce type &lt;em&gt;sanity&lt;/em&gt;.  Whether I forgot that you can use &lt;code&gt;ObjectId&lt;/code&gt; in &lt;code&gt;$lt&lt;/code&gt; or just decided that most people wouldn't need to is irrelevant --- I had in this case blocked a user from accomplishing something valid that they needed to.&lt;/p&gt;

&lt;p&gt;It is a more than reasonable problem, and my initial reaction was &quot;oh crap, I guess I need to patch that&quot;.  But what I forgot is that a few releases back, I rearchitected Casbah to obviate this kind of problem.  Casbah now allows for a user definable (or, if you prefer, &quot;adjustable&quot;) type filter on any of its DSL operators.  This is accomplished through a very simple application of Scala Type Classes, a term which gets batted around a lot in the Scala community, but few seem able to understand or articulate its meaning to us lesser mortals.  Over the last few months I've come to understand Type Classes much more deeply than I think I ever expected, and applied these lessons to the design of my code.  As I failed to document the power and usage of these features at the time, I am going to be writing some additional detailed articles about &lt;em&gt;my&lt;/em&gt; understanding of Type Classes in the next few weeks, and this is the first of such explanations.&lt;/p&gt;

&lt;p&gt;So the question at hand is, how exactly does Casbah allow us to do this magical type filtering that I just mentioned, without patching the driver or creating a new release?  First, let's look at how Casbah used to do things before the introduction of the as-yet unexplained Type Class introduction.&lt;/p&gt;

&lt;!--more--&gt;




&lt;div&gt;
  &lt;pre&gt;&lt;code class='scala'&gt;/**
 * Trait to provide the $lt (Less Than) method on appropriate callers.
 *
 * Targets (takes a right-hand value of) String, AnyVal (see Scala docs but basically Int, Long, Char, Byte, etc)
 * DBObject and Map[String, Any].
 *
 *
 * @author Brendan W. McAdams &amp;lt;brendan@10gen.com&amp;gt;
 * @see http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%3C%2C%3C%3D%2C%3E%2C%3E%3D
 */
trait LessThanOp extends QueryOperator {
  private val oper = &amp;quot;$lt&amp;quot; 

  def $lt(target: String) = op(oper, target)
  def $lt(target: java.util.Date) = op(oper, target)
  def $lt(target: AnyVal) = op(oper, target)
  def $lt(target: DBObject) = op(oper, target)
  def $lt(target: Map[String, Any]) = op(oper, target.asDBObject)
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;op&lt;/code&gt; method is just a helper function which assists the DSL in constructing a valid MongoDB query under the covers; it's not particularly relevant to this discussion so let's leave it aside for now.  What &lt;em&gt;is&lt;/em&gt; important is to note that this is a very naive approach to the DSL game --- it is neither type safe or type sane.  It has some very basic support for handling &quot;special&quot; types like &lt;code&gt;String&lt;/code&gt;, &lt;code&gt;java.util.Date&lt;/code&gt;, &lt;code&gt;DBObject&lt;/code&gt; and &lt;code&gt;Map[String, Any]&lt;/code&gt; but blindly allows anything which is &lt;code&gt;AnyVal&lt;/code&gt; through.  There are, in my opinion, three problems here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Is blindly passing &lt;code&gt;AnyVal&lt;/code&gt; a good idea? Typically it consists of things like &lt;code&gt;Int&lt;/code&gt;, &lt;code&gt;Char&lt;/code&gt;, &lt;code&gt;Boolean&lt;/code&gt;, etc but can we be certain this is a safe assumption?&lt;/li&gt;
&lt;li&gt;What if a user defines a custom type which they serialize to MongoDB as something which supports &lt;code&gt;$lt&lt;/code&gt; ---  How do they use that type with the DSL without patching Casbah itself? &lt;code&gt;BigDecimal&lt;/code&gt; is an example of this; the current code does not allow it to be used at all with &lt;code&gt;$lt&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;What if a user has a domain specific reason to &lt;em&gt;restrict&lt;/em&gt; certain of these types? I shouldn't even need to manufacture an example here: Users should be able to restrict types without patching code, if possible&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;These questions and the fact that I kept patching bugs, adding types, etc on user request led me to seek a new solution while working on Casbah 2.0. While searching for this solution I started to gain a rudamentary understanding of Type Classes and their power, and embarked upon a quest to give the users of Casbah flexible control over the types the DSL will and will not allow through.  Of course, I neglected to adequately document those changes, until now.&lt;/p&gt;

&lt;p&gt;After the conversion to Type Classes, here's what the &lt;code&gt;$lt&lt;/code&gt; operator's code looks like today::&lt;/p&gt;

&lt;div&gt;
  &lt;pre&gt;&lt;code class='scala'&gt;/**
 * Trait to provide the $lt (Less Than) method on appropriate callers.
 *
 * Targets (takes a right-hand value of) String, Numeric, JDK And Joda Dates, 
 * Array, DBObject (and DBList), Iterable[_] and Tuple1-&amp;gt;22.
 *
 *
 * @author Brendan W. McAdams &amp;lt;brendan@10gen.com&amp;gt;
 * @see http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%3C%2C%3C%3D%2C%3E%2C%3E%3D
 */
trait LessThanOp extends QueryOperator {
  private val oper = &amp;quot;$lt&amp;quot;

  def $lt(target: String) = op(oper, target)
  def $lt(target: DBObject) = op(oper, target)
  def $lt(target: Array[_]) = op(oper, target.toList)
  def $lt(target: Tuple1[_]) = op(oper, target.productIterator.toList)
  def $lt(target: Tuple2[_, _]) = op(oper, target.productIterator.toList)
  /** SNIP a bunch of individual tuple handling */
  def $lt(target: Iterable[_]) = op(oper, target.toList)
  def $lt[T: ValidDateOrNumericType](target: T) = op(oper, target)
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;You should, at this point, notice a fairly stark contrast between the old code and the new.  While we still have specific allowances for &lt;code&gt;DBObject&lt;/code&gt;, and have included allowances for things that are &lt;code&gt;Iterable&lt;/code&gt; or &lt;code&gt;Array&lt;/code&gt;-like, the explicit support for Dates, Numbers and Booleans (Primitive Numbers and Booleans being part of &lt;code&gt;AnyVal&lt;/code&gt;) is gone.  Or are they?&lt;/p&gt;

&lt;p&gt;The clever reader may have noticed something new lurking at the bottom of this code::&lt;/p&gt;

&lt;div&gt;
  &lt;pre&gt;&lt;code class='scala'&gt;def $lt[T: ValidDateOrNumericType](target: T) = op(oper, target)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;This specific method is the pivot point of our new filter system: it is what allows users to independently define what types, beyond the hardcoded ones above, are and are not allowed to pass into the &lt;code&gt;$lt&lt;/code&gt; operator.&lt;/p&gt;

&lt;p&gt;But what does it all mean?&lt;/p&gt;

&lt;h2&gt;Of Type Classes and Context Bounds&lt;/h2&gt;

&lt;p&gt;The method above defines a type parameter of &lt;code&gt;[T: ValidDateOrNumericType]&lt;/code&gt;; you're probably used to seeing covariance (&lt;code&gt;T &amp;lt;: ValidDateOrNumericType&lt;/code&gt;) or contravariance (&lt;code&gt;T &amp;gt;: ValidDateOrNumericType&lt;/code&gt;), but may not have encountered this notation before now.  The single colon type boundary is known as a &lt;em&gt;Context Bound&lt;/em&gt;  It does not, as first guess might tell you, say that &lt;code&gt;T&lt;/code&gt; must be &lt;em&gt;exactly&lt;/em&gt; a &lt;code&gt;ValidDateOrNumericType&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Context Bounds are a fairly new syntax, recently introduced to the type parameter system in Scala 2.8.  What they give us is a shortcut for a type-dependent implicit argument (they also work with &lt;code&gt;Manifests&lt;/code&gt;, which I'll explain in a future post).  When the Scala Compiler parses our code it will actually produce the following statement, which is how we would have said this in versions prior to 2.8::&lt;/p&gt;

&lt;div&gt;
  &lt;pre&gt;&lt;code class='scala'&gt;def $lt[T](target: T)(implicit evidence$1: ValidDateOrNumericType[T]) = op(oper, target)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;What the Context Boundary syntax says is that we want to accept a generic type &lt;code&gt;T&lt;/code&gt;, as long as there is an &lt;em&gt;implicit&lt;/em&gt; instance of &lt;code&gt;ValidDateOrNumericType[T]&lt;/code&gt; available.  With this simple statement, what we say is quite literally as long as an implicit instance of &lt;code&gt;ValidDateOrNumericType&lt;/code&gt; is available for type &lt;code&gt;T&lt;/code&gt;, it is a valid type for this method.  This means that you, as a user, can quickly change what type are and aren't allowed into this &lt;code&gt;$lt&lt;/code&gt; method merely by adjusting the implicit scope.  Powerful, no?&lt;/p&gt;

&lt;p&gt;In this case, &lt;code&gt;ValidDateOrNumericType&lt;/code&gt; itself is a completely empty trait (but, as we'll see in my next post can actually become quite powerful with the introduction of some methods!) which is used as a simple filter. The default imports for Casbah's DSL automatically gives you several predefined filter types::&lt;/p&gt;

&lt;div&gt;
  &lt;pre&gt;&lt;code class='scala'&gt;implicit object JDKDateDoNOk extends JDKDateOk with ValidDateOrNumericType[java.util.Date]
implicit object JodaDateTimeDoNOk extends JDKDateOk with ValidDateOrNumericType[org.joda.time.DateTime]
implicit object BigIntDoNOk extends BigIntOk with ValidDateOrNumericType[BigInt]
implicit object IntDoNOk extends IntOk with ValidDateOrNumericType[Int]
implicit object ShortDoNOk extends ShortOk with ValidDateOrNumericType[Short]
implicit object ByteDoNOk extends ByteOk with ValidDateOrNumericType[Byte]
implicit object LongDoNOk extends LongOk with ValidDateOrNumericType[Long]
implicit object FloatDoNOk extends FloatOk with ValidDateOrNumericType[Float]
implicit object BigDecimalDoNOk extends BigDecimalOk with ValidDateOrNumericType[BigDecimal]
implicit object DoubleDoNOk extends DoubleOk with ValidDateOrNumericType[Double]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;All one has to do to introduce a new type as valid to &lt;code&gt;$lt&lt;/code&gt; is define an implicit instance of &lt;code&gt;ValidDateOrNumeric[&amp;lt;YourType&amp;gt;]&lt;/code&gt;.  Circling back to our original problem, the solution to &quot;How do I allow &lt;code&gt;ObjectId&lt;/code&gt; in &lt;code&gt;$lt&lt;/code&gt;&quot; is quite easy:&lt;/p&gt;

&lt;div&gt;
  &lt;pre&gt;&lt;code class='scala'&gt;implicit object ObjectIdOK extends ValidDateOrNumericType[org.bson.types.ObjectId]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;As long as that is in scope of your code when you invoke your query statement (such as &lt;code&gt;&quot;_id&quot; $lt new ObjectId(timestamp)&lt;/code&gt;) it will construct a valid query to send to MongoDB.&lt;/p&gt;

&lt;p&gt;Of course, there is a lot more that we can do with Type Classes than mere filtering.  In my next post, I'll show you how to take decoupling and separation of concerns to the ultimate extreme using Type Classes.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>MapReduce with MongoDB 1.8 and Java</title>
   <link href="http://blog.evilmonkeylabs.com/2011/02/28/MongoDB-1_8-MR-Java/"/>
   <updated>2011-02-28T00:00:00+00:00</updated>
   <id>http://blog.evilmonkeylabs.com/2011/02/28/MongoDB-1_8-MR-Java</id>
   <content type="html">&lt;p&gt;In my &lt;a href=&quot;http://blog.evilmonkeylabs.com/2011/01/27/MongoDB-1_8-MapReduce/&quot;&gt;last post&lt;/a&gt;, I introduced the
new MapReduce features introduced in MongoDB 1.8, which is now &lt;a href=&quot;http://www.mongodb.org/display/DOCS/1.8+Release+Notes&quot;&gt;available as a release candidate&lt;/a&gt;.  Most importantly the temporary collection system has gone away, now requiring that you specify an output parameter.  With that required output comes new options for how to create incremental output using the &lt;em&gt;merge&lt;/em&gt; and &lt;em&gt;reduce&lt;/em&gt; output modes.&lt;/p&gt;

&lt;p&gt;As I write this, we are prepping new releases of our &lt;a href=&quot;http://www.mongodb.org/display/DOCS/Java+Language+Center&quot;&gt;Java Driver&lt;/a&gt; (v2.5) and our &lt;a href=&quot;http://api.mongodb.org/scala/casbah&quot;&gt;Scala Driver, Casbah&lt;/a&gt; (v2.1) which are intended to support MongoDB 1.8's new features including incremental MapReduce.  Since I implemented the APIs for the new MapReduce output in both drivers, I thought I'd demonstrate the application of these new output features to the previous dataset.  This post is focused on the Java API, but a Scala one will likely follow.&lt;/p&gt;

&lt;p&gt;As a reminder (or a primer for those who skipped my &lt;a href=&quot;http://blog.evilmonkeylabs.com/2011/01/27/MongoDB-1_8-MapReduce/&quot;&gt;last post&lt;/a&gt;), I've been testing the 1.8 MapReduce using a dataset and MapReduce job originally created to test the &lt;a href=&quot;http://github.com/mongodb/mongo-hadoop&quot;&gt;MongoDB+Hadoop Plugin&lt;/a&gt;.  It consists of daily U.S. Treasury Yield Data for about 20 years; the MapReduce task calculates an annual average for each year in the collection.  You can grab a copy of the entire collection in a handy mongoimport friendly &lt;a href=&quot;https://github.com/mongodb/mongo-hadoop/raw/master/examples/treasury_yield/resources/yield_historical_in.json&quot;&gt;datadump from the MongoDB+Hadoop repo&lt;/a&gt;; here's a quick snippet of it:&lt;/p&gt;

&lt;div&gt;
  &lt;pre&gt;&lt;code class='javascript'&gt;{ &amp;quot;_id&amp;quot; : ISODate(&amp;quot;1990-01-10T00:00:00Z&amp;quot;), &amp;quot;dayOfWeek&amp;quot; : &amp;quot;WEDNESDAY&amp;quot;, &amp;quot;bc3Year&amp;quot; : 7.95, &amp;quot;bc5Year&amp;quot; : 7.92, &amp;quot;bc10Year&amp;quot; : 8.03, &amp;quot;bc20Year&amp;quot; : null, &amp;quot;bc1Month&amp;quot; : null, &amp;quot;bc2Year&amp;quot; : 7.91, &amp;quot;bc3Month&amp;quot; : 7.75, &amp;quot;bc30Year&amp;quot; : 8.11, &amp;quot;bc1Year&amp;quot; : 7.77, &amp;quot;bc7Year&amp;quot; : 8, &amp;quot;bc6Month&amp;quot; : 7.78 }
{ &amp;quot;_id&amp;quot; : ISODate(&amp;quot;1990-01-11T00:00:00Z&amp;quot;), &amp;quot;dayOfWeek&amp;quot; : &amp;quot;THURSDAY&amp;quot;, &amp;quot;bc3Year&amp;quot; : 7.95, &amp;quot;bc5Year&amp;quot; : 7.94, &amp;quot;bc10Year&amp;quot; : 8.04, &amp;quot;bc20Year&amp;quot; : null, &amp;quot;bc1Month&amp;quot; : null, &amp;quot;bc2Year&amp;quot; : 7.91, &amp;quot;bc3Month&amp;quot; : 7.8, &amp;quot;bc30Year&amp;quot; : 8.11, &amp;quot;bc1Year&amp;quot; : 7.77, &amp;quot;bc7Year&amp;quot; : 8.01, &amp;quot;bc6Month&amp;quot; : 7.8 }
{ &amp;quot;_id&amp;quot; : ISODate(&amp;quot;1990-01-12T00:00:00Z&amp;quot;), &amp;quot;dayOfWeek&amp;quot; : &amp;quot;FRIDAY&amp;quot;, &amp;quot;bc3Year&amp;quot; : 7.98, &amp;quot;bc5Year&amp;quot; : 7.99, &amp;quot;bc10Year&amp;quot; : 8.1, &amp;quot;bc20Year&amp;quot; : null, &amp;quot;bc1Month&amp;quot; : null, &amp;quot;bc2Year&amp;quot; : 7.93, &amp;quot;bc3Month&amp;quot; : 7.74, &amp;quot;bc30Year&amp;quot; : 8.17, &amp;quot;bc1Year&amp;quot; : 7.76, &amp;quot;bc7Year&amp;quot; : 8.07, &amp;quot;bc6Month&amp;quot; : 7.8100000000000005 }
{ &amp;quot;_id&amp;quot; : ISODate(&amp;quot;1990-01-16T00:00:00Z&amp;quot;), &amp;quot;dayOfWeek&amp;quot; : &amp;quot;TUESDAY&amp;quot;, &amp;quot;bc3Year&amp;quot; : 8.13, &amp;quot;bc5Year&amp;quot; : 8.11, &amp;quot;bc10Year&amp;quot; : 8.2, &amp;quot;bc20Year&amp;quot; : null, &amp;quot;bc1Month&amp;quot; : null, &amp;quot;bc2Year&amp;quot; : 8.1, &amp;quot;bc3Month&amp;quot; : 7.89, &amp;quot;bc30Year&amp;quot; : 8.25, &amp;quot;bc1Year&amp;quot; : 7.92, &amp;quot;bc7Year&amp;quot; : 8.18, &amp;quot;bc6Month&amp;quot; : 7.99 }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;




&lt;!--more--&gt;


&lt;p&gt;The map function I'm using extracts the year from the date, and the 10 year benchmark value:&lt;/p&gt;

&lt;div&gt;
  &lt;pre&gt;&lt;code class='javascript'&gt;function m() { 
    key = typeof( this._id ) == &amp;quot;number&amp;quot; ? this._id : this._id.getYear() + 1900; 
    emit( key, { count: 1, sum: this.bc10Year } ) ;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;... while the reduce function aggregates the data by year, creating a set that can be averaged.  Remember that MongoDB reduce tasks have to be able to be called repeatedly, so the output is crafted to match the input: something that becomes even more important when we say, ask MongoDB to re-reduce our output with the old data.&lt;/p&gt;

&lt;div&gt;
  &lt;pre&gt;&lt;code class='javascript'&gt;function r( year, values ) { 
  var n = { count: 0, sum: 0 } 
  for ( var i = 0; i &amp;lt; values.length; i++ ){ 
      n.sum += values[i].sum; 
      n.count += values[i].count; 
  } 
   
  return n; 
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;We'll round it all out out with a quick and dirty finalize function which can calculate the current average.  Note that I'm keeping all the intermediate data around for demonstrating &quot;reduce&quot; mode.&lt;/p&gt;

&lt;div&gt;
  &lt;pre&gt;&lt;code class='javascript'&gt;function f( year, value ){
  value.avg = value.sum / value.count;
  return value;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;First, we'll need to stick these functions into some Java strings to pass around for our testing:&lt;/p&gt;

&lt;div&gt;
  &lt;pre&gt;&lt;code class='java'&gt;String m = &amp;quot;function() { key = typeof( this._id ) == \&amp;quot;number\&amp;quot; ? this._id : this._id.getYear() + 1900;&amp;quot; +
                   &amp;quot;emit( key, { count: 1, sum: this.bc10Year } );&amp;quot;;

        String r = &amp;quot;function( year, values ) { var n = { count: 0, sum: 0};&amp;quot; +
                   &amp;quot; for ( var i = 0; i &amp;lt; values.length; i ++ ) { n.sum += values[i].sum; &amp;quot; + 
                   &amp;quot; n.count += values[i].count; } return n; }&amp;quot;;

        String f = &amp;quot;function( year, value ) { value.avg = value.sum / value.count; return value; }&amp;quot;;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;The Java API now allows you to pass an optional &lt;strong&gt;&lt;a href=&quot;http://api.mongodb.org/java/2.5-pre-/com/mongodb/MapReduceCommand.OutputType.html&quot;&gt;MapReduceCommand.OutputType&lt;/a&gt;&lt;/strong&gt; value, which controls the type of output received.  If one is not specifed, the output collection is assumed to be &lt;strong&gt;REPLACE&lt;/strong&gt; --- namely, the standard mode in which the named collection is replaced completely with the output of the MapReduce job.  Looking at &lt;strong&gt;INLINE&lt;/strong&gt; as our example, we can call the new method in collection.  Feel free to set the output collection name to &lt;em&gt;null&lt;/em&gt; or a throwaway value; it is ignored by the Java driver in Inline output mode.&lt;/p&gt;

&lt;div&gt;
  &lt;pre&gt;&lt;code class='java'&gt;MapReduceOutput out = coll.mapReduce(m, r, null, MapReduceCommand.OutputType.INLINE, null);

for ( DBObject obj : out.results() ) {
    System.out.println( obj );
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;Which should output each DBObject in the results to the screen.  The new MapReduceOutput code detects the result set type from MongoDB and provides it in &lt;code&gt;results()&lt;/code&gt; as a &lt;code&gt;Iterable&amp;lt;DBObject&amp;gt;&lt;/code&gt;---whether the results are &lt;strong&gt;INLINE&lt;/strong&gt; or stored in a collection.  Note that I did not specify the &lt;code&gt;finalize&lt;/code&gt; function here, as the interface on &lt;strong&gt;DBCollection&lt;/strong&gt; doesn't accept it as a parameter.  Alternately, we could construct a &lt;strong&gt;&lt;a href=&quot;http://api.mongodb.org/java/2.5-pre-/com/mongodb/MapReduceCommand.html&quot;&gt;MapReduceCommand&lt;/a&gt;&lt;/strong&gt; instance, which allows us to set &lt;code&gt;finalize&lt;/code&gt;:&lt;/p&gt;

&lt;div&gt;
  &lt;pre&gt;&lt;code class='java'&gt;MapReduceCommand cmd = new MapReduceCommand( coll, m, r, null, 
                                             MapReduceCommand.OutputType.INLINE, null);

cmd.setFinalize(f);

out = coll.mapReduce(cmd);

for ( DBObject obj : out.results() ) {
    System.out.println( obj );
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;Using the &lt;strong&gt;MERGE&lt;/strong&gt; and &lt;strong&gt;REDUCE&lt;/strong&gt; Output Modes follows much the same pattern.  I'll leave figuring out &lt;strong&gt;MERGE&lt;/strong&gt; as an exercise for the reader (it should be easy if you read my last post) but here's how we would handle a &lt;strong&gt;REDUCE&lt;/strong&gt; on two halves of the same year.&lt;/p&gt;

&lt;div&gt;
  &lt;pre&gt;&lt;code class='java'&gt;cmd = new MapReduceCommand( coll, m, r, &amp;quot;yield_historical.out&amp;quot;, 
                            MapReduceCommand.OutputType.REDUCE, 
                            new BasicDBObject(&amp;quot;_id&amp;quot;, new BasicDBObject(
                                                        &amp;quot;$gte&amp;quot;, new Date( 101, 0, 1 )
                                                     ).append(
                                                        &amp;quot;$lte&amp;quot;, new Date( 101, 5, 1 )
                                                     )
                                            )
                           );

cmd.setFinalize(f);

/** Ignore output of first half... */
coll.mapReduce(cmd);

/** Reduce in second half */
cmd = new MapReduceCommand( coll, m, r, &amp;quot;yield_historical.out&amp;quot;, 
                            MapReduceCommand.OutputType.REDUCE, 
                            new BasicDBObject(&amp;quot;_id&amp;quot;, new BasicDBObject(
                                                        &amp;quot;$gt&amp;quot;, new Date( 101, 5, 1 )
                                                     ).append(
                                                        &amp;quot;$lte&amp;quot;, new Date( 101, 11, 31 )
                                                     )
                                             )
                           );

cmd.setFinalize(f);

out = coll.mapReduce(cmd);

for ( DBObject obj : out.results() ) {
    System.out.println( obj );
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;That's it! Go forth, and MapReduce...&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>A Look At MongoDB 1.8's MapReduce Changes</title>
   <link href="http://blog.evilmonkeylabs.com/2011/01/27/MongoDB-1_8-MapReduce/"/>
   <updated>2011-01-27T00:00:00+00:00</updated>
   <id>http://blog.evilmonkeylabs.com/2011/01/27/MongoDB-1_8-MapReduce</id>
   <content type="html">&lt;p&gt;MongoDB 1.7.5 shipped yesterday, and is expected to be the last 'beta' release of what will become MongoDB 1.8.  As part of the release, I've been doing testing of the new MapReduce functionality and thought this a good time to highlight those changes for people.&lt;/p&gt;

&lt;p&gt;If you aren't new to MongoDB MapReduce, the most important thing to note since MongoDB 1.6.x is that temporary collections are gone; it is now &lt;em&gt;required&lt;/em&gt; to specify an output.  Previously, if you omitted the &lt;em&gt;out&lt;/em&gt; argument MongoDB would create a temporary collection and return its name with the job results; In non-sharded MongoDB setups these temporary collections would go out of scope and be cleaned up when the connection closed.  Unfortunately, for sharded setups it wasn't possible to safely clean these up–--they would remain behind and clutter up the database.  For this and other reasons the temporary collection feature was removed. There is good news though: they've been replaced with an even better system for saving the results of MapReduce jobs!&lt;/p&gt;

&lt;p&gt;While the &lt;em&gt;out&lt;/em&gt; argument is now a required parameter in MapReduce jobs, it has a number of options for controlling what MongoDB does with results.  If you're running a truly one-off job where you don't need to keep the results later, MongoDB now supports returning results &quot;inline&quot;.  Be careful here though: your results are being returned in a single document and are subject to the document size limitations of MongoDB (16MB per document in 1.8).  To use inline results, set the value of &lt;em&gt;out&lt;/em&gt; to a document &lt;code&gt;{inline: 1}&lt;/code&gt;.  The result object will contain an additional key &lt;em&gt;results&lt;/em&gt; which contains the MapReduce output; the &lt;em&gt;result&lt;/em&gt; field will be omitted.&lt;/p&gt;

&lt;p&gt;As with previous versions of MongoDB, you can specify a collection name (as a string) in the &lt;em&gt;out&lt;/em&gt; argument.  If the named collection already exists MongoDB will replace it entirely with the MapReduce results. Along with the inline mode, MongoDB 1.8 introduces support for &quot;merge&quot; and &quot;reduce&quot; output modes; instead of replacing the target collection MongoDB can be instructed to reconcile the MapReduce results with the existing data.  To use these modes, set the value of &lt;em&gt;out&lt;/em&gt; to a document with a key of either &quot;merge&quot; or &quot;reduce&quot; and a value of the collection to save to.&lt;/p&gt;

&lt;p&gt;The difference in &quot;merge&quot; and &quot;reduce&quot; has to do with MongoDB does when it encounters duplicate keys in both the existing collection and the MapReduce results.  In &quot;merge&quot; mode, MongoDB will simply overwrite the existing key with the new one from the MapReduce output.  In &quot;reduce&quot; mode, MongoDB will run the reduce function again with both the new and old data, saving those results to the collection (you remembered to make your reduce function idempotent, right?). &lt;strong&gt;UPDATE&lt;/strong&gt;: If you specified a &quot;finalize&quot; function, MongoDB will re-run this after the &quot;reduce&quot; runs.&lt;/p&gt;

&lt;p&gt;Now that I've thoroughly confused you, lets dig into examples of each of these behaviors.  I've been testing the 1.8 MapReduce using a dataset and MapReduce job originally created to test the &lt;a href=&quot;http://github.com/mongodb/mongo-hadoop&quot;&gt;MongoDB+Hadoop Plugin&lt;/a&gt;.  It consists of daily U.S. Treasury Yield Data for about 20 years; the MapReduce task calculates an annual average for each year in the collection.  You can grab a copy of the entire collection in a handy mongoimport friendly &lt;a href=&quot;https://github.com/mongodb/mongo-hadoop/raw/master/examples/treasury_yield/resources/yield_historical_in.json&quot;&gt;datadump from the MongoDB+Hadoop repo&lt;/a&gt;; here's a quick snippet of it:&lt;/p&gt;

&lt;div&gt;
  &lt;pre&gt;&lt;code class='javascript'&gt;{ &amp;quot;_id&amp;quot; : ISODate(&amp;quot;1990-01-10T00:00:00Z&amp;quot;), &amp;quot;dayOfWeek&amp;quot; : &amp;quot;WEDNESDAY&amp;quot;, &amp;quot;bc3Year&amp;quot; : 7.95, &amp;quot;bc5Year&amp;quot; : 7.92, &amp;quot;bc10Year&amp;quot; : 8.03, &amp;quot;bc20Year&amp;quot; : null, &amp;quot;bc1Month&amp;quot; : null, &amp;quot;bc2Year&amp;quot; : 7.91, &amp;quot;bc3Month&amp;quot; : 7.75, &amp;quot;bc30Year&amp;quot; : 8.11, &amp;quot;bc1Year&amp;quot; : 7.77, &amp;quot;bc7Year&amp;quot; : 8, &amp;quot;bc6Month&amp;quot; : 7.78 }
{ &amp;quot;_id&amp;quot; : ISODate(&amp;quot;1990-01-11T00:00:00Z&amp;quot;), &amp;quot;dayOfWeek&amp;quot; : &amp;quot;THURSDAY&amp;quot;, &amp;quot;bc3Year&amp;quot; : 7.95, &amp;quot;bc5Year&amp;quot; : 7.94, &amp;quot;bc10Year&amp;quot; : 8.04, &amp;quot;bc20Year&amp;quot; : null, &amp;quot;bc1Month&amp;quot; : null, &amp;quot;bc2Year&amp;quot; : 7.91, &amp;quot;bc3Month&amp;quot; : 7.8, &amp;quot;bc30Year&amp;quot; : 8.11, &amp;quot;bc1Year&amp;quot; : 7.77, &amp;quot;bc7Year&amp;quot; : 8.01, &amp;quot;bc6Month&amp;quot; : 7.8 }
{ &amp;quot;_id&amp;quot; : ISODate(&amp;quot;1990-01-12T00:00:00Z&amp;quot;), &amp;quot;dayOfWeek&amp;quot; : &amp;quot;FRIDAY&amp;quot;, &amp;quot;bc3Year&amp;quot; : 7.98, &amp;quot;bc5Year&amp;quot; : 7.99, &amp;quot;bc10Year&amp;quot; : 8.1, &amp;quot;bc20Year&amp;quot; : null, &amp;quot;bc1Month&amp;quot; : null, &amp;quot;bc2Year&amp;quot; : 7.93, &amp;quot;bc3Month&amp;quot; : 7.74, &amp;quot;bc30Year&amp;quot; : 8.17, &amp;quot;bc1Year&amp;quot; : 7.76, &amp;quot;bc7Year&amp;quot; : 8.07, &amp;quot;bc6Month&amp;quot; : 7.8100000000000005 }
{ &amp;quot;_id&amp;quot; : ISODate(&amp;quot;1990-01-16T00:00:00Z&amp;quot;), &amp;quot;dayOfWeek&amp;quot; : &amp;quot;TUESDAY&amp;quot;, &amp;quot;bc3Year&amp;quot; : 8.13, &amp;quot;bc5Year&amp;quot; : 8.11, &amp;quot;bc10Year&amp;quot; : 8.2, &amp;quot;bc20Year&amp;quot; : null, &amp;quot;bc1Month&amp;quot; : null, &amp;quot;bc2Year&amp;quot; : 8.1, &amp;quot;bc3Month&amp;quot; : 7.89, &amp;quot;bc30Year&amp;quot; : 8.25, &amp;quot;bc1Year&amp;quot; : 7.92, &amp;quot;bc7Year&amp;quot; : 8.18, &amp;quot;bc6Month&amp;quot; : 7.99 }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;




&lt;!--more--&gt;


&lt;p&gt;The map function I'm using extracts the year from the date, and the 10 year benchmark value:&lt;/p&gt;

&lt;div&gt;
  &lt;pre&gt;&lt;code class='javascript'&gt;function m() { 
    key = typeof( this._id ) == &amp;quot;number&amp;quot; ? this._id : this._id.getYear() + 1900; 
    emit( key, { count: 1, sum: this.bc10Year } ) ;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;While the reduce function aggregates the data by year, creating a set that can be averaged.  Remember that MongoDB reduce tasks have to be able to be called repeatedly, so the output is crafted to match the input: something that becomes even more important when we say, ask MongoDB to re-reduce our output with the old data.&lt;/p&gt;

&lt;div&gt;
  &lt;pre&gt;&lt;code class='javascript'&gt;function r( year, values ) { 
  var n = { count: 0, sum: 0 } 
  for ( var i = 0; i &amp;lt; values.length; i++ ){ 
      n.sum += values[i].sum; 
      n.count += values[i].count; 
  } 
   
  return n; 
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;We'll round it all out out with a quick and dirty finalize function which can calculate the current average.  Note that I'm keeping all the intermediate data around for demonstrating &quot;reduce&quot; mode.&lt;/p&gt;

&lt;div&gt;
  &lt;pre&gt;&lt;code class='javascript'&gt;function f( year, value ){
  value.avg = value.sum / value.count;
  return value;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;First, a quick look at &quot;inline&quot; mode (I'll leave plain old name a collection as an exercise to you, my humble reader).&lt;/p&gt;

&lt;div&gt;
  &lt;pre&gt;&lt;code class='javascript'&gt;&amp;gt; res = db.runCommand(
...   { 
...     &amp;quot;mapreduce&amp;quot;: &amp;quot;yield_historical.in&amp;quot;,
...     &amp;quot;map&amp;quot;: m,
...     &amp;quot;reduce&amp;quot;: r,
...     &amp;quot;finalize&amp;quot;: f,
...     &amp;quot;query&amp;quot; : { &amp;quot;_id&amp;quot; : { &amp;quot;$gt&amp;quot; : new Date(2000, 0, 1) } },
...     &amp;quot;verbose&amp;quot; : true , 
...     &amp;quot;out&amp;quot; : { &amp;quot;inline&amp;quot; : 1 }
...   }
... )
{
    &amp;quot;results&amp;quot; : [
        {
            &amp;quot;_id&amp;quot; : 1990,
            &amp;quot;value&amp;quot; : 8.552400000000002
        },
        /* ... */
        {
            &amp;quot;_id&amp;quot; : 2010,
            &amp;quot;value&amp;quot; : 3.3255026455026435
        }
    ],
    &amp;quot;timeMillis&amp;quot; : 218,
    &amp;quot;timing&amp;quot; : {
        &amp;quot;mapTime&amp;quot; : NumberLong(168),
        &amp;quot;emitLoop&amp;quot; : 215,
        &amp;quot;total&amp;quot; : 218
    },
    &amp;quot;counts&amp;quot; : {
        &amp;quot;input&amp;quot; : 2690,
        &amp;quot;emit&amp;quot; : 2690,
        &amp;quot;output&amp;quot; : 11
    },
    &amp;quot;ok&amp;quot; : 1
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;To demonstrate &quot;merge&quot; and &quot;reduce&quot; mode, I'm going to use queries to break out the data a bit.  Lets look first at &quot;merge&quot;, by first running MapReduce against the first half of the data, and then merge in the second half.&lt;/p&gt;

&lt;div&gt;
  &lt;pre&gt;&lt;code class='javascript'&gt;&amp;gt; res = db.runCommand(
...   { 
...     &amp;quot;mapreduce&amp;quot;: &amp;quot;yield_historical.in&amp;quot;,
...     &amp;quot;map&amp;quot;: m,
...     &amp;quot;reduce&amp;quot;: r,
...     &amp;quot;finalize&amp;quot;: f,
...     &amp;quot;query&amp;quot; : { &amp;quot;_id&amp;quot; : { &amp;quot;$lt&amp;quot; : new Date(2000, 0, 1) } },
...     &amp;quot;verbose&amp;quot; : true , 
...     &amp;quot;out&amp;quot; : &amp;quot;yield_historical.merged&amp;quot;,
...   }
... )
{
    &amp;quot;result&amp;quot; : &amp;quot;yield_historical.merged&amp;quot;,
    &amp;quot;timeMillis&amp;quot; : 223,
    &amp;quot;timing&amp;quot; : {
        &amp;quot;mapTime&amp;quot; : NumberLong(166),
        &amp;quot;emitLoop&amp;quot; : 217,
        &amp;quot;total&amp;quot; : 223
    },
    &amp;quot;counts&amp;quot; : {
        &amp;quot;input&amp;quot; : 2503,
        &amp;quot;emit&amp;quot; : 2503,
        &amp;quot;output&amp;quot; : 10
    },
    &amp;quot;ok&amp;quot; : 1
}
&amp;gt; db.yield_historical.merged.find({}, {&amp;quot;value.avg&amp;quot;: 1})
{ &amp;quot;_id&amp;quot; : 1990, &amp;quot;value&amp;quot; : { &amp;quot;avg&amp;quot; : 8.552400000000002 } }
{ &amp;quot;_id&amp;quot; : 1991, &amp;quot;value&amp;quot; : { &amp;quot;avg&amp;quot; : 7.8623600000000025 } }
{ &amp;quot;_id&amp;quot; : 1992, &amp;quot;value&amp;quot; : { &amp;quot;avg&amp;quot; : 7.008844621513946 } }
{ &amp;quot;_id&amp;quot; : 1993, &amp;quot;value&amp;quot; : { &amp;quot;avg&amp;quot; : 5.866279999999999 } }
{ &amp;quot;_id&amp;quot; : 1994, &amp;quot;value&amp;quot; : { &amp;quot;avg&amp;quot; : 7.085180722891565 } }
{ &amp;quot;_id&amp;quot; : 1995, &amp;quot;value&amp;quot; : { &amp;quot;avg&amp;quot; : 6.573920000000002 } }
{ &amp;quot;_id&amp;quot; : 1996, &amp;quot;value&amp;quot; : { &amp;quot;avg&amp;quot; : 6.443531746031743 } }
{ &amp;quot;_id&amp;quot; : 1997, &amp;quot;value&amp;quot; : { &amp;quot;avg&amp;quot; : 6.353959999999992 } }
{ &amp;quot;_id&amp;quot; : 1998, &amp;quot;value&amp;quot; : { &amp;quot;avg&amp;quot; : 5.262879999999994 } }
{ &amp;quot;_id&amp;quot; : 1999, &amp;quot;value&amp;quot; : { &amp;quot;avg&amp;quot; : 5.646135458167332 } }
&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;That gives us our first half of the data; we ran that with a normal named collection output.  Lets merge in the second half:&lt;/p&gt;

&lt;div&gt;
  &lt;pre&gt;&lt;code class='javascript'&gt;&amp;gt; res = db.runCommand(
...   { 
...     &amp;quot;mapreduce&amp;quot;: &amp;quot;yield_historical.in&amp;quot;,
...     &amp;quot;map&amp;quot;: m,
...     &amp;quot;reduce&amp;quot;: r,
...     &amp;quot;finalize&amp;quot;: f,
...     &amp;quot;query&amp;quot; : { &amp;quot;_id&amp;quot; : { &amp;quot;$gt&amp;quot; : new Date(2000, 0, 1) } },
...     &amp;quot;verbose&amp;quot; : true , 
...     &amp;quot;out&amp;quot; : { &amp;quot;merge&amp;quot; : &amp;quot;yield_historical.merged&amp;quot; },
...   }
... )
{
    &amp;quot;result&amp;quot; : &amp;quot;yield_historical.merged&amp;quot;,
    &amp;quot;timeMillis&amp;quot; : 242,
    &amp;quot;timing&amp;quot; : {
        &amp;quot;mapTime&amp;quot; : NumberLong(173),
        &amp;quot;emitLoop&amp;quot; : 236,
        &amp;quot;total&amp;quot; : 242
    },
    &amp;quot;counts&amp;quot; : {
        &amp;quot;input&amp;quot; : 2690,
        &amp;quot;emit&amp;quot; : 2690,
        &amp;quot;output&amp;quot; : 21
    },
    &amp;quot;ok&amp;quot; : 1
}

&amp;gt; db.yield_historical.merged.find({&amp;quot;_id&amp;quot;: {$gt: 1998}}, {&amp;quot;value.avg&amp;quot;: 1}) 
{ &amp;quot;_id&amp;quot; : 1999, &amp;quot;value&amp;quot; : { &amp;quot;avg&amp;quot; : 5.646135458167332 } }
{ &amp;quot;_id&amp;quot; : 2000, &amp;quot;value&amp;quot; : { &amp;quot;avg&amp;quot; : 6.030278884462145 } }
{ &amp;quot;_id&amp;quot; : 2001, &amp;quot;value&amp;quot; : { &amp;quot;avg&amp;quot; : 5.020685483870969 } }
{ &amp;quot;_id&amp;quot; : 2002, &amp;quot;value&amp;quot; : { &amp;quot;avg&amp;quot; : 4.61308 } }
{ &amp;quot;_id&amp;quot; : 2003, &amp;quot;value&amp;quot; : { &amp;quot;avg&amp;quot; : 4.013879999999999 } }
{ &amp;quot;_id&amp;quot; : 2004, &amp;quot;value&amp;quot; : { &amp;quot;avg&amp;quot; : 4.271320000000004 } }
{ &amp;quot;_id&amp;quot; : 2005, &amp;quot;value&amp;quot; : { &amp;quot;avg&amp;quot; : 4.288880000000001 } }
{ &amp;quot;_id&amp;quot; : 2006, &amp;quot;value&amp;quot; : { &amp;quot;avg&amp;quot; : 4.7949999999999955 } }
{ &amp;quot;_id&amp;quot; : 2007, &amp;quot;value&amp;quot; : { &amp;quot;avg&amp;quot; : 4.634661354581674 } }
{ &amp;quot;_id&amp;quot; : 2008, &amp;quot;value&amp;quot; : { &amp;quot;avg&amp;quot; : 3.6642629482071714 } }
{ &amp;quot;_id&amp;quot; : 2009, &amp;quot;value&amp;quot; : { &amp;quot;avg&amp;quot; : 3.2641200000000037 } }
{ &amp;quot;_id&amp;quot; : 2010, &amp;quot;value&amp;quot; : { &amp;quot;avg&amp;quot; : 3.3255026455026435 } }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;To close out, lets take &quot;reduce&quot; mode for a quick spin.  We'll select a half of a year for the first part, and then reduce in the second half.&lt;/p&gt;

&lt;div&gt;
  &lt;pre&gt;&lt;code class='javascript'&gt;&amp;gt; res = db.runCommand(
...   { 
...     &amp;quot;mapreduce&amp;quot;: &amp;quot;yield_historical.in&amp;quot;,
...     &amp;quot;map&amp;quot;: m,
...     &amp;quot;reduce&amp;quot;: r,
...     &amp;quot;finalize&amp;quot;: f,
...     &amp;quot;query&amp;quot; : { &amp;quot;_id&amp;quot; : { 
...         &amp;quot;$gte&amp;quot;: new Date(2001, 0, 1),
...         &amp;quot;$lte&amp;quot; : new Date(2001, 5, 1) 
...     } },
...     &amp;quot;verbose&amp;quot; : true , 
...     &amp;quot;out&amp;quot; : &amp;quot;yield_historical.reduced&amp;quot;,
...   }
... )
{
    &amp;quot;result&amp;quot; : &amp;quot;yield_historical.reduced&amp;quot;,
    &amp;quot;timeMillis&amp;quot; : 21,
    &amp;quot;timing&amp;quot; : {
        &amp;quot;mapTime&amp;quot; : NumberLong(6),
        &amp;quot;emitLoop&amp;quot; : 17,
        &amp;quot;total&amp;quot; : 21
    },
    &amp;quot;counts&amp;quot; : {
        &amp;quot;input&amp;quot; : 105,
        &amp;quot;emit&amp;quot; : 105,
        &amp;quot;output&amp;quot; : 1
    },
    &amp;quot;ok&amp;quot; : 1
}
&amp;gt; db.yield_historical.reduced.find()
{ &amp;quot;_id&amp;quot; : 2001, &amp;quot;value&amp;quot; : { &amp;quot;count&amp;quot; : 105, &amp;quot;sum&amp;quot; : 539.5599999999998, &amp;quot;avg&amp;quot; : 5.138666666666665 } }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;That handles the first half... Let's grab the second:&lt;/p&gt;

&lt;div&gt;
  &lt;pre&gt;&lt;code class='javascript'&gt;&amp;gt; res = db.runCommand(              
...   { 
...     &amp;quot;mapreduce&amp;quot;: &amp;quot;yield_historical.in&amp;quot;,
...     &amp;quot;map&amp;quot;: m,
...     &amp;quot;reduce&amp;quot;: r,
...     &amp;quot;finalize&amp;quot;: f,
...     &amp;quot;query&amp;quot; : { &amp;quot;_id&amp;quot; : { 
...         &amp;quot;$gt&amp;quot;: new Date(2001, 5, 1),
...         &amp;quot;$lte&amp;quot; : new Date(2001, 11, 31) 
...     } },
...     &amp;quot;verbose&amp;quot; : true , 
...     &amp;quot;out&amp;quot; : { &amp;quot;reduce&amp;quot; : &amp;quot;yield_historical.reduced&amp;quot; },
...   }
... )
{
    &amp;quot;result&amp;quot; : &amp;quot;yield_historical.reduced&amp;quot;,
    &amp;quot;timeMillis&amp;quot; : 26,
    &amp;quot;timing&amp;quot; : {
        &amp;quot;mapTime&amp;quot; : NumberLong(9),
        &amp;quot;emitLoop&amp;quot; : 22,
        &amp;quot;total&amp;quot; : 26
    },
    &amp;quot;counts&amp;quot; : {
        &amp;quot;input&amp;quot; : 143,
        &amp;quot;emit&amp;quot; : 143,
        &amp;quot;output&amp;quot; : 1
    },
    &amp;quot;ok&amp;quot; : 1
}
&amp;gt; db.yield_historical.reduced.find()
{ &amp;quot;_id&amp;quot; : 2001, &amp;quot;value&amp;quot; : { &amp;quot;count&amp;quot; : 248, &amp;quot;sum&amp;quot; : 1245.1299999999997, &amp;quot;avg&amp;quot; : 5.020685483870967 } }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;Of course, this does us no good if the results don't add up.  A quick comparison between the 'merged' output and the 'reduced' output validates our code:&lt;/p&gt;

&lt;div&gt;
  &lt;pre&gt;&lt;code class='javascript'&gt;&amp;gt; db.yield_historical.reduced.find({_id: 2001})
{ &amp;quot;_id&amp;quot; : 2001, &amp;quot;value&amp;quot; : { &amp;quot;count&amp;quot; : 248, &amp;quot;sum&amp;quot; : 1245.1299999999997, &amp;quot;avg&amp;quot; : 5.020685483870967 } }
&amp;gt; db.yield_historical.merged.find({_id: 2001}) 
{ &amp;quot;_id&amp;quot; : 2001, &amp;quot;value&amp;quot; : { &amp;quot;count&amp;quot; : 248, &amp;quot;sum&amp;quot; : 1245.1300000000003, &amp;quot;avg&amp;quot; : 5.020685483870969 } }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;There are some minor differences at a decimal level since we are working with floating point numbers here, but the results are the same.&lt;/p&gt;

&lt;p&gt;These new MapReduce output parameters are available in MongoDB as of version 1.7.4 (which is part of the unstable/development branch) and will ship with MongoDB 1.8. Leave a comment; I'd love to hear what clever tricks you can pull off with these new options.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Exploring Scala with MongoDB</title>
   <link href="http://blog.evilmonkeylabs.com/2011/01/10/intro-scala-mongo/"/>
   <updated>2011-01-10T00:00:00+00:00</updated>
   <id>http://blog.evilmonkeylabs.com/2011/01/10/intro-scala-mongo</id>
   <content type="html">&lt;p&gt;2010 proved to be a great year for growth and adoption of many fledgling technologies---not least among them, &lt;a href=&quot;http://mongodb.org/&quot; title=&quot;MongoDB&quot;&gt;MongoDB&lt;/a&gt; and &lt;a href=&quot;http://scala-lang.org&quot;&gt;Scala&lt;/a&gt;.  Scala is designed as an alternative language for the Java platform, with a focus on scalability. It merges many of the Object Oriented concepts of languages like Java and C++ with the functional tools of Erlang, Haskell and Lisp with a bit of the dynamic natures of modern languages like Ruby and Python.  This flexible nature has sped Scala's adoption in the technology stacks of platforms like &lt;a href=&quot;http://www.scala-lang.org/node/7806&quot;&gt;LinkedIn&lt;/a&gt;, &lt;a href=&quot;http://www.artima.com/scalazine/articles/twitter_on_scala.html&quot;&gt;Twitter&lt;/a&gt;, &lt;a href=&quot;http://www.10gen.com/video/misc/foursquare&quot;&gt;FourSquare&lt;/a&gt; and many more.  By running on the JVM Scala has a strong affinity for working alongside existing Java applications, which allows users to build on their existing technology investments.&lt;/p&gt;

&lt;p&gt;For 2011, MongoDB has added official support for Scala with the release of &lt;a href=&quot;http://api.mongodb.org/scala/casbah/latest/&quot;&gt;Casbah&lt;/a&gt;, a Scala driver for MongoDB.  Casbah is built around the existing MongoDB Java Driver to give it a strong foundation, but designed to take advantage of many of the idioms of Scala such as a strong collections library, fluid syntax for building DSLs and functional concepts like closures and currying.&lt;/p&gt;

&lt;p&gt;Because it is designed to be easy to work with for Scala users, Casbah introduces a more 'friendly' syntax for creating MongoDB Objects, using Scala's Map syntax:&lt;/p&gt;

&lt;div&gt;
  &lt;pre&gt;&lt;code class='scala'&gt;import com.mongodb.casbah.Imports._

/** Create an object directly */
val newObj = MongoDBObject(&amp;quot;foo&amp;quot; -&amp;gt; &amp;quot;bar&amp;quot;,
                           &amp;quot;x&amp;quot; -&amp;gt; &amp;quot;y&amp;quot;,
                           &amp;quot;pie&amp;quot; -&amp;gt; 3.14,
                           &amp;quot;spam&amp;quot; -&amp;gt; &amp;quot;eggs&amp;quot;)

/** Or, use a builder interface */
val builder = MongoDBObject.newBuilder
builder += &amp;quot;foo&amp;quot; -&amp;gt; &amp;quot;bar&amp;quot;
builder += &amp;quot;x&amp;quot; -&amp;gt; &amp;quot;y&amp;quot;
builder += (&amp;quot;pie&amp;quot; -&amp;gt; 3.14)
builder += (&amp;quot;spam&amp;quot; -&amp;gt; &amp;quot;eggs&amp;quot;, &amp;quot;mmm&amp;quot; -&amp;gt; &amp;quot;bacon&amp;quot;)
val newObj = builder.result&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;The goal of this syntax is to be more readable, similar to what one might expect from a dynamic language like Ruby or Python.&lt;/p&gt;

&lt;!--more--&gt;


&lt;p&gt;In contrast, the same statements in Java tend to be more verbose:&lt;/p&gt;

&lt;div&gt;
  &lt;pre&gt;&lt;code class='scala'&gt;import com.mongodb.*;

DBObject newObj = new BasicDBObject();
newObj.put(&amp;quot;foo&amp;quot;, &amp;quot;bar&amp;quot;);
newObj.put(&amp;quot;x&amp;quot;, &amp;quot;y&amp;quot;);
newObj.put(&amp;quot;pie&amp;quot;, 3.14);
newObj.put(&amp;quot;spam&amp;quot;, &amp;quot;eggs&amp;quot;);

/** or, builder style */

BasicDBObjectBuilder builder = BasicDBObjectBuilder.start();
builder.add(&amp;quot;foo&amp;quot;, &amp;quot;bar&amp;quot;);
builder.add(&amp;quot;x&amp;quot;, &amp;quot;y&amp;quot;);
builder.add(&amp;quot;pie&amp;quot;, 3.14);
builder.add(&amp;quot;spam&amp;quot;, &amp;quot;eggs&amp;quot;);
builder.add(&amp;quot;mmm&amp;quot;, &amp;quot;bacon&amp;quot;);
DBObject newObj = builder.get();&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;The semantics of working with Collections and Cursors in Casbah are similar to the Java driver they wrap, with a bit of Scala-friendly syntactic sugar added for things like &lt;a href=&quot;http://www.scala-lang.org/node/111&quot;&gt;for comprehensions&lt;/a&gt;.  Where Casbah really shines is in its use of a DSL syntax for creating MongoDB Queries.&lt;/p&gt;

&lt;div&gt;
  &lt;pre&gt;&lt;code class='scala'&gt;/** This Query Object ... */
val query = new MongoDBObject(
                &amp;quot;foo&amp;quot; -&amp;gt; MongoDObject(&amp;quot;$gte&amp;quot; -&amp;gt; 5, &amp;quot;$lte&amp;quot; -&amp;gt; 10),
                &amp;quot;baz&amp;quot; -&amp;gt; 5,
                &amp;quot;x&amp;quot; -&amp;gt; &amp;quot;y&amp;quot;,
                &amp;quot;n&amp;quot; -&amp;gt; &amp;quot;r&amp;quot;
            )
/** Can be constructed instead with the Query DSL: */
val queryDSL = (&amp;quot;foo&amp;quot; $gte 5 $lte 10) ++ (&amp;quot;baz&amp;quot; -&amp;gt; 5) ++ (&amp;quot;x&amp;quot; -&amp;gt; &amp;quot;y&amp;quot;) ++ (&amp;quot;n&amp;quot; -&amp;gt; &amp;quot;r&amp;quot;)

/** Easily create negated statements. 
    Instead of a nested DBObject constructor like this: */

val ltGt = MongoDBObject(
            &amp;quot;foo&amp;quot; -&amp;gt; MongoDBObject(
                &amp;quot;$not&amp;quot; -&amp;gt; MongoDBObject(
                    &amp;quot;$gte&amp;quot; -&amp;gt; 15, 
                    &amp;quot;$lt&amp;quot; -&amp;gt; 35.2, 
                    &amp;quot;$ne&amp;quot; -&amp;gt; 16)
                )
            )

/** Use Casbah's Query DSL to say it much simpler */
val ltGtDSL = &amp;quot;foo&amp;quot; $not { _ $gte 15 $lt 35.2 $ne 16 }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;All of MongoDB's &lt;em&gt;$ Operators&lt;/em&gt; including Geospatial Queries are supported by Casbah's DSL.&lt;/p&gt;

&lt;p&gt;This is just a small taste of what Casbah and Scala offer to the MongoDB user, but we encourage you to explore more.  &lt;a href=&quot;http://api.mongodb.org/scala/casbah/latest/setting_up.html&quot;&gt;Version 2.01&lt;/a&gt; is now available for download.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Talking to ActiveDirectory from IronPython</title>
   <link href="http://blog.evilmonkeylabs.com/2009/10/20/talking-to-activedirectory-from-iron-python/"/>
   <updated>2009-10-20T00:00:00+00:00</updated>
   <id>http://blog.evilmonkeylabs.com/2009/10/20/talking-to-activedirectory-from-iron-python</id>
   <content type="html">&lt;p&gt;We're building a new intranet system at work, and I've been toying with a few things that the Windows admin asked for.  Namely, since the secretaries here will update the intranet data to add people's Work &amp;amp; Emergency contact numbers, AIM handles, email addresses, etc. that we find a way to keep it all in sync with ActiveDirectory.  Thereby keeping all the Outlooks  and Blackberries up to date with the latest contact information.&lt;/p&gt;

&lt;p&gt;This seemed like a fairly reasonable request, presuming we could figure out how to do it and since I've been using Mono and IronPython a lot more lately, I figured there would be a way to accomplish it.  Most of the information I found online was either really old and/or crappy docs for doing it in C#, or more commonly using PowerShell or VBScript.  So, I managed to poke around and sort out how to get IronPython on Mono (IronPython 2.6RC + Mono 2.4.2.3) to find and update our users.&lt;/p&gt;

&lt;p&gt;The end result is that I can now, from IronPython, find and update valid information on ActiveDirectory entries to reflect the latest and greatest information.  One thing to note, the MS .Net ActiveDirectory APIs (System.DirectoryServices, which is mirrored in Mono) do something that confused and annoyed me.  There are a limited set of 'valid' attribute keys for a user object in Active Directory (Which is really just LDAP, in case you didn't know).  The &lt;code&gt;DirectoryEntry&lt;/code&gt; object has a Properties attribute, which contains a hashmap of these values.&lt;/p&gt;

&lt;!--more--&gt;


&lt;p&gt;The object will &lt;strong&gt;not&lt;/strong&gt; allow you to set an &quot;Invalid&quot; key (see &lt;a href=&quot;http://www.dotnetactivedirectory.com/Understanding_LDAP_Active_Directory_User_Object_Properties.html&quot;&gt;this list&lt;/a&gt; for valid keys).  But if you call &lt;code&gt;.Properties.Keys&lt;/code&gt; you &lt;em&gt;only&lt;/em&gt; get back the Properties that have values set.  So, it doesn't appear to be possible to actually ask &lt;em&gt;What keys are valid?&lt;/em&gt; and do some introspective programming.  I have written a wrapper class to make the DirectoryEntry properties look a bit more pythonic (but disabled support for multi-value attributes for now) - at some point in the near future i'll likely add in a &quot;valid value&quot; filter.&lt;/p&gt;

&lt;p&gt;The end result is, if I want to find my own user in ActiveDirectory by my name, I can do the following from the IronPython console:&lt;/p&gt;

&lt;div&gt;
  &lt;pre&gt;&lt;code class='python'&gt;&amp;gt;&amp;gt;&amp;gt; import ad_util
&amp;gt;&amp;gt;&amp;gt; adh = ad_util.ActiveDirectorySearcher('mydomaincontroller.hostname.or.ip', 'my.domain', 'myUsernameAllowedToChangeObjects', 'myPassword')
&amp;gt;&amp;gt;&amp;gt; adh
&amp;lt;ActiveDirectorySearcher object at 0x000000000000002D&amp;gt;
&amp;gt;&amp;gt;&amp;gt; userObj = adh.find_name('McAdams', 'Brendan')
[debug] Searching activedirectory for (&amp;amp;amp;(objectCategory=user)(objectClass=person)(sAMAccountName=*)(sn=McAdams*)
(givenname=Brendan*)).  Allow multiple results? False
&amp;gt;&amp;gt;&amp;gt; userObj
&amp;lt;DirectoryEntryHelper:{sn=McAdams,givenName=Brendan,mail=None,sAMAccountName=brendan.mcadams}&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;You'll note the object returned is a &quot;DirectoryEntryHelper&quot; type; this is a crappy little wrapper class I put together to simplify attribute access, etc.   You can tell any of the find_ methods to return a raw .Net API object instead of wrapped by passing the kwarg &lt;code&gt;nowrap=True&lt;/code&gt;;  &lt;code&gt;find_name()&lt;/code&gt; takes &lt;code&gt;last_name, first_name&lt;/code&gt;.  Several other utility methods exist on the class including find by account name.  Note that, in order to filter out entries in the Global Address List I'm requiring the search to find objects who have sAMAccountNames. I know the bare minimum about ActiveDirectory, but my Windows admin here tells me that sAMAccountName is a required and &lt;em&gt;unique&lt;/em&gt; attribute on any actual domain account object.&lt;/p&gt;

&lt;p&gt;You can see the keys that are already defined on the object with the &lt;code&gt;keys&lt;/code&gt; helper method I added onto &lt;code&gt;DirectoryEntryHelper&lt;/code&gt;:&lt;/p&gt;

&lt;div&gt;
  &lt;pre&gt;&lt;code class='python'&gt;&amp;gt;&amp;gt;&amp;gt; userObj.keys
['lockouttime', 'primarygroupid', 'msexchuseraccountcontrol', 'distinguishedname', 'cn', 'dscorepropagationdata', 
'whencreated', 'logoncount', 'msexchhomeservername', 'objectclass', 'memberof', 'lastlogontimestamp', 'displayname',    'msexchalobjectversion', 'objectguid', 'whenchanged', 'badpwdcount', 'useraccountcontrol', 'badpasswordtime', 'name', 
'samaccountname', 'mdbusedefaults', 'accountexpires', 'countrycode', 'msds-supportedencryptiontypes', 'homedirectory', 
'userprincipalname', 'lastlogon', 'objectsid', 'givenname', 'homedrive', 'usncreated', 'admincount', 'instancetype', 
'codepage', 'physicaldeliveryofficename', 'samaccounttype', 'sn', 'objectcategory', 'telephonenumber', 'pwdlastset', 
'usnchanged', 'lastlogoff', 'initials']&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;This returns a comprehended list of the keys (Rather than calling resultObj.Properties.Keys, which returns a Hashtable of HashKeys.  It just makes life easier.&lt;/p&gt;

&lt;p&gt;If I want to setup my mobile phone # (which isn't already set already) in Active Directory:&lt;/p&gt;

&lt;div&gt;
  &lt;pre&gt;&lt;code class='python'&gt;&amp;gt;&amp;gt;&amp;gt; userObj.mobile
# Nothing returned as mobile isn't set...
&amp;gt;&amp;gt;&amp;gt; userObj.mobile = '(646) 555-1212'
# It is committed on set to Active Directory, so another find gets it...
&amp;gt;&amp;gt;&amp;gt; newUserObj = test.adh.find_name('McAdams', 'Brendan')   
[debug] Searching activedirectory for (&amp;amp;amp;(objectCategory=user)(objectClass=person)(sAMAccountName=*)(sn=McAdams*)
(givenname=Brendan*)).  Allow multiple results? False 
&amp;gt;&amp;gt;&amp;gt; newUserObj.mobile
'(646)555-1212'&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;I'll leave the rest as an exercise for the reader, but I'm interested in comments and changes.  You can fetch the latest code from &lt;a href=&quot;http://bitbucket.org/bwmcadams/toybox/src/tip/ad_util.py&quot;&gt;my BitBucket toybox&lt;/a&gt;.  I've also pasted it, for posterity sake, below the fold.&lt;/p&gt;

&lt;div&gt;
  &lt;pre&gt;&lt;code class='python'&gt;#!IronPython Specific Script!
# 
# Brendan W. McAdams &amp;lt;bwmcadams@gmail.com&amp;gt;
#
#------------------------------------------------- 
# No copyright or licensing, made public
# as example code.  Feel free to use it as you like;
# No warranty, liability or guarantees are implied.  
# In other words, if you use it YOU ARE ON YOUR OWN. 
#-------------------------------------------------
#
# Utility script to interface from IronPython to 
# MS Active Directory, allowing queries of properties 
# such as telephone numbers, and changes to said properties
# if you'd like to update them.
# 
# Note that your authentication user has to have valid permissions.
# If you're uncertain as to what permissions are needed, please see
# your AD Admin.

import clr 

# Add the System.DirectoryServices Mono DLL in.
# not sure on Windows what you need to add,
# but for Mono/Linux you just need to set IRONPYTHONPATH
# to include the location of the dll

clr.AddReference('System.DirectoryServices.dll')

import sys

# Import the LDAP / ActiveDirectory interface
from System.DirectoryServices import *

# A few predefined values to simplify LDAP querying, pilfered from various internet-ey type places.
BINARY_PROPS = ('objectguid', 'objectsid', 'msexchmailboxsecuritydescriptor', 'msexchmailboxguid')
ACCOUNT_QUERY = &amp;quot;(&amp;amp;amp;(objectCategory=user)(objectClass=person)(sAMAccountName=_ACCOUNTNAME_))&amp;quot;
PRINCIPAL_QUERY = &amp;quot;(&amp;amp;amp;(objectCategory=user)(objectClass=person)(userPrincipalName=_PRINCIPALID__))&amp;quot;
GROUP_QUERY = &amp;quot;(&amp;amp;amp;(objectCategory=group)(sAMAccountName=_GROUPNAME_))&amp;quot;
PARTIAL_LAST_QUERY = &amp;quot;(&amp;amp;amp;(objectCategory=user)(sAMAccountName=*)(objectClass=person)(sn=_LASTNAME_*))&amp;quot; 
PARTIAL_NAME_QUERY = &amp;quot;(&amp;amp;amp;(objectCategory=user)(objectClass=person)(sAMAccountName=*)(sn=_LASTNAME_*)(givenname=_FIRSTNAME_*))&amp;quot; 
PARTIAL_FIRST_QUERY = &amp;quot;(&amp;amp;amp;(objectCategory=user)(objectClass=person)(sAMAccountName=*)(givenname=_FIRSTNAME_*))&amp;quot; 



class DirectoryEntryHelper(object):
  &amp;quot;&amp;quot;&amp;quot; Helper class for wrapping
  and simplifying AD search results.
  As much fun as dealing with Microsoft style
  object hierarchies can be...
  TODO: Is there an easy way to inject things into __dict__ for dir &amp;amp;amp; ipy tab completion?
  &amp;quot;&amp;quot;&amp;quot;

  def __init__(self, entry):
      if isinstance(entry, SearchResult):
          self.__dict__['_entry'] = entry.GetDirectoryEntry()
      elif isinstance(entry, DirectoryEntry):
          self.__dict__['_entry'] = entry
      else:
          raise TypeError, &amp;quot;Invalid type '%s', don't know how to proxy it&amp;quot; % type(entry)

  @property
  def properties(self):
      return self._entry.Properties

  @property
  def keys(self):
      &amp;quot;&amp;quot;&amp;quot;Returns a comprehended list
      of the *defined* Keys on the Properties object.
      Any valid keys w/o values won't get listed.
      &amp;quot;&amp;quot;&amp;quot;
      return [key for key in self.properties.Keys]

  def __getattr__(self, key):
      &amp;quot;&amp;quot;&amp;quot;Proxies the Properties objects in the DirectoryEntry
      to provide a simple getter.
      First checks if DirectoryEntry has an attribute (property)
      matching requested key, and passes that if so.
      Otherwise, fetches a matching property.  If you have
      a name collison, use the .properties property on this object
      to get a clean copy of the Properties object
      TODO: Better support for multi-value keys (only returns first idx right now]
      &amp;quot;&amp;quot;&amp;quot;
      if hasattr(self._entry, key):
          return getattr(self._entry, key)
      elif self._entry.Properties[key].Count:
          return self._entry.Properties[key][0]
      else:
          return None

  def __setattr__(self, key, value):
      &amp;quot;&amp;quot;&amp;quot;Proxies the Properties objects in the DirectoryEntry 
      to provide a simpler setter.
      First checks if DirectoryEntry has an attribute (property)
      matching requested key, and sets on that if so.
      Otherwise, sets upon a matching property.  
      If the property has an existing count &amp;gt; 0, sets Index 0  
      If not, it does an Add().
      The way the MS Classes work, Properties.Keys only returns keys that
      have a value count.  However, any *valid* Key has a silent value which
      can be initialized via Add().
      Invalid keys throw an error, so you can't be arbitrary.
      I use a list of keyspace found at: 

          http://www.dotnetactivedirectory.com/\
              Understanding_LDAP_Active_Directory_User_Object_Properties.html

      If you have a name collison, use the .properties property on this object
      to get a clean copy of the Properties object
      TODO: Better support for multi-value keys (only sets first idx right now]
      &amp;quot;&amp;quot;&amp;quot;
      if hasattr(self._entry, key):
          setattr(self._entry, key, value)
      else:
          if self._entry.Properties[key].Count &amp;gt; 0:
              if self._entry.Properties[key].Count &amp;gt; 1:
                  print &amp;gt;&amp;gt; sys.stderr, &amp;quot;[warning] Key '%s' contains multiple values which we don't properly support yet.  Using Index 0&amp;quot;
              self._entry.Properties[key][0] = value
          else:
              self._entry.Properties[key].Add(value)
          # commit early, commit often...
          self._entry.CommitChanges()

  def __repr__(self):
      &amp;quot;&amp;quot;&amp;quot;Print all pretty like on console.
      My biggest pet peeve working in .Net is that most objects don't have
      any kind of __str__/__repr__ value on them to give you quick information
      on their contents.  ARGH!
      &amp;quot;&amp;quot;&amp;quot;
      return &amp;quot;&amp;lt;DirectoryEntryHelper:{sn=%s,givenName=%s,mail=%s,sAMAccountName=%s}&amp;gt;&amp;quot; %\
          (self.sn, self.givenName, self.mail, self.sAMAccountName)

class ActiveDirectory(object):
  &amp;quot;&amp;quot;&amp;quot; ActiveDirectory interface class.
  Tested on IronPython 2.6RC + Mono 2.4.2.3 on Linux. YMMV.
  &amp;quot;&amp;quot;&amp;quot;

  # Active Directory Handle
  adh = None

  server = None
  domain = None
  baseDN = None

  def __init__(self, server, domain, username, password, baseDN=&amp;quot;&amp;quot;):
      &amp;quot;&amp;quot;&amp;quot;Constructor to instantiate the LDAP connection.
      server is a resolvable address to your domain controller (e.g. the resolvable hostname or IP)
      domain should be the ActiveDirectory domain as specified by your admin.
      If you don't pass BaseDN, your 'domain' argument will be split on
      . and each piece will be passed as DC=&amp;lt;piece&amp;gt;. This will be used as your BaseDN
      E.G. domain aurigasv.local becomes &amp;quot;DC=aurigasv,DC=local&amp;quot;

      *** Any exception in connecting will be wrapped and rethrown, aborting construction.
      &amp;quot;&amp;quot;&amp;quot;
      try:
          # Setup the baseDN
          self.server = server
          self.domain = domain
          if baseDN:
              self.baseDN = baseDN
          else:
              for tier in domain.split('.'):
                  baseDN += &amp;quot;DC=%s,&amp;quot; % tier
              self.baseDN = baseDN[:-1]
              #print &amp;quot;Established a parsed BaseDN of '%s'&amp;quot; % self.baseDN

          # Establish a directory object, with auth info, pointing at the authenticating user
          self.adh = DirectoryEntry(&amp;quot;LDAP://%s/%s&amp;quot; % (server, self.baseDN))
          self.adh.AuthenticationType = AuthenticationTypes.Secure
          self.adh.Username = username
          self.adh.Password = password

          # connect and fetch a copy of the authenticating user
          filter = &amp;quot;sAMAccountName=%s&amp;quot; % username
          dsSystem = DirectorySearcher(self.adh, filter)
          dsSystem.SearchScope = SearchScope.Subtree
          result = dsSystem.FindOne()

          if not result:
              raise Exception, &amp;quot;Found no result searching for specified authentication user %s.&amp;quot; % username

      except Exception, e:
          raise e, &amp;quot;Authentication failure.  Did you provide valid connection information / authentication credentials?&amp;quot;

  def get_helper(self, result):
      if hasattr(result, &amp;quot;__iter__&amp;quot;):
          return (DirectoryEntryHelper(item) for item in result)
      else:
          return DirectoryEntryHelper(result)


class ActiveDirectorySearcher(ActiveDirectory):

  def _search(self, filter, multi=True):
      &amp;quot;&amp;quot;&amp;quot;Semi-private method for searching.
      Note that &amp;quot;filter&amp;quot; needs to be a string which is a 
      *VALID* LDAP query/filter.  You should probably use one of the useful
      utility find methods instead of querying this directly
      unless you understand LDAP queries
      By default searches for one only, pass multi=True for multiple results.
      &amp;quot;&amp;quot;&amp;quot;
      print &amp;quot;[debug] Searching activedirectory for %s.  Allow multiple results? %s&amp;quot; % (filter, multi)
      searcher = DirectorySearcher(self.adh)

      searcher.ReferralChasing = ReferralChasingOption.All
      searcher.SearchScope = SearchScope.Subtree
      searcher.Filter = filter

      results = searcher.FindAll()

      if results.Count == 0:
          raise Exception, &amp;quot;No results found for search.&amp;quot;

      if multi:
          # Generator for performance
          return (entry for entry in results)
      else:
          if results.Count &amp;gt; 1:
              raise Exception, &amp;quot;Found multiple results in single-search mode.  To support multiples, please pass multi=True to the find method.&amp;quot;
          return results[0]  


  def find_last_name(self, last_name, multi=False, nowrap=False):
      &amp;quot;&amp;quot;&amp;quot;Searches by sn (lastname).
      This can be a partial query, as long as the first
      few letters of last_name are defined 
      By default searches for one only, pass multi=True for multiple results.
      If you want  raw .Net SearchResult(s) object(s), pass nowrap=True, otherwise
      you get it back wrapped in a helper class.
      &amp;quot;&amp;quot;&amp;quot;
      result = self._search(PARTIAL_LAST_QUERY.replace('_LASTNAME_', last_name), multi)
      if not nowrap:
          result = self.get_helper(result)

      return result

  def find_name(self, last_name=None, first_name=None, multi=False, nowrap=False):
      &amp;quot;&amp;quot;&amp;quot;Searches by sn (lastname) &amp;amp;amp; givenName( firstname) 
      This can be a partial query, as long as the first
      few letters of last_name are defined
      If firstname is None, it quietly passes into find_last_name.
      By default searches for one only, pass multi=True for multiple results.
      If you want  raw .Net SearchResult(s) object(s), pass nowrap=True, otherwise
      you get it back wrapped in a helper class.
      &amp;quot;&amp;quot;&amp;quot;
      if not last_name:
          raise Exception, &amp;quot;You must, at a minimum, specify last_name for a name search.&amp;quot;

      if not first_name:
          result = self.find_last_name(last_name, multi)
      else:
          result = self._search(PARTIAL_NAME_QUERY.replace('_FIRSTNAME_', first_name).replace('_LASTNAME_', last_name), multi)
          if not nowrap:
              result = self.get_helper(result)

      return result

  def find_account(self, account_name, multi=False, nowrap=False):
      &amp;quot;&amp;quot;&amp;quot;Searches by  sAMAccountName (account_name), which should be unique
      This can be a partial query, as long as the first
      few letters of account_name are defined
      If firstname is None, it quietly passes into find_last_name.
      By default searches for one only, pass multi=True for multiple results.
      If you want  raw .Net SearchResult(s) object(s), pass nowrap=True, otherwise
      you get it back wrapped in a helper class.
      &amp;quot;&amp;quot;&amp;quot;
      result = self._search(ACCOUNT_QUERY.replace('_ACCOUNTNAME_', account_name), multi)
      if not nowrap:
          result = self.get_helper(result)

      return result

  def find_first_name(self, first_name, multi=False, nowrap=False):
      &amp;quot;&amp;quot;&amp;quot;Searches by givenName, which should be unique
      This can be a partial query, as long as the first
      few letters of account_name are defined
      If firstname is None, it quietly passes into find_last_name.
      By default searches for one only, pass multi=True for multiple results.
      If you want  raw .Net SearchResult(s) object(s), pass nowrap=True, otherwise
      you get it back wrapped in a helper class.
      &amp;quot;&amp;quot;&amp;quot;
      result = self._search(PARTIAL_FIRST_QUERY.replace('_FIRSTNAME_', first_name), multi)
      if not nowrap:
          result = self.get_helper(result)

      return result&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;



</content>
 </entry>
 
 <entry>
   <title>Double Clicking in IronPython + Silverlight</title>
   <link href="http://blog.evilmonkeylabs.com/2009/09/02/double-clicking-in-ironpython-and-silverlight/"/>
   <updated>2009-09-02T00:00:00+00:00</updated>
   <id>http://blog.evilmonkeylabs.com/2009/09/02/double-clicking-in-ironpython-and-silverlight</id>
   <content type="html">&lt;p&gt;Silverlight rather oddly lacks a double click event.  You can detect single click, but for double clicking you're on your own.  I found some examples for C#, but none for IronPython and had, a few months ago, ported some code I found &lt;a href=&quot;http://shemesh.wordpress.com/2009/03/05/silverlight-attach-a-double-click-to-any-object/&quot;&gt;here&lt;/a&gt; for IronPython.&lt;/p&gt;

&lt;p&gt;I've been using it in application development and user testing for about 6 months and it works fairly well in both Silverlight 2 and 3, although YMMV.&lt;/p&gt;

&lt;div&gt;
  &lt;pre&gt;&lt;code class='python'&gt;CLICK_INTERVAL = 500
 
class ClickHandler(object):
    &amp;quot;&amp;quot;&amp;quot;Attach a Double Click handler to any given UIElement,
    as by default Silverlight lacks support for double clicking.
    &amp;quot;&amp;quot;&amp;quot;
    _lastClickTime = 0
    _callback = None
 
    @staticmethod
    def attachDoubleClickHandler(target, callback):
        return ClickHandler(target, callback)
 
    def __init__(self, target, callback):
        target.MouseLeftButtonUp += self.target_MouseLeftButtonUp
        target.MouseLeftButtonDown += self.target_MouseLeftButtonDown
        self._callback = callback
 
    def target_MouseLeftButtonUp(self, sender, args):
        self._lastClickTime = DateTime.Now.Ticks / 10000
 
    def target_MouseLeftButtonDown(self, sender, args):
        now = DateTime.Now.Ticks / 10000
        if now - self._lastClickTime &amp;lt; CLICK_INTERVAL and \
          now - self._lastClickTime &amp;gt; 25:
            self._callback(sender, args)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;You may want to tweak the click interval based on what works for you.  500 milliseconds worked well with my users, for the application in question. To attach a ClickHandler simply invoke the static method &lt;code&gt;ClickHandler.attachDoubleClickHandler(«uiElementObj», «callbackFunc»)&lt;/code&gt;&lt;/p&gt;

&lt;!--more--&gt;




&lt;div&gt;
  &lt;pre&gt;&lt;code class='python'&gt;from System import Uri, UriKind
from System.Windows import Application, UIElement
from System.Windows.Browser import HtmlPage
 
from util import ClickHandler
 
 
class Foo(UIElement):
  &amp;quot;&amp;quot;&amp;quot;Sample UIElement class demonstrating usage of 
  ClickHandler and it's events.
  &amp;quot;&amp;quot;&amp;quot;
 
  def __init__(self):
    Application.LoadComponent(self, Uri('xaml/widgets/foo.xaml',
            UriKind.Relative))
    ClickHandler.attachDoubleClickHandler(self, self.evt_dblClicked)
 
  def evt_dblClicked(self, sender, args):
    &amp;quot;&amp;quot;&amp;quot;Event for double click; this gets passed
    the original &amp;quot;MouseLeftButtonDown&amp;quot; arguments 
    which ClickHandler got, so you'll want to match
    the &amp;quot;MouseButtonEventHandler&amp;quot; delegate arguments.
    Object sender - the object the mouse click handler is attached to,
            in this case, should be the same as 'self'
    System.Windows.Input.MouseButtonEventArgs args - the mouse event arguments
    &amp;quot;&amp;quot;&amp;quot;
    HtmlPage.Window.Alert('%s got double clicked!' % sender)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;It's not the world's greatest solution, but it gets the job done.&lt;/p&gt;
</content>
 </entry>
 
 
</feed>
